%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1508.m00.i125.n047.S.c12.252107416 Isometric 3d private house, rural buildings and cottages icons set.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Антон
%%CreationDate: 8/31/2015
%%BoundingBox: 0 0 525 350
%%HiResBoundingBox: 0 0 525 350
%%CropBox: 0 0 525 350
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1508.m00.i125.n035.P.c25.293594435 Tyre store logo. Vintage car vector label</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-08-31T11:25:23+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-08-31T11:25:23+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-08-31T11:25:23+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqoX1/ZWFrJd3s6W1tEKyTSsEVR7k4JSAFlnDHKZ4Yiywx/zs/LpWK/&#xA;pCRqEjkLeahp3Hw5j/nMfe7Mdian+b9oTTy/+ZHlHX74WOm3ha5ZSyRyRvFy47kLzAqab0wQ1mKU&#xA;+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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:27432c94-b8c4-2d47-8b69-c2b35e58cc92</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:27432c94-b8c4-2d47-8b69-c2b35e58cc92</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0074c55c-3d4e-4148-a992-d379934789f6</stRef:instanceID>
            <stRef:documentID>xmp.did:0074c55c-3d4e-4148-a992-d379934789f6</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:aff6bf30-cc43-d448-a6bd-3eb49aad843a</stEvt:instanceID>
                  <stEvt:when>2015-06-26T18:07:44+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:aab20a66-c3a5-d743-ac57-1f166d5a682d</stEvt:instanceID>
                  <stEvt:when>2015-06-28T17:00:50+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d0259daf-101c-a544-8fb4-42fd99942d7b</stEvt:instanceID>
                  <stEvt:when>2015-08-04T10:47:49+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5c2ab3aa-fe39-5f47-b94e-17ee252dcdd5</stEvt:instanceID>
                  <stEvt:when>2015-08-04T11:53:48+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fc715725-0908-b848-8fa6-cb2e79f2f761</stEvt:instanceID>
                  <stEvt:when>2015-08-30T16:54:57+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:403eb608-ffcc-f241-9cae-99349a5ed157</stEvt:instanceID>
                  <stEvt:when>2015-08-30T16:56:14+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:fc60f70c-0599-b240-9dd1-5f06e6b3d27d</stEvt:instanceID>
                  <stEvt:when>2015-08-30T16:56:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0074c55c-3d4e-4148-a992-d379934789f6</stEvt:instanceID>
                  <stEvt:when>2015-08-31T10:45:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:27432c94-b8c4-2d47-8b69-c2b35e58cc92</stEvt:instanceID>
                  <stEvt:when>2015-08-31T11:25:23+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>525.000000</stDim:w>
            <stDim:h>350.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -350 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 350 li
525 350 li
525 0 li
cp
clp
525 350 mo
0 350 li
0 0 li
525 0 li
525 350 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
94.9271 166.893 mo
168.811 124.463 li
168.811 122.65 li
21.0388 122.65 li
21.0388 124.463 li
94.9271 166.893 li
cp
.0901961 .4 .215686 rgb
f
94.9271 165.079 mo
168.811 122.65 li
94.923 80.2195 li
21.0388 122.65 li
94.9271 165.079 li
cp
.152941 .682353 .376471 rgb
f
141.927 109.845 mo
95.357 83.8394 li
49.2335 109.927 li
95.8035 136.404 li
141.927 109.845 li
cp
.937255 .952941 .952941 rgb
f
95.8035 140.67 mo
49.2335 114.193 li
49.2335 109.927 li
95.8035 136.404 li
95.8035 140.67 li
cp
.666667 .717647 .717647 rgb
f
95.8035 140.67 mo
141.927 114.111 li
141.927 109.845 li
95.8035 136.404 li
95.8035 140.67 li
cp
.741176 .764706 .780392 rgb
f
95.6429 135.628 mo
95.6429 104.497 li
118.011 78.7673 li
140.379 78.8662 li
140.379 109.997 li
95.6429 135.628 li
cp
.827451 .329412 0 rgb
f
95.6429 135.628 mo
95.6429 104.497 li
50.9065 78.8662 li
50.9065 109.997 li
95.6429 135.628 li
cp
.756863 .219608 .164706 rgb
f
118.978 78.7506 mo
95.6429 105.593 li
48.9722 78.8537 li
72.3075 52.0117 li
118.978 78.7506 li
cp
.203922 .286275 .368627 rgb
f
118.978 78.7506 mo
142.314 78.8537 li
95.6429 52.1148 li
72.3075 52.0117 li
118.978 78.7506 li
cp
.337255 .392157 .447059 rgb
f
118.978 78.7506 mo
142.314 78.8537 li
140.422 80.7369 li
119.837 80.6463 li
97.5348 106.3 li
95.6428 105.593 li
118.978 78.7506 li
cp
.666667 .717647 .717647 rgb
f
65.8433 96.3139 mo
57.6119 91.572 li
57.1575 91.9758 li
65.3889 109.195 li
65.8432 108.791 li
65.8433 96.3139 li
cp
.937255 .952941 .952941 rgb
f
65.389 96.7178 mo
57.1575 91.9758 li
57.1575 104.453 li
65.3889 109.195 li
65.389 96.7178 li
cp
.741176 .764706 .780392 rgb
f
58.1259 103.893 mo
58.1259 93.6514 li
64.4207 97.2777 li
64.4204 107.52 li
58.1259 103.893 li
cp
.337255 .392157 .447059 rgb
f
57.5053 96.2744 mo
57.5053 97.2606 li
64.9347 101.541 li
64.9347 100.554 li
57.5053 96.2744 li
cp
.741176 .764706 .780392 rgb
f
57.5053 99.8585 mo
57.5053 100.845 li
64.9347 105.125 li
64.9347 104.138 li
57.5053 99.8585 li
cp
f
61.6964 95.1924 mo
60.7647 94.6556 li
60.7647 105.775 li
61.6964 106.311 li
61.6964 95.1924 li
cp
f
82.1429 105.7 mo
73.9115 100.958 li
73.4571 101.362 li
81.6885 118.581 li
82.1428 118.177 li
82.1429 105.7 li
cp
.937255 .952941 .952941 rgb
f
81.6886 106.104 mo
73.4571 101.362 li
73.4571 113.839 li
81.6885 118.581 li
81.6886 106.104 li
cp
.741176 .764706 .780392 rgb
f
74.4256 113.279 mo
74.4256 103.037 li
80.7203 106.664 li
80.72 116.906 li
74.4256 113.279 li
cp
.337255 .392157 .447059 rgb
f
73.8049 105.66 mo
73.8049 106.647 li
81.2343 110.926 li
81.2343 109.94 li
73.8049 105.66 li
cp
.741176 .764706 .780392 rgb
f
73.8049 109.244 mo
73.8049 110.231 li
81.2343 114.511 li
81.2343 113.524 li
73.8049 109.244 li
cp
f
77.996 104.578 mo
77.0643 104.042 li
77.0643 115.161 li
77.996 115.697 li
77.996 104.578 li
cp
f
128.765 93.4549 mo
136.997 88.7128 li
137.451 89.1167 li
129.22 117.073 li
128.765 116.669 li
128.765 93.4549 li
cp
.937255 .952941 .952941 rgb
f
129.22 93.8587 mo
137.451 89.1167 li
137.451 116.745 li
129.22 121.486 li
129.22 93.8587 li
cp
.741176 .764706 .780392 rgb
f
136.483 117.284 mo
136.483 90.7922 li
130.188 94.4186 li
130.188 120.911 li
136.483 117.284 li
cp
.337255 .392157 .447059 rgb
f
105.291 106.97 mo
113.522 102.228 li
113.976 102.631 li
105.745 119.851 li
105.291 119.447 li
105.291 106.97 li
cp
.937255 .952941 .952941 rgb
f
105.745 107.373 mo
113.976 102.631 li
113.976 115.109 li
105.745 119.851 li
105.745 107.373 li
cp
.741176 .764706 .780392 rgb
f
113.008 114.549 mo
113.008 104.307 li
106.713 107.933 li
106.713 118.175 li
113.008 114.549 li
cp
.337255 .392157 .447059 rgb
f
113.629 106.93 mo
113.629 107.916 li
106.199 112.196 li
106.199 111.21 li
113.629 106.93 li
cp
.741176 .764706 .780392 rgb
f
113.629 110.514 mo
113.629 111.5 li
106.199 115.78 li
106.199 114.794 li
113.629 110.514 li
cp
f
109.438 105.848 mo
110.369 105.311 li
110.369 116.43 li
109.438 116.967 li
109.438 105.848 li
cp
f
116.634 100.469 mo
124.866 95.7269 li
125.32 96.1307 li
117.089 113.35 li
116.634 112.946 li
116.634 100.469 li
cp
.937255 .952941 .952941 rgb
f
117.089 100.873 mo
125.32 96.1307 li
125.32 108.608 li
117.089 113.35 li
117.089 100.873 li
cp
.741176 .764706 .780392 rgb
f
124.352 108.048 mo
124.352 97.8062 li
118.057 101.433 li
118.057 111.675 li
124.352 108.048 li
cp
.337255 .392157 .447059 rgb
f
124.972 100.429 mo
124.972 101.415 li
117.543 105.695 li
117.543 104.709 li
124.972 100.429 li
cp
.741176 .764706 .780392 rgb
f
124.972 104.013 mo
124.972 105 li
117.543 109.28 li
117.543 108.293 li
124.972 104.013 li
cp
f
120.781 99.3472 mo
121.713 98.8105 li
121.713 109.93 li
120.781 110.466 li
120.781 99.3472 li
cp
f
114.07 89.6765 mo
122.302 84.9344 li
122.756 85.3382 li
114.525 95.9106 li
114.07 95.5068 li
114.07 89.6765 li
cp
.937255 .952941 .952941 rgb
f
114.524 90.0803 mo
122.756 85.3382 li
122.756 91.1689 li
114.525 95.9106 li
114.524 90.0803 li
cp
.741176 .764706 .780392 rgb
f
121.787 90.609 mo
121.787 87.0138 li
115.493 90.6402 li
115.493 94.2354 li
121.787 90.609 li
cp
.337255 .392157 .447059 rgb
f
118.217 88.5549 mo
119.149 88.0181 li
119.149 92.4903 li
118.217 93.0269 li
118.217 88.5549 li
cp
.741176 .764706 .780392 rgb
f
36.3781 86.7869 mo
37.654 86.7869 38.6883 87.3057 38.6883 87.9457 cv
38.6883 88.4378 38.6883 122.699 38.6883 123.191 cv
38.6883 123.361 38.6148 123.522 38.484 123.667 cv
38.484 123.583 li
38.2946 123.793 37.9839 123.97 37.5963 124.091 cv
37.5963 124.176 li
37.2426 124.286 36.8253 124.35 36.3781 124.35 cv
35.1023 124.35 34.068 123.831 34.068 123.191 cv
34.068 122.699 34.068 88.4378 34.068 87.9457 cv
34.068 87.3057 35.1023 86.7869 36.3781 86.7869 cv
cp
.827451 .329412 0 rgb
f
36.394 72.487 mo
44.4108 72.487 47.6031 78.7364 47.6031 81.8417 cv
47.6031 93.633 li
47.6032 93.633 li
47.6032 97.7181 li
47.6032 100.823 44.8503 107.073 36.3939 107.073 cv
28.3771 107.073 25.1849 100.823 25.1849 97.7181 cv
25.1849 95.8322 li
25.1849 93.633 li
25.1849 81.8417 li
25.1849 78.7364 27.9376 72.487 36.394 72.487 cv
cp
.262745 .462745 .109804 rgb
f
27.0341 78.515 mo
27.2837 81.5005 31.4266 83.6452 36.2876 83.3053 cv
41.1486 82.9653 44.8868 80.2695 44.6372 77.284 cv
44.3876 74.2985 40.2447 72.1538 35.3837 72.4937 cv
30.5227 72.8336 26.7844 75.5295 27.0341 78.515 cv
cp
.482353 .647059 .145098 rgb
f
29.1688 76.0727 mo
29.4132 77.3336 31.8615 77.9161 34.6374 77.3738 cv
37.4133 76.8314 39.4655 75.3695 39.2211 74.1086 cv
38.9768 72.8476 36.5284 72.2651 33.7526 72.8075 cv
30.9767 73.3498 28.9245 74.8117 29.1688 76.0727 cv
cp
.607843 .745098 .137255 rgb
f
31.5737 74.424 mo
31.6663 74.9018 32.5943 75.1226 33.6463 74.917 cv
34.6983 74.7114 35.4762 74.1574 35.3835 73.6795 cv
35.2909 73.2016 34.363 72.9808 33.3109 73.1864 cv
32.2589 73.392 31.4812 73.946 31.5737 74.424 cv
cp
.764706 .870588 .34902 rgb
f
36.394 102.565 mo
43.7112 102.565 46.8131 100.083 47.5722 98.2969 cv
47.2586 101.537 44.3544 107.073 36.3939 107.073 cv
28.8083 107.073 25.5468 101.481 25.2174 98.249 cv
26.0262 100.038 29.3955 102.565 36.394 102.565 cv
cp
.223529 .411765 .0627451 rgb
f
30.8523 101.393 mo
31.1168 101.393 31.373 101.362 31.625 101.318 cv
31.625 108.502 li
31.625 108.881 31.9323 109.188 32.3105 109.188 cv
35.2237 109.188 li
35.5843 109.188 35.8722 108.906 35.8991 108.552 cv
36.7254 108.974 37.6451 109.201 38.5747 109.214 cv
38.2467 110.765 36.872 111.93 35.2237 111.93 cv
32.3105 111.93 li
30.4177 111.93 28.8833 110.395 28.8833 108.502 cv
28.8833 101.15 li
29.5136 101.308 30.1754 101.393 30.8523 101.393 cv
cp
.827451 .329412 0 rgb
f
43.2032 99.5937 mo
42.9387 99.5937 42.6825 99.5629 42.4304 99.5191 cv
42.4304 106.703 li
42.4304 107.081 42.1231 107.389 41.7449 107.389 cv
38.8317 107.389 li
38.4712 107.389 38.1833 107.107 38.1564 106.753 cv
37.3301 107.175 36.4104 107.401 35.4807 107.415 cv
35.8088 108.966 37.1834 110.13 38.8317 110.13 cv
41.7449 110.13 li
43.6377 110.13 45.1722 108.596 45.1722 106.703 cv
45.1722 99.3503 li
44.5418 99.5087 43.88 99.5937 43.2032 99.5937 cv
cp
f
30.0437 90.0243 mo
34.7358 90.0243 36.6041 93.6818 36.6041 95.4993 cv
36.6041 102.4 li
36.6041 102.4 li
36.6041 104.791 li
36.6041 106.609 34.9929 110.266 30.0437 110.266 cv
25.3517 110.266 23.4834 106.609 23.4834 104.791 cv
23.4834 103.688 li
23.4834 102.4 li
23.4834 95.4993 li
23.4834 93.6818 25.0945 90.0243 30.0437 90.0243 cv
cp
.380392 .568627 .239216 rgb
f
24.5656 93.5523 mo
24.7118 95.2996 27.1365 96.5548 29.9814 96.3558 cv
32.8264 96.1569 35.0143 94.5791 34.8682 92.8317 cv
34.7222 91.0844 32.2974 89.8292 29.4524 90.0282 cv
26.6075 90.2271 24.4195 91.8049 24.5656 93.5523 cv
cp
.607843 .752941 .305882 rgb
f
25.815 92.1228 mo
25.9581 92.8608 27.391 93.2017 29.0156 92.8843 cv
30.6403 92.5669 31.8414 91.7113 31.6984 90.9733 cv
31.5554 90.2353 30.1224 89.8943 28.4978 90.2118 cv
26.8731 90.5292 25.672 91.3848 25.815 92.1228 cv
cp
.729412 .85098 .313726 rgb
f
27.2226 91.1579 mo
27.2768 91.4375 27.8199 91.5667 28.4356 91.4464 cv
29.0513 91.3261 29.5066 91.0019 29.4524 90.7221 cv
29.3981 90.4424 28.855 90.3132 28.2393 90.4335 cv
27.6236 90.5539 27.1684 90.8782 27.2226 91.1579 cv
cp
.894118 .976471 .568627 rgb
f
30.0437 107.628 mo
34.3262 107.628 36.1417 106.175 36.586 105.13 cv
36.4024 107.026 34.7027 110.266 30.0437 110.266 cv
25.604 110.266 23.6952 106.994 23.5024 105.102 cv
23.9757 106.149 25.9477 107.628 30.0437 107.628 cv
cp
.333333 .517647 .172549 rgb
f
44.1001 91.2098 mo
47.9622 91.2098 49.5 94.2204 49.5 95.7163 cv
49.5 101.397 li
49.5 101.397 li
49.5 103.365 li
49.5 104.861 48.1739 107.871 44.1001 107.871 cv
40.238 107.871 38.7002 104.861 38.7002 103.365 cv
38.7002 102.456 li
38.7002 101.397 li
38.7002 95.7163 li
38.7002 94.2204 40.0263 91.2098 44.1001 91.2098 cv
cp
.380392 .568627 .239216 rgb
f
39.591 94.1137 mo
39.7113 95.552 41.7071 96.5851 44.0489 96.4214 cv
46.3906 96.2576 48.1915 94.9589 48.0713 93.5206 cv
47.951 92.0824 45.9552 91.0492 43.6134 91.2129 cv
41.2717 91.3767 39.4708 92.6754 39.591 94.1137 cv
cp
.607843 .752941 .305882 rgb
f
40.6194 92.9371 mo
40.7371 93.5446 41.9166 93.8252 43.2539 93.5639 cv
44.5912 93.3026 45.5798 92.5983 45.4621 91.9909 cv
45.3443 91.3835 44.1648 91.1029 42.8276 91.3641 cv
41.4903 91.6254 40.5017 92.3296 40.6194 92.9371 cv
cp
.729412 .85098 .313726 rgb
f
41.778 92.1428 mo
41.8226 92.373 42.2696 92.4794 42.7764 92.3804 cv
43.2833 92.2814 43.6579 92.0144 43.6133 91.7842 cv
43.5687 91.5539 43.1217 91.4476 42.6149 91.5467 cv
42.108 91.6457 41.7334 91.9126 41.778 92.1428 cv
cp
.894118 .976471 .568627 rgb
f
44.1001 105.7 mo
47.6251 105.7 49.1195 104.504 49.4852 103.643 cv
49.3341 105.204 47.935 107.871 44.1001 107.871 cv
40.4457 107.871 38.8745 105.178 38.7159 103.62 cv
39.1055 104.482 40.7286 105.7 44.1001 105.7 cv
cp
.333333 .517647 .172549 rgb
f
87.1447 120.843 mo
88.2349 120.843 89.1187 121.286 89.1187 121.833 cv
89.1187 122.254 89.1187 151.53 89.1187 151.95 cv
89.1187 152.095 89.056 152.233 88.9442 152.357 cv
88.9442 152.285 li
88.7824 152.465 88.5169 152.616 88.1856 152.719 cv
88.1856 152.792 li
87.8834 152.886 87.5268 152.941 87.1447 152.941 cv
86.0544 152.941 85.1707 152.497 85.1707 151.95 cv
85.1707 151.53 85.1707 122.254 85.1707 121.833 cv
85.1707 121.286 86.0544 120.843 87.1447 120.843 cv
cp
.827451 .329412 0 rgb
f
87.1582 108.624 mo
94.0087 108.624 96.7364 113.964 96.7364 116.617 cv
96.7364 126.693 li
96.7365 126.693 li
96.7365 130.184 li
96.7365 132.837 94.3842 138.177 87.1582 138.177 cv
80.3078 138.177 77.58 132.837 77.58 130.184 cv
77.58 128.572 li
77.58 126.693 li
77.58 116.617 li
77.58 113.964 79.9323 108.624 87.1582 108.624 cv
cp
.262745 .462745 .109804 rgb
f
79.1602 113.774 mo
79.3734 116.326 82.9136 118.158 87.0673 117.868 cv
91.2211 117.577 94.4154 115.274 94.2021 112.723 cv
93.9888 110.171 90.4487 108.339 86.295 108.629 cv
82.1413 108.92 78.9468 111.223 79.1602 113.774 cv
cp
.482353 .647059 .145098 rgb
f
80.9843 111.687 mo
81.1931 112.765 83.2852 113.263 85.6572 112.799 cv
88.0293 112.336 89.7829 111.087 89.5741 110.009 cv
89.3653 108.932 87.2731 108.434 84.9011 108.897 cv
82.5291 109.361 80.7755 110.61 80.9843 111.687 cv
cp
.607843 .745098 .137255 rgb
f
83.0393 110.279 mo
83.1185 110.687 83.9114 110.876 84.8104 110.7 cv
85.7093 110.524 86.3739 110.051 86.2948 109.643 cv
86.2157 109.234 85.4227 109.046 84.5238 109.221 cv
83.6248 109.397 82.9602 109.87 83.0393 110.279 cv
cp
.764706 .870588 .34902 rgb
f
87.1582 134.325 mo
93.4108 134.325 96.0614 132.204 96.71 130.678 cv
96.4421 133.447 93.9604 138.177 87.1582 138.177 cv
80.6762 138.177 77.8893 133.399 77.6078 130.637 cv
78.2989 132.166 81.178 134.325 87.1582 134.325 cv
cp
.223529 .411765 .0627451 rgb
f
82.4228 133.324 mo
82.6488 133.324 82.8678 133.298 83.0832 133.26 cv
83.0832 139.399 li
83.0832 139.722 83.3457 139.985 83.6689 139.985 cv
86.1582 139.985 li
86.4663 139.985 86.7124 139.744 86.7353 139.441 cv
87.4415 139.802 88.2273 139.996 89.0216 140.007 cv
88.7414 141.332 87.5668 142.327 86.1582 142.327 cv
83.6689 142.327 li
82.0515 142.327 80.7403 141.016 80.7403 139.399 cv
80.7403 133.116 li
81.2789 133.251 81.8444 133.324 82.4228 133.324 cv
cp
.827451 .329412 0 rgb
f
81.7319 123.609 mo
85.7413 123.609 87.3377 126.735 87.3377 128.288 cv
87.3377 134.185 li
87.3377 134.185 li
87.3377 136.228 li
87.3377 137.781 85.961 140.906 81.7319 140.906 cv
77.7225 140.906 76.1261 137.781 76.1261 136.228 cv
76.1261 135.284 li
76.1261 134.185 li
76.1261 128.288 li
76.1261 126.735 77.5028 123.609 81.7319 123.609 cv
cp
.380392 .568627 .239216 rgb
f
77.0509 126.624 mo
77.1757 128.117 79.2477 129.19 81.6787 129.02 cv
84.1098 128.85 85.9793 127.501 85.8545 126.008 cv
85.7296 124.515 83.6577 123.443 81.2267 123.613 cv
78.7956 123.783 76.926 125.131 77.0509 126.624 cv
cp
.607843 .752941 .305882 rgb
f
78.1185 125.402 mo
78.2407 126.033 79.4652 126.324 80.8534 126.053 cv
82.2416 125.782 83.268 125.051 83.1458 124.42 cv
83.0237 123.79 81.7992 123.498 80.4109 123.77 cv
79.0226 124.041 77.9963 124.772 78.1185 125.402 cv
cp
.729412 .85098 .313726 rgb
f
79.3212 124.578 mo
79.3675 124.817 79.8316 124.927 80.3577 124.824 cv
80.8839 124.722 81.2729 124.445 81.2266 124.206 cv
81.1803 123.967 80.7162 123.856 80.1901 123.959 cv
79.6639 124.062 79.2749 124.339 79.3212 124.578 cv
cp
.894118 .976471 .568627 rgb
f
81.7319 138.652 mo
85.3914 138.652 86.9427 137.41 87.3223 136.517 cv
87.1655 138.137 85.7131 140.906 81.7319 140.906 cv
77.9382 140.906 76.307 138.11 76.1423 136.493 cv
76.5469 137.388 78.2318 138.652 81.7319 138.652 cv
cp
.333333 .517647 .172549 rgb
f
159.377 90.9222 mo
160.467 90.9222 161.351 91.3656 161.351 91.9125 cv
161.351 92.333 161.351 121.609 161.351 122.03 cv
161.351 122.175 161.288 122.313 161.177 122.437 cv
161.177 122.364 li
161.015 122.544 160.749 122.695 160.418 122.799 cv
160.418 122.871 li
160.116 122.965 159.759 123.02 159.377 123.02 cv
158.287 123.02 157.403 122.577 157.403 122.03 cv
157.403 121.609 157.403 92.333 157.403 91.9125 cv
157.403 91.3656 158.287 90.9222 159.377 90.9222 cv
cp
.827451 .329412 0 rgb
f
159.391 78.703 mo
166.241 78.703 168.969 84.0431 168.969 86.6966 cv
168.969 96.7724 li
168.969 96.7724 li
168.969 100.263 li
168.969 102.917 166.617 108.257 159.391 108.257 cv
152.54 108.257 149.812 102.917 149.812 100.263 cv
149.812 98.6516 li
149.812 96.7724 li
149.812 86.6966 li
149.812 84.0431 152.165 78.703 159.391 78.703 cv
cp
.262745 .462745 .109804 rgb
f
151.393 83.8539 mo
151.606 86.4051 155.146 88.2377 159.3 87.9472 cv
163.453 87.6567 166.648 85.3531 166.435 82.802 cv
166.221 80.2508 162.681 78.4183 158.527 78.7087 cv
154.374 78.9992 151.179 81.3028 151.393 83.8539 cv
cp
.482353 .647059 .145098 rgb
f
153.217 81.7669 mo
153.426 82.8444 155.518 83.3422 157.89 82.8787 cv
160.262 82.4153 162.015 81.1661 161.806 80.0886 cv
161.598 79.0111 159.506 78.5134 157.134 78.9769 cv
154.762 79.4403 153.008 80.6894 153.217 81.7669 cv
cp
.607843 .745098 .137255 rgb
f
155.272 80.3581 mo
155.351 80.7665 156.144 80.9551 157.043 80.7794 cv
157.942 80.6037 158.606 80.1303 158.527 79.722 cv
158.448 79.3136 157.655 79.1249 156.756 79.3006 cv
155.857 79.4763 155.193 79.9497 155.272 80.3581 cv
cp
.764706 .870588 .34902 rgb
f
159.391 104.405 mo
165.643 104.405 168.294 102.284 168.943 100.758 cv
168.675 103.526 166.193 108.257 159.391 108.257 cv
152.909 108.257 150.122 103.479 149.84 100.717 cv
150.531 102.245 153.41 104.405 159.391 104.405 cv
cp
.223529 .411765 .0627451 rgb
f
50.3091 125.612 mo
46.9684 125.612 44.3803 123.924 44.3803 122.741 cv
44.3803 121.128 44.3803 118.922 44.3803 118.922 cv
44.3803 117.279 45.8363 113.974 50.3091 113.974 cv
54.5494 113.974 56.238 117.279 56.238 118.922 cv
56.238 118.922 56.238 121.596 56.238 122.789 cv
56.238 123.941 53.7724 125.612 50.3091 125.612 cv
cp
.380392 .568627 .239216 rgb
f
45.3583 117.162 mo
45.4903 118.741 47.6817 119.876 50.2528 119.696 cv
52.8239 119.516 54.8012 118.09 54.6692 116.511 cv
54.5372 114.932 52.3458 113.798 49.7748 113.978 cv
47.2036 114.157 45.2263 115.583 45.3583 117.162 cv
cp
.607843 .752941 .305882 rgb
f
46.4875 115.871 mo
46.6167 116.538 47.9117 116.846 49.38 116.559 cv
50.8482 116.272 51.9337 115.499 51.8045 114.832 cv
51.6753 114.165 50.3801 113.857 48.912 114.144 cv
47.4437 114.43 46.3582 115.204 46.4875 115.871 cv
cp
.729412 .85098 .313726 rgb
f
47.7595 114.998 mo
47.8085 115.251 48.2993 115.368 48.8557 115.259 cv
49.4123 115.151 49.8236 114.857 49.7747 114.605 cv
49.7256 114.352 49.2348 114.235 48.6784 114.344 cv
48.1219 114.453 47.7105 114.746 47.7595 114.998 cv
cp
.894118 .976471 .568627 rgb
f
60.6096 132.413 mo
56.1761 132.413 52.7412 130.171 52.7412 128.602 cv
52.7412 126.461 52.7412 123.533 52.7412 123.533 cv
52.7412 121.353 54.6736 116.967 60.6096 116.967 cv
66.2373 116.967 68.4782 121.353 68.4782 123.533 cv
68.4782 123.533 68.4782 127.082 68.4782 128.666 cv
68.4782 130.194 65.206 132.413 60.6096 132.413 cv
cp
.262745 .462745 .109804 rgb
f
54.0392 121.198 mo
54.2144 123.294 57.1227 124.799 60.535 124.561 cv
63.9472 124.322 66.5714 122.43 66.3962 120.334 cv
66.221 118.238 63.3127 116.733 59.9005 116.971 cv
56.4882 117.21 53.864 119.102 54.0392 121.198 cv
cp
.482353 .647059 .145098 rgb
f
55.5378 119.484 mo
55.7093 120.369 57.428 120.778 59.3766 120.397 cv
61.3252 120.016 62.7658 118.99 62.5943 118.105 cv
62.4227 117.22 60.704 116.811 58.7555 117.192 cv
56.8068 117.572 55.3663 118.598 55.5378 119.484 cv
cp
.607843 .745098 .137255 rgb
f
57.226 118.326 mo
57.291 118.662 57.9423 118.817 58.6808 118.672 cv
59.4194 118.528 59.9653 118.139 59.9003 117.804 cv
59.8354 117.468 59.184 117.313 58.4455 117.458 cv
57.707 117.602 57.161 117.991 57.226 118.326 cv
cp
.764706 .870588 .34902 rgb
f
69.6575 135.435 mo
66.6607 135.435 64.339 133.92 64.339 132.859 cv
64.339 131.412 64.339 129.433 64.339 129.433 cv
64.339 127.96 65.6452 124.994 69.6575 124.994 cv
73.4614 124.994 74.976 127.96 74.976 129.433 cv
74.976 129.433 74.976 131.832 74.976 132.902 cv
74.976 133.936 72.7644 135.435 69.6575 135.435 cv
cp
.380392 .568627 .239216 rgb
f
65.2164 127.855 mo
65.3348 129.271 67.3006 130.289 69.607 130.128 cv
71.9135 129.966 73.6873 128.687 73.5688 127.27 cv
73.4503 125.854 71.4847 124.836 69.1781 124.998 cv
66.8717 125.159 65.098 126.438 65.2164 127.855 cv
cp
.607843 .752941 .305882 rgb
f
66.2293 126.696 mo
66.3452 127.294 67.5069 127.571 68.8241 127.313 cv
70.1411 127.056 71.1149 126.362 70.9989 125.764 cv
70.8831 125.166 69.7213 124.889 68.4042 125.146 cv
67.0871 125.404 66.1134 126.098 66.2293 126.696 cv
cp
.729412 .85098 .313726 rgb
f
67.3704 125.913 mo
67.4144 126.14 67.8547 126.245 68.3538 126.147 cv
68.853 126.05 69.222 125.787 69.1781 125.56 cv
69.1342 125.334 68.6939 125.229 68.1947 125.326 cv
67.6955 125.424 67.3264 125.687 67.3704 125.913 cv
cp
.894118 .976471 .568627 rgb
f
112.614 142.522 mo
108.18 142.522 104.745 140.28 104.745 138.711 cv
104.745 136.57 104.745 133.642 104.745 133.642 cv
104.745 131.462 106.678 127.076 112.614 127.076 cv
118.241 127.076 120.482 131.462 120.482 133.642 cv
120.482 133.642 120.482 137.191 120.482 138.775 cv
120.482 140.303 117.21 142.522 112.614 142.522 cv
cp
.262745 .462745 .109804 rgb
f
106.043 131.307 mo
106.219 133.403 109.127 134.908 112.539 134.67 cv
115.951 134.431 118.575 132.539 118.4 130.443 cv
118.225 128.347 115.317 126.842 111.905 127.08 cv
108.492 127.319 105.868 129.211 106.043 131.307 cv
cp
.482353 .647059 .145098 rgb
f
107.542 129.593 mo
107.713 130.478 109.432 130.887 111.381 130.506 cv
113.329 130.125 114.77 129.099 114.598 128.214 cv
114.427 127.329 112.708 126.92 110.76 127.3 cv
108.811 127.681 107.37 128.707 107.542 129.593 cv
cp
.607843 .745098 .137255 rgb
f
109.23 128.435 mo
109.295 128.771 109.946 128.926 110.685 128.781 cv
111.423 128.637 111.969 128.248 111.904 127.913 cv
111.839 127.577 111.188 127.422 110.45 127.567 cv
109.711 127.711 109.165 128.1 109.23 128.435 cv
cp
.764706 .870588 .34902 rgb
f
101.996 147.222 mo
98.9991 147.222 96.6774 145.707 96.6774 144.646 cv
96.6774 143.199 96.6774 141.22 96.6774 141.22 cv
96.6774 139.747 97.9835 136.781 101.996 136.781 cv
105.8 136.781 107.314 139.747 107.314 141.22 cv
107.314 141.22 107.314 143.619 107.314 144.689 cv
107.314 145.722 105.103 147.222 101.996 147.222 cv
cp
.380392 .568627 .239216 rgb
f
97.5548 139.642 mo
97.6732 141.058 99.639 142.076 101.945 141.914 cv
104.252 141.753 106.026 140.474 105.907 139.057 cv
105.789 137.641 103.823 136.623 101.517 136.785 cv
99.21 136.946 97.4363 138.225 97.5548 139.642 cv
cp
.607843 .752941 .305882 rgb
f
98.5676 138.483 mo
98.6836 139.081 99.8453 139.357 101.162 139.1 cv
102.48 138.843 103.453 138.149 103.337 137.551 cv
103.221 136.952 102.06 136.676 100.743 136.933 cv
99.4255 137.191 98.4517 137.884 98.5676 138.483 cv
cp
.729412 .85098 .313726 rgb
f
99.7088 137.7 mo
99.7527 137.927 100.193 138.032 100.692 137.934 cv
101.191 137.837 101.56 137.574 101.516 137.347 cv
101.472 137.12 101.032 137.016 100.533 137.113 cv
100.034 137.211 99.6648 137.474 99.7088 137.7 cv
cp
.894118 .976471 .568627 rgb
f
263.962 166.392 mo
337.845 123.962 li
337.845 122.149 li
190.074 122.149 li
190.074 123.962 li
263.962 166.392 li
cp
.0901961 .4 .215686 rgb
f
263.962 164.578 mo
337.845 122.149 li
263.958 79.7187 li
190.074 122.149 li
263.962 164.578 li
cp
.152941 .682353 .376471 rgb
f
218.393 109.344 mo
264.964 83.3386 li
311.087 109.426 li
264.517 135.903 li
218.393 109.344 li
cp
.937255 .952941 .952941 rgb
f
264.517 140.17 mo
311.087 113.692 li
311.087 109.426 li
264.517 135.903 li
264.517 140.17 li
cp
.756863 .219608 .164706 rgb
f
264.517 140.17 mo
218.393 113.61 li
218.393 109.344 li
264.517 135.903 li
264.517 140.17 li
cp
.827451 .329412 0 rgb
f
264.678 135.127 mo
264.678 81.0845 li
242.31 55.3549 li
219.941 55.4539 li
219.941 109.496 li
264.678 135.127 li
cp
.666667 .717647 .717647 rgb
f
264.678 135.127 mo
264.678 81.0845 li
309.414 55.4539 li
309.414 109.496 li
264.678 135.127 li
cp
.858824 .858824 .858824 rgb
f
241.342 55.3381 mo
264.678 82.1802 li
311.348 55.4413 li
288.013 28.5993 li
241.342 55.3381 li
cp
.827451 .329412 0 rgb
f
241.342 55.3381 mo
218.007 55.4413 li
264.678 28.7025 li
288.013 28.5993 li
241.342 55.3381 li
cp
.756863 .219608 .164706 rgb
f
241.342 55.3381 mo
218.007 55.4414 li
219.899 57.3245 li
240.484 57.2339 li
262.786 82.8874 li
264.678 82.1802 li
241.342 55.3381 li
cp
.858824 .858824 .858824 rgb
f
294.477 95.8131 mo
302.709 91.0712 li
303.163 91.475 li
294.932 108.694 li
294.477 108.29 li
294.477 95.8131 li
cp
.937255 .952941 .952941 rgb
f
294.932 96.2169 mo
303.163 91.475 li
303.163 103.953 li
294.932 108.694 li
294.932 96.2169 li
cp
.741176 .764706 .780392 rgb
f
302.195 103.393 mo
302.195 93.1505 li
295.9 96.7768 li
295.9 107.019 li
302.195 103.393 li
cp
.337255 .392157 .447059 rgb
f
302.815 95.7736 mo
302.815 96.7598 li
295.386 101.04 li
295.386 100.053 li
302.815 95.7736 li
cp
.741176 .764706 .780392 rgb
f
302.815 99.3576 mo
302.815 100.344 li
295.386 104.624 li
295.386 103.638 li
302.815 99.3576 li
cp
f
298.624 94.6916 mo
299.556 94.1548 li
299.556 105.274 li
298.624 105.811 li
298.624 94.6916 li
cp
f
278.178 105.199 mo
286.409 100.457 li
286.863 100.861 li
278.632 118.08 li
278.178 117.676 li
278.178 105.199 li
cp
.937255 .952941 .952941 rgb
f
278.632 105.603 mo
286.863 100.861 li
286.863 113.338 li
278.632 118.08 li
278.632 105.603 li
cp
.741176 .764706 .780392 rgb
f
285.895 112.779 mo
285.895 102.536 li
279.6 106.163 li
279.601 116.405 li
285.895 112.779 li
cp
.337255 .392157 .447059 rgb
f
286.516 105.159 mo
286.516 106.146 li
279.086 110.426 li
279.086 109.439 li
286.516 105.159 li
cp
.741176 .764706 .780392 rgb
f
286.516 108.744 mo
286.516 109.73 li
279.086 114.01 li
279.086 113.023 li
286.516 108.744 li
cp
f
282.325 104.077 mo
283.256 103.541 li
283.256 114.66 li
282.325 115.196 li
282.325 104.077 li
cp
f
294.477 71.0908 mo
302.709 66.3488 li
303.163 66.7526 li
294.932 83.972 li
294.477 83.5682 li
294.477 71.0908 li
cp
.937255 .952941 .952941 rgb
f
294.932 71.4947 mo
303.163 66.7526 li
303.163 79.2301 li
294.932 83.972 li
294.932 71.4947 li
cp
.741176 .764706 .780392 rgb
f
302.195 78.6703 mo
302.195 68.4282 li
295.9 72.0546 li
295.9 82.2967 li
302.195 78.6703 li
cp
.337255 .392157 .447059 rgb
f
302.815 71.0512 mo
302.815 72.0374 li
295.386 76.3174 li
295.386 75.3311 li
302.815 71.0512 li
cp
.741176 .764706 .780392 rgb
f
302.815 74.6353 mo
302.815 75.6215 li
295.386 79.9015 li
295.386 78.9152 li
302.815 74.6353 li
cp
f
298.624 69.9693 mo
299.556 69.4325 li
299.556 80.5515 li
298.624 81.0883 li
298.624 69.9693 li
cp
f
278.178 80.4766 mo
286.409 75.7347 li
286.863 76.1385 li
278.632 93.3579 li
278.178 92.9541 li
278.178 80.4766 li
cp
.937255 .952941 .952941 rgb
f
278.632 80.8805 mo
286.863 76.1385 li
286.863 88.616 li
278.632 93.3579 li
278.632 80.8805 li
cp
.741176 .764706 .780392 rgb
f
285.895 88.0562 mo
285.895 77.8141 li
279.6 81.4405 li
279.601 91.6825 li
285.895 88.0562 li
cp
.337255 .392157 .447059 rgb
f
286.516 80.4371 mo
286.516 81.4233 li
279.086 85.7032 li
279.086 84.717 li
286.516 80.4371 li
cp
.741176 .764706 .780392 rgb
f
286.516 84.0212 mo
286.516 85.0074 li
279.086 89.2873 li
279.086 88.3011 li
286.516 84.0212 li
cp
f
282.325 79.3551 mo
283.256 78.8183 li
283.256 89.9374 li
282.325 90.4742 li
282.325 79.3551 li
cp
f
245.327 100.852 mo
237.096 96.1097 li
236.641 96.5135 li
244.873 124.469 li
245.327 124.066 li
245.327 100.852 li
cp
.937255 .952941 .952941 rgb
f
244.873 101.255 mo
236.641 96.5135 li
236.641 124.141 li
244.873 128.883 li
244.873 101.255 li
cp
.827451 .329412 0 rgb
f
237.61 124.681 mo
237.61 98.1891 li
243.904 101.815 li
243.904 128.307 li
237.61 124.681 li
cp
.756863 .219608 .164706 rgb
f
257.971 108.166 mo
249.74 103.424 li
249.286 103.828 li
257.517 121.047 li
257.971 120.643 li
257.971 108.166 li
cp
.937255 .952941 .952941 rgb
f
257.517 108.57 mo
249.286 103.828 li
249.286 116.305 li
257.517 121.047 li
257.517 108.57 li
cp
.741176 .764706 .780392 rgb
f
250.254 115.745 mo
250.254 105.503 li
256.549 109.129 li
256.549 119.372 li
250.254 115.745 li
cp
.337255 .392157 .447059 rgb
f
249.633 108.126 mo
249.633 109.112 li
257.063 113.392 li
257.063 112.406 li
249.633 108.126 li
cp
.741176 .764706 .780392 rgb
f
249.633 111.71 mo
249.633 112.696 li
257.063 116.976 li
257.063 115.99 li
249.633 111.71 li
cp
f
253.825 107.044 mo
252.893 106.507 li
252.893 117.626 li
253.825 118.163 li
253.825 107.044 li
cp
f
233.014 93.9819 mo
224.782 89.2399 li
224.328 89.6438 li
232.559 106.863 li
233.014 106.459 li
233.014 93.9819 li
cp
.937255 .952941 .952941 rgb
f
232.559 94.3857 mo
224.328 89.6438 li
224.328 102.121 li
232.559 106.863 li
232.559 94.3857 li
cp
.741176 .764706 .780392 rgb
f
225.296 101.561 mo
225.296 91.3193 li
231.591 94.9457 li
231.591 105.188 li
225.296 101.561 li
cp
.337255 .392157 .447059 rgb
f
224.676 93.9424 mo
224.676 94.9286 li
232.105 99.2085 li
232.105 98.2223 li
224.676 93.9424 li
cp
.741176 .764706 .780392 rgb
f
224.676 97.5265 mo
224.676 98.5127 li
232.105 102.793 li
232.105 101.806 li
224.676 97.5265 li
cp
f
228.867 92.8603 mo
227.935 92.3236 li
227.935 103.443 li
228.867 103.979 li
228.867 92.8603 li
cp
f
242.045 73.3537 mo
233.814 68.6118 li
233.36 69.0156 li
241.591 86.2349 li
242.045 85.8311 li
242.045 73.3537 li
cp
.937255 .952941 .952941 rgb
f
241.591 73.7576 mo
233.36 69.0156 li
233.36 81.493 li
241.591 86.2349 li
241.591 73.7576 li
cp
.741176 .764706 .780392 rgb
f
234.328 80.9333 mo
234.328 70.6911 li
240.623 74.3175 li
240.622 84.5596 li
234.328 80.9333 li
cp
.337255 .392157 .447059 rgb
f
233.707 73.3141 mo
233.707 74.3004 li
241.137 78.5803 li
241.137 77.594 li
233.707 73.3141 li
cp
.741176 .764706 .780392 rgb
f
233.707 76.8982 mo
233.707 77.8844 li
241.137 82.1644 li
241.137 81.1781 li
233.707 76.8982 li
cp
f
237.898 72.2322 mo
236.967 71.6954 li
236.967 82.8144 li
237.898 83.3512 li
237.898 72.2322 li
cp
f
249.268 77.4858 mo
241.037 72.7438 li
240.582 73.1476 li
248.814 90.3669 li
249.268 89.9631 li
249.268 77.4858 li
cp
.937255 .952941 .952941 rgb
f
248.814 77.8896 mo
240.582 73.1476 li
240.582 85.6252 li
248.814 90.3669 li
248.814 77.8896 li
cp
.741176 .764706 .780392 rgb
f
241.551 85.0653 mo
241.551 74.8231 li
247.846 78.4495 li
247.845 88.6917 li
241.551 85.0653 li
cp
.337255 .392157 .447059 rgb
f
240.93 77.4462 mo
240.93 78.4324 li
248.36 82.7123 li
248.36 81.7262 li
240.93 77.4462 li
cp
.741176 .764706 .780392 rgb
f
240.93 81.0303 mo
240.93 82.0165 li
248.36 86.2965 li
248.36 85.3102 li
240.93 81.0303 li
cp
f
245.121 76.3642 mo
244.19 75.8274 li
244.19 86.9465 li
245.121 87.4832 li
245.121 76.3642 li
cp
f
226.911 97.1516 mo
226.911 95.565 li
248.479 95.941 li
248.479 100.001 li
241.452 105.433 li
226.911 97.1516 li
cp
.858824 .858824 .858824 rgb
f
226.911 95.565 mo
233.938 87.66 li
248.479 95.941 li
241.452 103.846 li
226.911 95.565 li
cp
.827451 .329412 0 rgb
f
294.565 114.35 mo
295.383 114.35 296.046 114.682 296.046 115.093 cv
296.046 115.408 296.046 137.377 296.046 137.692 cv
296.046 137.801 295.999 137.905 295.915 137.998 cv
295.915 137.943 li
295.793 138.078 295.594 138.192 295.346 138.269 cv
295.346 138.324 li
295.119 138.394 294.851 138.435 294.565 138.435 cv
293.746 138.435 293.083 138.103 293.083 137.692 cv
293.083 137.377 293.083 115.408 293.083 115.093 cv
293.083 114.682 293.746 114.35 294.565 114.35 cv
cp
f
294.729 91.788 mo
298.314 91.788 304.307 119.583 304.307 123.418 cv
304.307 126.071 301.955 131.412 294.729 131.412 cv
287.879 131.412 285.151 126.071 285.151 123.418 cv
285.151 119.583 292.081 91.788 294.729 91.788 cv
cp
.262745 .462745 .109804 rgb
f
294.385 123.738 mo
293.567 116.257 294.736 91.88 294.736 91.88 cv
298.321 91.9006 304.401 119.586 304.307 123.418 cv
304.207 127.516 294.914 128.574 294.385 123.738 cv
cp
.482353 .647059 .145098 rgb
f
299.714 122.795 mo
301.509 122.739 303.201 121.831 303.195 120.924 cv
303.174 117.858 298.984 97.4434 296.18 93.0838 cv
294.577 91.2272 296.203 116.376 296.896 121.288 cv
297.103 122.762 299.105 122.814 299.714 122.795 cv
299.714 122.795 li
cp
.607843 .745098 .137255 rgb
f
294.007 128.196 mo
300.198 128.956 303.128 127.201 303.128 127.201 cv
301.789 129.38 299.186 131.412 294.729 131.412 cv
288.247 131.412 285.46 126.634 285.179 123.872 cv
285.87 125.4 289.701 127.667 294.007 128.196 cv
cp
.223529 .411765 .0627451 rgb
f
296.521 101.912 mo
297.343 105.872 298.57 108.966 299.261 108.823 cv
299.953 108.679 299.847 105.352 299.025 101.392 cv
298.203 97.4324 296.976 94.3385 296.285 94.4821 cv
295.593 94.6256 295.699 97.9523 296.521 101.912 cv
cp
.764706 .870588 .34902 rgb
f
276.673 125.386 mo
277.491 125.386 278.155 125.719 278.155 126.129 cv
278.155 126.445 278.155 148.413 278.155 148.729 cv
278.155 148.838 278.108 148.941 278.024 149.034 cv
278.024 148.98 li
277.902 149.115 277.703 149.228 277.454 149.306 cv
277.454 149.36 li
277.228 149.431 276.96 149.472 276.673 149.472 cv
275.855 149.472 275.192 149.139 275.192 148.729 cv
275.192 148.413 275.192 126.445 275.192 126.129 cv
275.192 125.719 275.855 125.386 276.673 125.386 cv
cp
.827451 .329412 0 rgb
f
276.838 112.894 mo
280.423 112.894 286.416 130.619 286.416 134.454 cv
286.416 137.108 284.064 142.448 276.838 142.448 cv
269.988 142.448 267.26 137.108 267.26 134.454 cv
267.26 130.619 274.189 112.894 276.838 112.894 cv
cp
.262745 .462745 .109804 rgb
f
276.494 134.775 mo
275.676 127.293 276.844 112.895 276.844 112.895 cv
280.43 112.916 286.51 130.623 286.416 134.454 cv
286.316 138.553 277.023 139.61 276.494 134.775 cv
cp
.482353 .647059 .145098 rgb
f
281.823 133.832 mo
283.618 133.776 285.31 132.867 285.304 131.961 cv
285.282 128.895 281.355 118.853 278.551 114.493 cv
276.947 112.637 278.311 127.412 279.005 132.325 cv
279.212 133.799 281.214 133.851 281.823 133.832 cv
281.823 133.832 li
cp
.607843 .745098 .137255 rgb
f
276.116 139.233 mo
282.306 139.993 285.237 138.237 285.237 138.237 cv
283.897 140.417 281.295 142.448 276.838 142.448 cv
270.356 142.448 267.569 137.67 267.288 134.908 cv
267.979 136.437 271.809 138.704 276.116 139.233 cv
cp
.223529 .411765 .0627451 rgb
f
279.332 120.713 mo
280.199 123.24 281.301 125.153 281.793 124.984 cv
282.285 124.815 281.98 122.629 281.113 120.102 cv
280.246 117.574 279.144 115.662 278.652 115.831 cv
278.16 116 278.465 118.185 279.332 120.713 cv
cp
.764706 .870588 .34902 rgb
f
319.632 94.8723 mo
320.555 94.8723 321.303 95.2474 321.303 95.7103 cv
321.303 96.0661 321.303 120.843 321.303 121.199 cv
321.303 121.322 321.25 121.438 321.155 121.544 cv
321.155 121.482 li
321.018 121.635 320.794 121.763 320.513 121.85 cv
320.513 121.911 li
320.257 121.991 319.956 122.037 319.632 122.037 cv
318.71 122.037 317.962 121.662 317.962 121.199 cv
317.962 120.843 317.962 96.0661 317.962 95.7103 cv
317.962 95.2474 318.71 94.8723 319.632 94.8723 cv
cp
.827451 .329412 0 rgb
f
319.644 84.5308 mo
325.441 84.5308 327.75 89.0502 327.75 91.2959 cv
327.75 99.8233 li
327.75 99.8233 li
327.75 102.778 li
327.75 105.023 325.759 109.543 319.644 109.543 cv
313.846 109.543 311.537 105.023 311.537 102.778 cv
311.537 101.414 li
311.537 99.8233 li
311.537 91.2959 li
311.537 89.0502 313.528 84.5308 319.644 84.5308 cv
cp
.262745 .462745 .109804 rgb
f
312.875 88.8901 mo
313.055 91.0492 316.051 92.6002 319.567 92.3544 cv
323.082 92.1085 325.786 90.1589 325.605 87.9999 cv
325.425 85.8408 322.428 84.2898 318.913 84.5356 cv
315.398 84.7815 312.694 86.731 312.875 88.8901 cv
cp
.482353 .647059 .145098 rgb
f
314.419 87.1238 mo
314.595 88.0358 316.366 88.457 318.373 88.0648 cv
320.381 87.6725 321.865 86.6153 321.688 85.7035 cv
321.512 84.7916 319.741 84.3703 317.733 84.7625 cv
315.726 85.1548 314.242 86.212 314.419 87.1238 cv
cp
.607843 .745098 .137255 rgb
f
316.158 85.9315 mo
316.225 86.2772 316.896 86.4367 317.657 86.2881 cv
318.417 86.1394 318.98 85.7388 318.913 85.3931 cv
318.846 85.0475 318.175 84.8879 317.414 85.0365 cv
316.653 85.1852 316.091 85.5859 316.158 85.9315 cv
cp
.764706 .870588 .34902 rgb
f
319.644 106.283 mo
324.935 106.283 327.179 104.488 327.728 103.196 cv
327.501 105.539 325.401 109.543 319.644 109.543 cv
314.158 109.543 311.799 105.499 311.561 103.161 cv
312.146 104.455 314.582 106.283 319.644 106.283 cv
cp
.223529 .411765 .0627451 rgb
f
315.636 105.435 mo
315.827 105.435 316.013 105.413 316.195 105.381 cv
316.195 110.577 li
316.195 110.85 316.417 111.072 316.691 111.072 cv
318.797 111.072 li
319.058 111.072 319.266 110.868 319.286 110.613 cv
319.883 110.918 320.548 111.082 321.221 111.092 cv
320.984 112.213 319.989 113.055 318.797 113.055 cv
316.691 113.055 li
315.322 113.055 314.212 111.945 314.212 110.577 cv
314.212 105.259 li
314.668 105.374 315.147 105.435 315.636 105.435 cv
cp
.827451 .329412 0 rgb
f
315.051 97.2135 mo
318.444 97.2135 319.796 99.8586 319.796 101.173 cv
319.796 106.164 li
319.796 106.164 li
319.796 107.893 li
319.796 109.207 318.631 111.852 315.051 111.852 cv
311.658 111.852 310.307 109.207 310.307 107.893 cv
310.307 107.095 li
310.307 106.164 li
310.307 101.173 li
310.307 99.8586 311.472 97.2135 315.051 97.2135 cv
cp
.380392 .568627 .239216 rgb
f
311.09 99.7648 mo
311.195 101.029 312.949 101.936 315.006 101.792 cv
317.064 101.648 318.646 100.507 318.54 99.2438 cv
318.435 97.9802 316.681 97.0724 314.624 97.2163 cv
312.566 97.3602 310.984 98.5012 311.09 99.7648 cv
cp
.607843 .752941 .305882 rgb
f
311.993 98.7311 mo
312.097 99.2648 313.133 99.5114 314.308 99.2818 cv
315.483 99.0522 316.351 98.4335 316.248 97.8998 cv
316.145 97.3661 315.108 97.1196 313.933 97.3491 cv
312.758 97.5786 311.89 98.1974 311.993 98.7311 cv
cp
.729412 .85098 .313726 rgb
f
313.011 98.0333 mo
313.05 98.2355 313.443 98.329 313.888 98.2419 cv
314.334 98.155 314.663 97.9204 314.624 97.7181 cv
314.584 97.5159 314.192 97.4225 313.746 97.5095 cv
313.301 97.5965 312.972 97.831 313.011 98.0333 cv
cp
.894118 .976471 .568627 rgb
f
315.051 109.944 mo
318.148 109.944 319.461 108.894 319.783 108.138 cv
319.65 109.509 318.421 111.852 315.051 111.852 cv
311.841 111.852 310.46 109.486 310.321 108.117 cv
310.663 108.875 312.089 109.944 315.051 109.944 cv
cp
.333333 .517647 .172549 rgb
f
244.863 135.927 mo
242.127 135.927 240.008 134.544 240.008 133.576 cv
240.008 132.255 240.008 130.448 240.008 130.448 cv
240.008 129.103 241.2 126.396 244.863 126.396 cv
248.336 126.396 249.719 129.103 249.719 130.448 cv
249.719 130.448 249.719 132.638 249.719 133.615 cv
249.719 134.559 247.699 135.927 244.863 135.927 cv
cp
.380392 .568627 .239216 rgb
f
240.809 129.007 mo
240.917 130.301 242.712 131.23 244.817 131.082 cv
246.923 130.935 248.542 129.767 248.434 128.474 cv
248.326 127.181 246.531 126.252 244.426 126.399 cv
242.32 126.546 240.701 127.714 240.809 129.007 cv
cp
.607843 .752941 .305882 rgb
f
241.733 127.949 mo
241.839 128.496 242.9 128.748 244.102 128.513 cv
245.305 128.278 246.194 127.645 246.088 127.099 cv
245.982 126.552 244.921 126.3 243.719 126.535 cv
242.517 126.77 241.628 127.403 241.733 127.949 cv
cp
.729412 .85098 .313726 rgb
f
242.775 127.235 mo
242.815 127.442 243.217 127.538 243.673 127.449 cv
244.129 127.36 244.466 127.12 244.425 126.913 cv
244.385 126.706 243.983 126.61 243.528 126.699 cv
243.072 126.788 242.735 127.028 242.775 127.235 cv
cp
.894118 .976471 .568627 rgb
f
253.299 141.496 mo
249.668 141.496 246.855 139.661 246.855 138.376 cv
246.855 136.623 246.855 134.225 246.855 134.225 cv
246.855 132.44 248.437 128.847 253.299 128.847 cv
257.908 128.847 259.743 132.44 259.743 134.225 cv
259.743 134.225 259.743 137.131 259.743 138.428 cv
259.743 139.68 257.063 141.496 253.299 141.496 cv
cp
.262745 .462745 .109804 rgb
f
247.918 132.312 mo
248.061 134.029 250.443 135.262 253.238 135.066 cv
256.032 134.871 258.181 133.321 258.038 131.605 cv
257.894 129.888 255.513 128.655 252.718 128.851 cv
249.924 129.046 247.775 130.596 247.918 132.312 cv
cp
.482353 .647059 .145098 rgb
f
249.145 130.908 mo
249.286 131.633 250.693 131.968 252.289 131.656 cv
253.885 131.344 255.065 130.504 254.924 129.779 cv
254.784 129.054 253.376 128.719 251.78 129.031 cv
250.185 129.343 249.005 130.183 249.145 130.908 cv
cp
.607843 .745098 .137255 rgb
f
250.528 129.96 mo
250.581 130.235 251.114 130.362 251.719 130.244 cv
252.324 130.126 252.771 129.807 252.718 129.532 cv
252.665 129.258 252.131 129.131 251.526 129.249 cv
250.922 129.367 250.475 129.686 250.528 129.96 cv
cp
.764706 .870588 .34902 rgb
f
260.709 143.972 mo
258.254 143.972 256.353 142.731 256.353 141.862 cv
256.353 140.677 256.353 139.056 256.353 139.056 cv
256.353 137.85 257.423 135.421 260.709 135.421 cv
263.824 135.421 265.064 137.85 265.064 139.056 cv
265.064 139.056 265.064 141.021 265.064 141.897 cv
265.064 142.744 263.253 143.972 260.709 143.972 cv
cp
.380392 .568627 .239216 rgb
f
257.072 137.764 mo
257.169 138.924 258.778 139.757 260.667 139.625 cv
262.556 139.493 264.009 138.445 263.912 137.285 cv
263.815 136.125 262.205 135.292 260.316 135.424 cv
258.427 135.556 256.975 136.604 257.072 137.764 cv
cp
.607843 .752941 .305882 rgb
f
257.901 136.815 mo
257.996 137.305 258.947 137.531 260.026 137.32 cv
261.105 137.109 261.902 136.541 261.807 136.051 cv
261.712 135.562 260.761 135.335 259.682 135.546 cv
258.604 135.757 257.806 136.325 257.901 136.815 cv
cp
.729412 .85098 .313726 rgb
f
258.836 136.174 mo
258.872 136.36 259.232 136.446 259.641 136.366 cv
260.05 136.286 260.352 136.07 260.316 135.885 cv
260.28 135.699 259.919 135.613 259.511 135.693 cv
259.102 135.773 258.8 135.988 258.836 136.174 cv
cp
.894118 .976471 .568627 rgb
f
215.849 119.38 mo
213.113 119.38 210.994 117.997 210.994 117.029 cv
210.994 115.708 210.994 113.901 210.994 113.901 cv
210.994 112.556 212.186 109.849 215.849 109.849 cv
219.322 109.849 220.705 112.556 220.705 113.901 cv
220.705 113.901 220.705 116.091 220.705 117.068 cv
220.705 118.012 218.686 119.38 215.849 119.38 cv
cp
.380392 .568627 .239216 rgb
f
211.795 112.46 mo
211.903 113.754 213.698 114.683 215.803 114.535 cv
217.909 114.388 219.528 113.22 219.42 111.927 cv
219.312 110.634 217.517 109.705 215.412 109.852 cv
213.306 109.999 211.687 111.167 211.795 112.46 cv
cp
.607843 .752941 .305882 rgb
f
212.72 111.402 mo
212.826 111.949 213.886 112.201 215.088 111.966 cv
216.291 111.731 217.18 111.098 217.074 110.552 cv
216.968 110.005 215.908 109.753 214.705 109.988 cv
213.503 110.223 212.614 110.856 212.72 111.402 cv
cp
.729412 .85098 .313726 rgb
f
213.761 110.688 mo
213.801 110.895 214.203 110.991 214.659 110.902 cv
215.115 110.813 215.452 110.573 215.412 110.366 cv
215.372 110.159 214.97 110.063 214.514 110.152 cv
214.058 110.241 213.721 110.481 213.761 110.688 cv
cp
.894118 .976471 .568627 rgb
f
224.285 124.949 mo
220.654 124.949 217.841 123.114 217.841 121.829 cv
217.841 120.076 217.841 117.678 217.841 117.678 cv
217.841 115.893 219.424 112.3 224.285 112.3 cv
228.894 112.3 230.729 115.893 230.729 117.678 cv
230.729 117.678 230.729 120.584 230.729 121.881 cv
230.729 123.133 228.049 124.949 224.285 124.949 cv
cp
.262745 .462745 .109804 rgb
f
218.904 115.765 mo
219.048 117.482 221.429 118.715 224.224 118.519 cv
227.018 118.324 229.167 116.774 229.024 115.058 cv
228.88 113.341 226.499 112.108 223.704 112.304 cv
220.91 112.499 218.761 114.049 218.904 115.765 cv
cp
.482353 .647059 .145098 rgb
f
220.131 114.361 mo
220.272 115.086 221.679 115.421 223.275 115.109 cv
224.871 114.797 226.051 113.957 225.91 113.232 cv
225.77 112.507 224.362 112.172 222.766 112.484 cv
221.171 112.796 219.991 113.636 220.131 114.361 cv
cp
.607843 .745098 .137255 rgb
f
221.514 113.413 mo
221.567 113.688 222.101 113.815 222.705 113.697 cv
223.31 113.579 223.757 113.26 223.704 112.985 cv
223.651 112.711 223.117 112.584 222.513 112.702 cv
221.908 112.82 221.461 113.139 221.514 113.413 cv
cp
.764706 .870588 .34902 rgb
f
231.695 127.425 mo
229.241 127.425 227.339 126.184 227.339 125.315 cv
227.339 124.13 227.339 122.509 227.339 122.509 cv
227.339 121.303 228.409 118.874 231.695 118.874 cv
234.81 118.874 236.05 121.303 236.05 122.509 cv
236.05 122.509 236.05 124.474 236.05 125.35 cv
236.05 126.197 234.239 127.425 231.695 127.425 cv
cp
.380392 .568627 .239216 rgb
f
228.058 121.217 mo
228.155 122.377 229.765 123.21 231.653 123.078 cv
233.542 122.946 234.995 121.899 234.898 120.738 cv
234.801 119.578 233.191 118.745 231.302 118.877 cv
229.413 119.009 227.961 120.057 228.058 121.217 cv
cp
.607843 .752941 .305882 rgb
f
228.887 120.268 mo
228.982 120.758 229.934 120.984 231.012 120.773 cv
232.091 120.563 232.888 119.994 232.793 119.504 cv
232.698 119.015 231.747 118.788 230.668 118.999 cv
229.59 119.21 228.792 119.778 228.887 120.268 cv
cp
.729412 .85098 .313726 rgb
f
229.822 119.627 mo
229.858 119.813 230.218 119.899 230.627 119.819 cv
231.036 119.739 231.338 119.523 231.302 119.338 cv
231.266 119.152 230.906 119.066 230.497 119.146 cv
230.088 119.226 229.786 119.441 229.822 119.627 cv
cp
.894118 .976471 .568627 rgb
f
207.73 95.9197 mo
208.548 95.9197 209.211 96.2524 209.211 96.6628 cv
209.211 96.9783 209.211 118.947 209.211 119.262 cv
209.211 119.371 209.164 119.474 209.08 119.568 cv
209.08 119.513 li
208.959 119.648 208.76 119.762 208.511 119.839 cv
208.511 119.893 li
208.284 119.964 208.017 120.005 207.73 120.005 cv
206.912 120.005 206.249 119.673 206.249 119.262 cv
206.249 118.947 206.249 96.9783 206.249 96.6628 cv
206.249 96.2524 206.912 95.9197 207.73 95.9197 cv
cp
.827451 .329412 0 rgb
f
207.895 83.4277 mo
211.48 83.4277 217.473 101.153 217.473 104.988 cv
217.473 107.641 215.121 112.981 207.895 112.981 cv
201.044 112.981 198.316 107.641 198.316 104.988 cv
198.316 101.153 205.246 83.4277 207.895 83.4277 cv
cp
.262745 .462745 .109804 rgb
f
207.551 105.308 mo
206.732 97.8267 207.901 83.4286 207.901 83.4286 cv
211.487 83.4492 217.566 101.156 217.473 104.988 cv
217.373 109.086 208.08 110.144 207.551 105.308 cv
cp
.482353 .647059 .145098 rgb
f
212.88 104.365 mo
214.674 104.309 216.366 103.4 216.36 102.494 cv
216.339 99.4282 212.411 89.3863 209.607 85.0267 cv
208.004 83.17 209.368 97.9456 210.062 102.858 cv
210.269 104.332 212.271 104.384 212.88 104.365 cv
212.88 104.365 li
cp
.607843 .745098 .137255 rgb
f
207.173 109.766 mo
213.363 110.526 216.294 108.771 216.294 108.771 cv
214.954 110.95 212.352 112.981 207.895 112.981 cv
201.413 112.981 198.626 108.204 198.344 105.441 cv
199.035 106.97 202.866 109.237 207.173 109.766 cv
cp
.223529 .411765 .0627451 rgb
f
210.389 91.2463 mo
211.256 93.7739 212.358 95.6861 212.85 95.5173 cv
213.342 95.3484 213.037 93.1626 212.17 90.635 cv
211.302 88.1075 210.201 86.1953 209.709 86.3641 cv
209.217 86.5329 209.521 88.7188 210.389 91.2463 cv
cp
.764706 .870588 .34902 rgb
f
463.548 84.6114 mo
440.213 111.454 li
393.542 84.7146 li
416.877 57.8725 li
463.548 84.6114 li
cp
.858824 .858824 .858824 rgb
f
420.419 159.72 mo
494.303 117.291 li
494.303 115.477 li
357.595 121.916 li
357.595 123.729 li
420.419 159.72 li
cp
.0901961 .4 .215686 rgb
f
420.419 157.907 mo
494.303 115.477 li
431.48 79.4856 li
357.595 121.916 li
420.419 157.907 li
cp
.152941 .682353 .376471 rgb
f
478.484 109.111 mo
431.914 83.1056 li
385.79 109.193 li
432.36 135.67 li
478.484 109.111 li
cp
.937255 .952941 .952941 rgb
f
432.36 139.936 mo
385.79 113.459 li
385.79 109.193 li
432.36 135.67 li
432.36 139.936 li
cp
.666667 .717647 .717647 rgb
f
432.36 139.936 mo
478.484 113.377 li
478.484 109.111 li
432.36 135.67 li
432.36 139.936 li
cp
.741176 .764706 .780392 rgb
f
463.47 86.2737 mo
463.47 100.65 li
441.417 113.284 li
441.417 82.1538 li
463.47 86.2737 li
cp
.756863 .219608 .164706 rgb
f
449.422 81.9305 mo
463.772 84.6113 li
463.772 86.6987 li
449.422 84.0177 li
449.422 81.9305 li
cp
.337255 .392157 .447059 rgb
f
452.36 90.8688 mo
458.916 87.0918 li
459.278 87.4134 li
452.722 106.851 li
452.36 106.529 li
452.36 90.8688 li
cp
.937255 .952941 .952941 rgb
f
452.722 91.1905 mo
459.278 87.4134 li
459.278 103.074 li
452.722 106.851 li
452.722 91.1905 li
cp
.741176 .764706 .780392 rgb
f
458.507 103.512 mo
458.507 88.7481 li
453.493 91.6365 li
453.493 106.401 li
458.507 103.512 li
cp
.337255 .392157 .447059 rgb
f
454.252 78.3969 mo
454.252 122.26 li
432.199 134.894 li
432.199 103.763 li
454.252 78.3969 li
cp
.827451 .329412 0 rgb
f
432.199 134.894 mo
432.199 103.763 li
387.463 78.1324 li
387.463 109.263 li
432.199 134.894 li
cp
.756863 .219608 .164706 rgb
f
455.535 78.0167 mo
432.199 104.859 li
385.529 78.1199 li
408.864 51.2778 li
455.535 78.0167 li
cp
.858824 .858824 .858824 rgb
f
455.535 78.0167 mo
455.535 80.9005 li
434.091 105.566 li
432.199 104.859 li
455.535 78.0167 li
cp
.337255 .392157 .447059 rgb
f
402.4 95.5801 mo
394.168 90.8381 li
393.714 91.2419 li
401.945 108.461 li
402.4 108.057 li
402.4 95.5801 li
cp
.937255 .952941 .952941 rgb
f
401.945 95.984 mo
393.714 91.2419 li
393.714 103.719 li
401.945 108.461 li
401.945 95.984 li
cp
.741176 .764706 .780392 rgb
f
394.683 103.16 mo
394.683 92.9175 li
400.977 96.5438 li
400.977 106.786 li
394.683 103.16 li
cp
.337255 .392157 .447059 rgb
f
394.062 95.5405 mo
394.062 96.5267 li
401.491 100.807 li
401.491 99.8204 li
394.062 95.5405 li
cp
.741176 .764706 .780392 rgb
f
394.062 99.1246 mo
394.062 100.111 li
401.491 104.391 li
401.491 103.405 li
394.062 99.1246 li
cp
f
398.253 94.4586 mo
397.321 93.9218 li
397.321 105.041 li
398.253 105.578 li
398.253 94.4586 li
cp
f
418.699 104.966 mo
410.468 100.224 li
410.014 100.628 li
418.245 117.847 li
418.699 117.443 li
418.699 104.966 li
cp
.937255 .952941 .952941 rgb
f
418.245 105.37 mo
410.014 100.628 li
410.014 113.105 li
418.245 117.847 li
418.245 105.37 li
cp
.741176 .764706 .780392 rgb
f
410.982 112.545 mo
410.982 102.303 li
417.277 105.93 li
417.277 116.172 li
410.982 112.545 li
cp
.337255 .392157 .447059 rgb
f
410.362 104.926 mo
410.362 105.913 li
417.791 110.193 li
417.791 109.206 li
410.362 104.926 li
cp
.741176 .764706 .780392 rgb
f
410.362 108.511 mo
410.362 109.497 li
417.791 113.777 li
417.791 112.79 li
410.362 108.511 li
cp
f
414.552 103.844 mo
413.621 103.308 li
413.621 114.427 li
414.552 114.963 li
414.552 103.844 li
cp
f
439.376 108.224 mo
447.608 103.482 li
448.062 103.886 li
439.831 121.105 li
439.377 120.701 li
439.376 108.224 li
cp
.937255 .952941 .952941 rgb
f
439.831 108.628 mo
448.062 103.886 li
448.062 116.363 li
439.831 121.105 li
439.831 108.628 li
cp
.741176 .764706 .780392 rgb
f
447.094 115.803 mo
447.094 105.561 li
440.799 109.187 li
440.799 119.43 li
447.094 115.803 li
cp
.337255 .392157 .447059 rgb
f
447.714 108.184 mo
447.714 109.17 li
440.285 113.45 li
440.285 112.464 li
447.714 108.184 li
cp
.741176 .764706 .780392 rgb
f
447.714 111.768 mo
447.714 112.754 li
440.285 117.034 li
440.285 116.048 li
447.714 111.768 li
cp
f
443.523 107.102 mo
444.455 106.565 li
444.455 117.684 li
443.523 118.221 li
443.523 107.102 li
cp
f
445.674 93.7999 mo
451.156 90.6141 li
451.61 91.0181 li
446.129 100.034 li
445.675 99.6303 li
445.674 93.7999 li
cp
.937255 .952941 .952941 rgb
f
446.129 94.2037 mo
451.61 91.0181 li
451.61 96.8486 li
446.129 100.034 li
446.129 94.2037 li
cp
.741176 .764706 .780392 rgb
f
450.642 96.2887 mo
450.642 92.6935 li
447.097 94.7637 li
447.097 98.3588 li
450.642 96.2887 li
cp
.337255 .392157 .447059 rgb
f
482.198 113.918 mo
477.935 111.721 li
456.498 123.846 li
460.761 126.262 li
482.198 113.918 li
cp
.937255 .952941 .952941 rgb
f
460.761 128.245 mo
456.498 125.829 li
456.498 123.846 li
460.761 126.262 li
460.761 128.245 li
cp
.666667 .717647 .717647 rgb
f
460.761 128.245 mo
482.198 115.901 li
482.198 113.918 li
460.761 126.262 li
460.761 128.245 li
cp
.741176 .764706 .780392 rgb
f
487.215 92.2856 mo
488.033 92.2856 488.696 92.6183 488.696 93.0286 cv
488.696 93.3442 488.696 115.313 488.696 115.628 cv
488.696 115.737 488.649 115.84 488.565 115.933 cv
488.565 115.879 li
488.444 116.014 488.244 116.128 487.996 116.205 cv
487.996 116.259 li
487.769 116.33 487.501 116.371 487.215 116.371 cv
486.397 116.371 485.734 116.038 485.734 115.628 cv
485.734 115.313 485.734 93.3442 485.734 93.0286 cv
485.734 92.6183 486.397 92.2856 487.215 92.2856 cv
cp
.827451 .329412 0 rgb
f
487.379 79.7936 mo
490.964 79.7936 496.958 97.5185 496.958 101.354 cv
496.958 104.007 494.605 109.347 487.379 109.347 cv
480.529 109.347 477.801 104.007 477.801 101.354 cv
477.801 97.5185 484.731 79.7936 487.379 79.7936 cv
cp
.262745 .462745 .109804 rgb
f
487.035 101.674 mo
486.217 94.1925 487.386 79.7946 487.386 79.7946 cv
490.971 79.8152 497.051 97.5219 496.958 101.354 cv
496.858 105.452 487.564 106.51 487.035 101.674 cv
cp
.482353 .647059 .145098 rgb
f
492.364 100.731 mo
494.159 100.675 495.851 99.7663 495.845 98.8602 cv
495.824 95.794 491.896 85.7521 489.092 81.3926 cv
487.489 79.5359 488.853 94.3115 489.546 99.2242 cv
489.754 100.698 491.756 100.75 492.364 100.731 cv
492.364 100.731 li
cp
.607843 .745098 .137255 rgb
f
486.658 106.132 mo
492.848 106.892 495.779 105.137 495.779 105.137 cv
494.439 107.316 491.837 109.347 487.379 109.347 cv
480.897 109.347 478.111 104.57 477.829 101.807 cv
478.52 103.336 482.351 105.603 486.658 106.132 cv
cp
.223529 .411765 .0627451 rgb
f
489.873 87.6122 mo
490.741 90.1398 491.843 92.0519 492.335 91.8831 cv
492.826 91.7144 492.522 89.5286 491.655 87.0009 cv
490.787 84.4733 489.685 82.5612 489.193 82.7301 cv
488.702 82.8988 489.006 85.0846 489.873 87.6122 cv
cp
.764706 .870588 .34902 rgb
f
367.835 99.2369 mo
368.653 99.2369 369.316 99.5695 369.316 99.9799 cv
369.316 100.295 369.316 122.264 369.316 122.579 cv
369.316 122.688 369.269 122.792 369.185 122.885 cv
369.185 122.831 li
369.064 122.965 368.864 123.079 368.616 123.156 cv
368.616 123.211 li
368.389 123.281 368.122 123.322 367.835 123.322 cv
367.017 123.322 366.354 122.99 366.354 122.579 cv
366.354 122.264 366.354 100.295 366.354 99.9799 cv
366.354 99.5695 367.017 99.2369 367.835 99.2369 cv
cp
.827451 .329412 0 rgb
f
367.999 86.7449 mo
371.584 86.7449 377.578 104.47 377.578 108.305 cv
377.578 110.958 375.225 116.299 367.999 116.299 cv
361.149 116.299 358.421 110.958 358.421 108.305 cv
358.421 104.47 365.351 86.7449 367.999 86.7449 cv
cp
.262745 .462745 .109804 rgb
f
367.655 108.625 mo
366.837 101.144 368.006 86.7458 368.006 86.7458 cv
371.591 86.7663 377.671 104.473 377.578 108.305 cv
377.478 112.403 368.184 113.461 367.655 108.625 cv
cp
.482353 .647059 .145098 rgb
f
372.984 107.682 mo
374.779 107.626 376.471 106.718 376.465 105.812 cv
376.444 102.745 372.516 92.7034 369.712 88.3438 cv
368.109 86.4872 369.473 101.263 370.166 106.175 cv
370.374 107.649 372.376 107.701 372.984 107.682 cv
372.984 107.682 li
cp
.607843 .745098 .137255 rgb
f
367.278 113.083 mo
373.468 113.843 376.399 112.088 376.399 112.088 cv
375.059 114.267 372.457 116.299 367.999 116.299 cv
361.517 116.299 358.731 111.521 358.449 108.759 cv
359.14 110.287 362.971 112.554 367.278 113.083 cv
cp
.223529 .411765 .0627451 rgb
f
370.493 94.5635 mo
371.361 97.091 372.463 99.0032 372.955 98.8344 cv
373.447 98.6656 373.142 96.4797 372.275 93.9522 cv
371.407 91.4246 370.305 89.5124 369.813 89.6812 cv
369.322 89.8501 369.626 92.0359 370.493 94.5635 cv
cp
.764706 .870588 .34902 rgb
f
434.326 124.403 mo
435.145 124.403 435.808 124.736 435.808 125.146 cv
435.808 125.462 435.808 147.43 435.808 147.746 cv
435.808 147.855 435.761 147.958 435.677 148.051 cv
435.677 147.997 li
435.555 148.132 435.356 148.245 435.108 148.323 cv
435.108 148.377 li
434.881 148.448 434.613 148.489 434.326 148.489 cv
433.508 148.489 432.845 148.156 432.845 147.746 cv
432.845 147.43 432.845 125.462 432.845 125.146 cv
432.845 124.736 433.508 124.403 434.326 124.403 cv
cp
.827451 .329412 0 rgb
f
434.491 101.841 mo
438.076 101.841 444.069 129.636 444.069 133.471 cv
444.069 136.125 441.717 141.465 434.491 141.465 cv
427.641 141.465 424.913 136.125 424.913 133.471 cv
424.913 129.636 431.842 101.841 434.491 101.841 cv
cp
.262745 .462745 .109804 rgb
f
434.147 133.792 mo
433.329 126.31 434.498 101.933 434.498 101.933 cv
438.083 101.954 444.163 129.639 444.069 133.471 cv
443.969 137.57 434.676 138.627 434.147 133.792 cv
cp
.482353 .647059 .145098 rgb
f
439.476 132.848 mo
441.271 132.792 442.963 131.884 442.957 130.978 cv
442.935 127.912 438.746 107.497 435.942 103.137 cv
434.339 101.281 435.964 126.429 436.658 131.342 cv
436.865 132.816 438.867 132.867 439.476 132.848 cv
439.476 132.848 li
cp
.607843 .745098 .137255 rgb
f
433.769 138.25 mo
439.96 139.01 442.89 137.254 442.89 137.254 cv
441.551 139.434 438.948 141.465 434.491 141.465 cv
428.009 141.465 425.222 136.687 424.941 133.925 cv
425.632 135.454 429.462 137.721 433.769 138.25 cv
cp
.223529 .411765 .0627451 rgb
f
436.283 111.966 mo
437.104 115.926 438.332 119.019 439.023 118.876 cv
439.715 118.732 439.609 115.406 438.787 111.446 cv
437.965 107.486 436.738 104.392 436.047 104.535 cv
435.355 104.679 435.461 108.006 436.283 111.966 cv
cp
.764706 .870588 .34902 rgb
f
411.74 122.9 mo
412.619 122.9 413.332 123.258 413.332 123.698 cv
413.332 124.037 413.332 147.64 413.332 147.979 cv
413.332 148.096 413.281 148.207 413.191 148.307 cv
413.191 148.249 li
413.061 148.394 412.846 148.516 412.579 148.599 cv
412.579 148.658 li
412.336 148.733 412.048 148.778 411.74 148.778 cv
410.861 148.778 410.149 148.42 410.149 147.979 cv
410.149 147.64 410.149 124.037 410.149 123.698 cv
410.149 123.258 410.861 122.9 411.74 122.9 cv
cp
.827451 .329412 0 rgb
f
411.751 113.049 mo
417.274 113.049 419.473 117.354 419.473 119.493 cv
419.473 127.617 li
419.473 127.617 li
419.473 130.431 li
419.473 132.57 417.577 136.875 411.751 136.875 cv
406.228 136.875 404.029 132.57 404.029 130.431 cv
404.029 129.132 li
404.029 127.617 li
404.029 119.493 li
404.029 117.354 405.925 113.049 411.751 113.049 cv
cp
.262745 .462745 .109804 rgb
f
405.303 117.202 mo
405.475 119.258 408.329 120.736 411.678 120.502 cv
415.027 120.267 417.602 118.41 417.43 116.353 cv
417.258 114.297 414.404 112.819 411.055 113.053 cv
407.706 113.288 405.131 115.145 405.303 117.202 cv
cp
.482353 .647059 .145098 rgb
f
406.774 115.519 mo
406.942 116.388 408.629 116.789 410.541 116.415 cv
412.453 116.042 413.867 115.035 413.699 114.166 cv
413.53 113.297 411.844 112.896 409.931 113.27 cv
408.019 113.643 406.605 114.65 406.774 115.519 cv
cp
.607843 .745098 .137255 rgb
f
408.43 114.383 mo
408.494 114.712 409.134 114.864 409.858 114.723 cv
410.583 114.581 411.119 114.2 411.055 113.87 cv
410.991 113.541 410.352 113.389 409.627 113.531 cv
408.902 113.672 408.367 114.054 408.43 114.383 cv
cp
.764706 .870588 .34902 rgb
f
411.751 133.77 mo
416.792 133.77 418.929 132.06 419.452 130.829 cv
419.236 133.061 417.235 136.875 411.751 136.875 cv
406.525 136.875 404.278 133.023 404.051 130.796 cv
404.609 132.029 406.93 133.77 411.751 133.77 cv
cp
.223529 .411765 .0627451 rgb
f
407.933 132.962 mo
408.116 132.962 408.292 132.941 408.466 132.911 cv
408.466 137.86 li
408.466 138.121 408.677 138.332 408.938 138.332 cv
410.945 138.332 li
411.193 138.332 411.392 138.138 411.41 137.894 cv
411.979 138.185 412.613 138.341 413.253 138.351 cv
413.028 139.419 412.081 140.221 410.945 140.221 cv
408.938 140.221 li
407.634 140.221 406.577 139.164 406.577 137.86 cv
406.577 132.795 li
407.011 132.904 407.467 132.962 407.933 132.962 cv
cp
.827451 .329412 0 rgb
f
416.442 131.723 mo
416.26 131.723 416.083 131.702 415.91 131.671 cv
415.91 136.621 li
415.91 136.881 415.698 137.093 415.437 137.093 cv
413.431 137.093 li
413.182 137.093 412.984 136.899 412.965 136.655 cv
412.396 136.945 411.762 137.102 411.122 137.111 cv
411.348 138.179 412.295 138.982 413.431 138.982 cv
415.437 138.982 li
416.741 138.982 417.798 137.925 417.798 136.621 cv
417.798 131.555 li
417.364 131.664 416.908 131.723 416.442 131.723 cv
cp
f
407.376 125.13 mo
410.609 125.13 411.896 127.65 411.896 128.902 cv
411.896 133.656 li
411.896 133.656 li
411.896 135.303 li
411.896 136.556 410.786 139.075 407.376 139.075 cv
404.144 139.075 402.857 136.556 402.857 135.303 cv
402.857 134.543 li
402.857 133.656 li
402.857 128.902 li
402.857 127.65 403.967 125.13 407.376 125.13 cv
cp
.380392 .568627 .239216 rgb
f
403.602 127.561 mo
403.703 128.765 405.374 129.629 407.333 129.492 cv
409.293 129.355 410.801 128.268 410.7 127.064 cv
410.599 125.861 408.929 124.996 406.969 125.133 cv
405.009 125.27 403.502 126.357 403.602 127.561 cv
cp
.607843 .752941 .305882 rgb
f
404.463 126.576 mo
404.562 127.084 405.549 127.319 406.668 127.101 cv
407.787 126.882 408.615 126.293 408.516 125.784 cv
408.418 125.276 407.431 125.041 406.311 125.26 cv
405.192 125.478 404.365 126.068 404.463 126.576 cv
cp
.729412 .85098 .313726 rgb
f
405.433 125.911 mo
405.47 126.104 405.844 126.193 406.269 126.11 cv
406.693 126.027 407.006 125.804 406.969 125.611 cv
406.932 125.418 406.558 125.329 406.133 125.412 cv
405.709 125.495 405.396 125.719 405.433 125.911 cv
cp
.894118 .976471 .568627 rgb
f
407.376 137.258 mo
410.327 137.258 411.577 136.257 411.883 135.537 cv
411.757 136.843 410.586 139.075 407.376 139.075 cv
404.318 139.075 403.003 136.821 402.87 135.517 cv
403.196 136.239 404.555 137.258 407.376 137.258 cv
cp
.333333 .517647 .172549 rgb
f
417.06 125.947 mo
419.721 125.947 420.78 128.021 420.78 129.052 cv
420.78 132.965 li
420.78 132.965 li
420.78 134.321 li
420.78 135.351 419.866 137.425 417.06 137.425 cv
414.399 137.425 413.34 135.351 413.34 134.321 cv
413.34 133.695 li
413.34 132.965 li
413.34 129.052 li
413.34 128.021 414.253 125.947 417.06 125.947 cv
cp
.380392 .568627 .239216 rgb
f
413.954 127.948 mo
414.036 128.938 415.411 129.65 417.025 129.537 cv
418.638 129.425 419.879 128.53 419.796 127.539 cv
419.713 126.548 418.338 125.836 416.725 125.949 cv
415.111 126.062 413.871 126.957 413.954 127.948 cv
cp
.607843 .752941 .305882 rgb
f
414.662 127.137 mo
414.743 127.556 415.556 127.749 416.477 127.569 cv
417.398 127.389 418.079 126.904 417.998 126.485 cv
417.917 126.067 417.105 125.873 416.183 126.053 cv
415.262 126.233 414.581 126.719 414.662 127.137 cv
cp
.729412 .85098 .313726 rgb
f
415.46 126.59 mo
415.491 126.748 415.799 126.822 416.148 126.753 cv
416.497 126.685 416.755 126.501 416.725 126.343 cv
416.694 126.184 416.386 126.111 416.037 126.179 cv
415.688 126.247 415.43 126.431 415.46 126.59 cv
cp
.894118 .976471 .568627 rgb
f
417.06 135.929 mo
419.488 135.929 420.518 135.105 420.77 134.513 cv
420.666 135.588 419.702 137.425 417.06 137.425 cv
414.542 137.425 413.46 135.57 413.351 134.497 cv
413.619 135.091 414.737 135.929 417.06 135.929 cv
cp
.333333 .517647 .172549 rgb
f
387.555 97.7506 mo
388.477 97.7506 389.225 98.1258 389.225 98.5887 cv
389.225 98.9445 389.225 123.722 389.225 124.078 cv
389.225 124.2 389.172 124.317 389.078 124.422 cv
389.078 124.361 li
388.941 124.513 388.716 124.641 388.436 124.728 cv
388.436 124.789 li
388.18 124.869 387.878 124.916 387.555 124.916 cv
386.632 124.916 385.884 124.54 385.884 124.078 cv
385.884 123.722 385.884 98.9445 385.884 98.5887 cv
385.884 98.1258 386.632 97.7506 387.555 97.7506 cv
cp
.827451 .329412 0 rgb
f
387.566 87.4092 mo
393.364 87.4092 395.673 91.9286 395.673 94.1743 cv
395.673 102.702 li
395.673 102.702 li
395.673 105.656 li
395.673 107.902 393.682 112.421 387.566 112.421 cv
381.769 112.421 379.46 107.902 379.46 105.656 cv
379.46 104.292 li
379.46 102.702 li
379.46 94.1743 li
379.46 91.9286 381.451 87.4092 387.566 87.4092 cv
cp
.262745 .462745 .109804 rgb
f
380.797 91.7685 mo
380.978 93.9276 383.974 95.4786 387.489 95.2328 cv
391.005 94.9869 393.708 93.0373 393.528 90.8783 cv
393.347 88.7192 390.351 87.1682 386.836 87.414 cv
383.32 87.6598 380.617 89.6094 380.797 91.7685 cv
cp
.482353 .647059 .145098 rgb
f
382.341 90.0022 mo
382.518 90.9142 384.288 91.3354 386.296 90.9432 cv
388.303 90.5509 389.788 89.4937 389.611 88.5819 cv
389.434 87.6699 387.664 87.2487 385.656 87.6409 cv
383.649 88.0332 382.164 89.0904 382.341 90.0022 cv
cp
.607843 .745098 .137255 rgb
f
384.08 88.8099 mo
384.147 89.1555 384.818 89.3151 385.579 89.1665 cv
386.34 89.0178 386.903 88.6172 386.836 88.2715 cv
386.769 87.9259 386.098 87.7662 385.337 87.9149 cv
384.576 88.0636 384.013 88.4643 384.08 88.8099 cv
cp
.764706 .870588 .34902 rgb
f
387.566 109.161 mo
392.858 109.161 395.101 107.366 395.65 106.074 cv
395.423 108.418 393.323 112.421 387.566 112.421 cv
382.08 112.421 379.722 108.378 379.484 106.04 cv
380.068 107.334 382.505 109.161 387.566 109.161 cv
cp
.223529 .411765 .0627451 rgb
f
383.559 108.314 mo
383.75 108.314 383.935 108.291 384.117 108.26 cv
384.117 113.455 li
384.117 113.729 384.34 113.951 384.613 113.951 cv
386.72 113.951 li
386.981 113.951 387.189 113.747 387.208 113.491 cv
387.806 113.796 388.471 113.96 389.143 113.97 cv
388.906 115.091 387.912 115.934 386.72 115.934 cv
384.613 115.934 li
383.244 115.934 382.135 114.824 382.135 113.455 cv
382.135 108.138 li
382.59 108.252 383.069 108.314 383.559 108.314 cv
cp
.827451 .329412 0 rgb
f
382.974 100.092 mo
386.367 100.092 387.718 102.737 387.718 104.051 cv
387.718 109.042 li
387.718 109.042 li
387.718 110.771 li
387.718 112.085 386.553 114.731 382.974 114.731 cv
379.581 114.731 378.229 112.085 378.229 110.771 cv
378.229 109.973 li
378.229 109.042 li
378.229 104.051 li
378.229 102.737 379.395 100.092 382.974 100.092 cv
cp
.380392 .568627 .239216 rgb
f
379.012 102.643 mo
379.118 103.907 380.871 104.815 382.929 104.671 cv
384.986 104.527 386.569 103.386 386.463 102.122 cv
386.357 100.859 384.604 99.9508 382.546 100.095 cv
380.489 100.239 378.906 101.38 379.012 102.643 cv
cp
.607843 .752941 .305882 rgb
f
379.916 101.609 mo
380.019 102.143 381.055 102.39 382.23 102.16 cv
383.405 101.931 384.274 101.312 384.17 100.778 cv
384.067 100.244 383.031 99.9979 381.856 100.228 cv
380.681 100.457 379.812 101.076 379.916 101.609 cv
cp
.729412 .85098 .313726 rgb
f
380.934 100.912 mo
380.973 101.114 381.366 101.207 381.811 101.12 cv
382.256 101.033 382.585 100.799 382.546 100.597 cv
382.507 100.394 382.114 100.301 381.669 100.388 cv
381.224 100.475 380.894 100.709 380.934 100.912 cv
cp
.894118 .976471 .568627 rgb
f
382.974 112.823 mo
386.071 112.823 387.384 111.772 387.705 111.016 cv
387.572 112.387 386.343 114.731 382.974 114.731 cv
379.763 114.731 378.383 112.364 378.243 110.996 cv
378.586 111.753 380.012 112.823 382.974 112.823 cv
cp
.333333 .517647 .172549 rgb
f
377.465 128.364 mo
374.729 128.364 372.61 126.981 372.61 126.013 cv
372.61 124.692 372.61 122.885 372.61 122.885 cv
372.61 121.54 373.802 118.833 377.465 118.833 cv
380.938 118.833 382.321 121.54 382.321 122.885 cv
382.321 122.885 382.321 125.075 382.321 126.052 cv
382.321 126.996 380.302 128.364 377.465 128.364 cv
cp
.380392 .568627 .239216 rgb
f
373.411 121.444 mo
373.519 122.737 375.313 123.666 377.419 123.519 cv
379.525 123.372 381.144 122.204 381.036 120.911 cv
380.928 119.618 379.133 118.689 377.028 118.836 cv
374.922 118.983 373.303 120.151 373.411 121.444 cv
cp
.607843 .752941 .305882 rgb
f
374.335 120.386 mo
374.441 120.932 375.502 121.185 376.704 120.95 cv
377.907 120.715 378.796 120.082 378.69 119.535 cv
378.584 118.989 377.523 118.737 376.321 118.972 cv
375.119 119.207 374.23 119.84 374.335 120.386 cv
cp
.729412 .85098 .313726 rgb
f
375.377 119.672 mo
375.417 119.879 375.819 119.975 376.275 119.886 cv
376.731 119.797 377.068 119.557 377.027 119.35 cv
376.987 119.143 376.585 119.047 376.13 119.136 cv
375.674 119.225 375.337 119.465 375.377 119.672 cv
cp
.894118 .976471 .568627 rgb
f
385.901 133.933 mo
382.27 133.933 379.457 132.098 379.457 130.813 cv
379.457 129.06 379.457 126.662 379.457 126.662 cv
379.457 124.877 381.039 121.284 385.901 121.284 cv
390.51 121.284 392.345 124.877 392.345 126.662 cv
392.345 126.662 392.345 129.568 392.345 130.865 cv
392.345 132.117 389.665 133.933 385.901 133.933 cv
cp
.262745 .462745 .109804 rgb
f
380.52 124.749 mo
380.664 126.466 383.045 127.699 385.84 127.503 cv
388.634 127.308 390.783 125.758 390.64 124.042 cv
390.496 122.325 388.115 121.092 385.32 121.288 cv
382.526 121.483 380.376 123.033 380.52 124.749 cv
cp
.482353 .647059 .145098 rgb
f
381.747 123.345 mo
381.888 124.07 383.295 124.405 384.891 124.093 cv
386.487 123.781 387.667 122.941 387.526 122.216 cv
387.386 121.491 385.978 121.156 384.382 121.468 cv
382.787 121.78 381.607 122.62 381.747 123.345 cv
cp
.607843 .745098 .137255 rgb
f
383.13 122.397 mo
383.183 122.672 383.716 122.799 384.321 122.681 cv
384.926 122.563 385.373 122.244 385.32 121.969 cv
385.267 121.695 384.733 121.568 384.129 121.686 cv
383.524 121.804 383.077 122.123 383.13 122.397 cv
cp
.764706 .870588 .34902 rgb
f
393.311 136.408 mo
390.856 136.408 388.955 135.168 388.955 134.299 cv
388.955 133.114 388.955 131.493 388.955 131.493 cv
388.955 130.287 390.025 127.858 393.311 127.858 cv
396.426 127.858 397.666 130.287 397.666 131.493 cv
397.666 131.493 397.666 133.458 397.666 134.334 cv
397.666 135.181 395.855 136.408 393.311 136.408 cv
cp
.380392 .568627 .239216 rgb
f
389.674 130.201 mo
389.771 131.361 391.38 132.194 393.269 132.062 cv
395.158 131.93 396.611 130.882 396.514 129.722 cv
396.417 128.562 394.807 127.729 392.918 127.861 cv
391.029 127.993 389.577 129.041 389.674 130.201 cv
cp
.607843 .752941 .305882 rgb
f
390.503 129.252 mo
390.598 129.742 391.549 129.968 392.628 129.757 cv
393.707 129.546 394.504 128.978 394.409 128.488 cv
394.314 127.998 393.363 127.772 392.284 127.983 cv
391.206 128.194 390.408 128.762 390.503 129.252 cv
cp
.729412 .85098 .313726 rgb
f
391.438 128.611 mo
391.474 128.797 391.834 128.882 392.243 128.803 cv
392.652 128.723 392.954 128.507 392.918 128.322 cv
392.882 128.136 392.521 128.05 392.113 128.13 cv
391.704 128.21 391.402 128.425 391.438 128.611 cv
cp
.894118 .976471 .568627 rgb
f
452.115 135.013 mo
449.38 135.013 447.26 133.63 447.26 132.662 cv
447.26 131.341 447.26 129.534 447.26 129.534 cv
447.26 128.189 448.452 125.482 452.115 125.482 cv
455.588 125.482 456.971 128.189 456.971 129.534 cv
456.971 129.534 456.971 131.724 456.971 132.701 cv
456.971 133.645 454.952 135.013 452.115 135.013 cv
cp
.380392 .568627 .239216 rgb
f
448.061 128.093 mo
448.169 129.386 449.964 130.315 452.069 130.168 cv
454.175 130.021 455.794 128.853 455.686 127.56 cv
455.578 126.267 453.783 125.338 451.678 125.485 cv
449.572 125.632 447.953 126.8 448.061 128.093 cv
cp
.607843 .752941 .305882 rgb
f
448.986 127.035 mo
449.092 127.581 450.152 127.834 451.355 127.599 cv
452.557 127.364 453.446 126.731 453.34 126.185 cv
453.234 125.638 452.174 125.386 450.971 125.621 cv
449.769 125.856 448.88 126.489 448.986 127.035 cv
cp
.729412 .85098 .313726 rgb
f
450.027 126.321 mo
450.068 126.528 450.47 126.624 450.925 126.535 cv
451.381 126.446 451.718 126.206 451.678 125.999 cv
451.638 125.792 451.236 125.696 450.78 125.785 cv
450.324 125.874 449.987 126.114 450.027 126.321 cv
cp
.894118 .976471 .568627 rgb
f
463.761 104.583 mo
461.879 104.583 460.42 103.631 460.42 102.965 cv
460.42 102.056 460.42 100.813 460.42 100.813 cv
460.42 99.8868 461.241 98.0238 463.761 98.0238 cv
466.151 98.0238 467.103 99.8868 467.103 100.813 cv
467.103 100.813 467.103 102.32 467.103 102.992 cv
467.103 103.641 465.713 104.583 463.761 104.583 cv
cp
.262745 .462745 .109804 rgb
f
460.971 99.8208 mo
461.046 100.711 462.281 101.35 463.73 101.249 cv
465.179 101.147 466.293 100.344 466.219 99.4538 cv
466.144 98.5638 464.909 97.9245 463.46 98.0258 cv
462.011 98.1272 460.897 98.9308 460.971 99.8208 cv
cp
.482353 .647059 .145098 rgb
f
461.608 99.0927 mo
461.68 99.4686 462.41 99.6423 463.238 99.4806 cv
464.065 99.3189 464.677 98.8831 464.604 98.5073 cv
464.531 98.1314 463.802 97.9577 462.974 98.1194 cv
462.146 98.2811 461.535 98.7168 461.608 99.0927 cv
cp
.607843 .745098 .137255 rgb
f
462.324 98.6012 mo
462.352 98.7437 462.629 98.8096 462.942 98.7483 cv
463.256 98.687 463.488 98.5218 463.46 98.3793 cv
463.433 98.2369 463.156 98.1711 462.842 98.2324 cv
462.529 98.2937 462.297 98.4588 462.324 98.6012 cv
cp
.764706 .870588 .34902 rgb
f
468.749 107.78 mo
466.866 107.78 465.407 106.829 465.407 106.162 cv
465.407 105.253 465.407 104.01 465.407 104.01 cv
465.407 103.084 466.228 101.221 468.749 101.221 cv
471.139 101.221 472.091 103.084 472.091 104.01 cv
472.091 104.01 472.091 105.517 472.091 106.189 cv
472.091 106.838 470.701 107.78 468.749 107.78 cv
cp
.262745 .462745 .109804 rgb
f
465.959 103.018 mo
466.033 103.908 467.268 104.547 468.717 104.446 cv
470.166 104.345 471.281 103.541 471.206 102.651 cv
471.132 101.761 469.897 101.122 468.448 101.223 cv
466.999 101.324 465.884 102.128 465.959 103.018 cv
cp
.482353 .647059 .145098 rgb
f
466.595 102.29 mo
466.668 102.666 467.398 102.839 468.225 102.678 cv
469.053 102.516 469.665 102.08 469.592 101.704 cv
469.519 101.329 468.789 101.155 467.962 101.317 cv
467.134 101.478 466.522 101.914 466.595 102.29 cv
cp
.607843 .745098 .137255 rgb
f
467.312 101.798 mo
467.34 101.941 467.616 102.007 467.93 101.945 cv
468.244 101.884 468.475 101.719 468.448 101.576 cv
468.42 101.434 468.144 101.368 467.83 101.43 cv
467.516 101.491 467.284 101.656 467.312 101.798 cv
cp
.764706 .870588 .34902 rgb
f
473.737 110.978 mo
471.854 110.978 470.395 110.026 470.395 109.359 cv
470.395 108.45 470.395 107.207 470.395 107.207 cv
470.395 106.281 471.216 104.418 473.737 104.418 cv
476.126 104.418 477.078 106.281 477.078 107.207 cv
477.078 107.207 477.078 108.714 477.078 109.386 cv
477.078 110.036 475.689 110.978 473.737 110.978 cv
cp
.262745 .462745 .109804 rgb
f
470.946 106.215 mo
471.021 107.105 472.256 107.744 473.705 107.643 cv
475.154 107.542 476.268 106.738 476.194 105.848 cv
476.12 104.958 474.884 104.319 473.435 104.42 cv
471.986 104.521 470.872 105.325 470.946 106.215 cv
cp
.482353 .647059 .145098 rgb
f
471.583 105.487 mo
471.655 105.863 472.385 106.037 473.213 105.875 cv
474.04 105.713 474.652 105.277 474.579 104.902 cv
474.506 104.526 473.777 104.352 472.949 104.514 cv
472.122 104.675 471.51 105.111 471.583 105.487 cv
cp
.607843 .745098 .137255 rgb
f
472.3 104.996 mo
472.327 105.138 472.604 105.204 472.918 105.143 cv
473.231 105.081 473.463 104.916 473.435 104.774 cv
473.408 104.631 473.131 104.565 472.818 104.627 cv
472.504 104.688 472.272 104.853 472.3 104.996 cv
cp
.764706 .870588 .34902 rgb
f
95.3383 326.118 mo
169.222 283.689 li
169.222 281.875 li
21.45 281.875 li
21.45 283.689 li
95.3383 326.118 li
cp
.0901961 .4 .215686 rgb
f
95.3383 324.305 mo
169.222 281.875 li
95.3342 239.445 li
21.45 281.875 li
95.3383 324.305 li
cp
.152941 .682353 .376471 rgb
f
139.527 248.122 mo
140.345 248.122 141.008 248.454 141.008 248.865 cv
141.008 249.18 141.008 271.148 141.008 271.464 cv
141.008 271.573 140.961 271.676 140.877 271.769 cv
140.877 271.715 li
140.755 271.85 140.556 271.964 140.308 272.041 cv
140.308 272.095 li
140.081 272.166 139.813 272.207 139.527 272.207 cv
138.709 272.207 138.045 271.874 138.045 271.464 cv
138.045 271.148 138.045 249.18 138.045 248.865 cv
138.045 248.454 138.709 248.122 139.527 248.122 cv
cp
.827451 .329412 0 rgb
f
139.691 235.63 mo
143.276 235.63 149.27 253.354 149.27 257.19 cv
149.27 259.843 146.917 265.183 139.691 265.183 cv
132.841 265.183 130.113 259.843 130.113 257.19 cv
130.113 253.354 137.043 235.63 139.691 235.63 cv
cp
.262745 .462745 .109804 rgb
f
139.347 257.51 mo
138.529 250.028 139.698 235.63 139.698 235.63 cv
143.283 235.651 149.363 253.358 149.27 257.19 cv
149.17 261.288 139.876 262.346 139.347 257.51 cv
cp
.482353 .647059 .145098 rgb
f
144.676 256.567 mo
146.471 256.511 148.163 255.602 148.157 254.696 cv
148.136 251.63 144.208 241.588 141.404 237.229 cv
139.801 235.372 141.165 250.147 141.858 255.06 cv
142.065 256.534 144.067 256.586 144.676 256.567 cv
144.676 256.567 li
cp
.607843 .745098 .137255 rgb
f
138.969 261.968 mo
145.16 262.728 148.09 260.973 148.09 260.973 cv
146.751 263.152 144.149 265.183 139.691 265.183 cv
133.209 265.183 130.422 260.405 130.141 257.643 cv
130.832 259.172 134.663 261.439 138.969 261.968 cv
cp
.223529 .411765 .0627451 rgb
f
142.185 243.448 mo
143.053 245.976 144.155 247.888 144.647 247.719 cv
145.138 247.55 144.834 245.364 143.966 242.837 cv
143.099 240.309 141.997 238.397 141.505 238.566 cv
141.013 238.735 141.318 240.921 142.185 243.448 cv
cp
.764706 .870588 .34902 rgb
f
53.1506 256.707 mo
54.0198 256.023 li
65.723 262.728 li
65.723 279.91 li
64.8537 280.393 li
53.1506 256.707 li
cp
1 1 1 rgb
f
53.1506 273.688 mo
53.1506 256.506 li
64.8537 263.211 li
64.8537 280.393 li
53.1506 273.688 li
cp
.858824 .858824 .858824 rgb
f
63.5008 263.66 mo
54.5037 258.505 li
54.5037 273.239 li
63.5008 278.393 li
63.5008 263.66 li
cp
.337255 .392157 .447059 rgb
f
59.0686 260.637 mo
59.0686 276.266 li
58.3926 275.879 li
58.3926 260.25 li
59.0686 260.637 li
cp
.858824 .858824 .858824 rgb
f
93.1136 247.718 mo
44.0034 275.855 li
93.1137 303.991 li
142.224 275.855 li
93.1136 247.718 li
cp
.756863 .219608 .164706 rgb
f
142.224 280.623 mo
93.1137 308.759 li
93.1137 303.991 li
142.224 275.855 li
142.224 280.623 li
cp
.858824 .858824 .858824 rgb
f
93.1137 308.759 mo
44.0034 280.623 li
44.0034 275.855 li
93.1137 303.991 li
93.1137 308.759 li
cp
.666667 .717647 .717647 rgb
f
129.042 262.077 mo
129.042 272.338 li
128.275 272.777 li
128.275 261.677 li
128.534 261.8 128.79 261.933 129.042 262.077 cv
cp
.858824 .858824 .858824 rgb
f
133.725 264.545 mo
133.725 274.806 li
132.958 275.246 li
132.958 264.145 li
133.217 264.268 133.473 264.401 133.725 264.545 cv
cp
f
131.426 263.354 mo
131.426 273.615 li
130.659 274.055 li
130.659 262.954 li
130.918 263.077 131.174 263.21 131.426 263.354 cv
cp
f
136.625 274.248 mo
135.548 274.871 li
108.621 259.25 li
109.698 258.627 li
136.625 274.248 li
cp
f
135.57 277.102 mo
108.609 261.462 li
108.621 259.25 li
135.548 274.871 li
135.57 277.102 li
cp
.666667 .717647 .717647 rgb
f
136.796 265.393 mo
135.719 266.016 li
108.791 250.395 li
109.868 249.772 li
136.796 265.393 li
cp
.858824 .858824 .858824 rgb
f
135.74 268.247 mo
108.779 252.606 li
108.791 250.395 li
135.719 266.016 li
135.74 268.247 li
cp
.666667 .717647 .717647 rgb
f
134.83 245.538 mo
135.91 246.156 li
135.91 277.287 li
134.83 276.668 li
134.83 245.538 li
cp
f
137.829 245.019 mo
137.829 276.188 li
135.91 277.287 li
135.91 246.156 li
137.829 245.019 li
cp
.858824 .858824 .858824 rgb
f
132.958 265.069 mo
132.958 275.246 li
132.526 274.999 li
132.526 264.927 li
132.67 264.971 132.814 265.018 132.958 265.069 cv
cp
.666667 .717647 .717647 rgb
f
130.659 263.877 mo
130.659 274.055 li
130.227 273.807 li
130.227 263.735 li
130.372 263.78 130.515 263.827 130.659 263.877 cv
cp
f
128.275 262.6 mo
128.275 272.777 li
127.843 272.53 li
127.843 262.458 li
127.988 262.503 128.131 262.549 128.275 262.6 cv
cp
f
93.1137 301.487 mo
93.1137 270.356 li
48.3773 244.725 li
48.3773 275.856 li
93.1137 301.487 li
cp
f
115.482 225.174 mo
137.85 244.725 li
137.85 252.682 li
126.841 258.99 li
126.841 282.163 li
93.1137 301.487 li
93.1137 270.356 li
115.482 225.174 li
cp
.858824 .858824 .858824 rgb
f
114.828 221.888 mo
91.0703 269.878 li
46.3339 244.248 li
70.0917 196.257 li
114.828 221.888 li
cp
.756863 .219608 .164706 rgb
f
139.893 243.797 mo
139.893 245.046 li
137.85 246.216 li
137.85 244.725 li
115.482 225.174 li
93.1137 270.356 li
93.1137 271.847 li
91.0703 273.018 li
91.0703 269.878 li
114.828 221.888 li
139.893 243.797 li
cp
.529412 .12549 .105882 rgb
f
91.0703 273.018 mo
91.0703 269.878 li
46.3339 244.248 li
46.3339 247.387 li
91.0703 273.018 li
cp
.6 .101961 .0901961 rgb
f
72.8667 268.233 mo
73.7359 267.549 li
85.4391 274.254 li
85.4391 291.437 li
84.5699 291.92 li
72.8667 268.233 li
cp
1 1 1 rgb
f
72.8667 285.215 mo
72.8667 268.032 li
84.5699 274.737 li
84.5699 291.92 li
72.8667 285.215 li
cp
.858824 .858824 .858824 rgb
f
83.2169 275.186 mo
74.2198 270.031 li
74.2198 284.765 li
83.2169 289.92 li
83.2169 275.186 li
cp
.337255 .392157 .447059 rgb
f
78.7847 272.163 mo
78.7847 287.792 li
78.1088 287.405 li
78.1088 271.776 li
78.7847 272.163 li
cp
.858824 .858824 .858824 rgb
f
52.4069 256.505 mo
53.2761 255.821 li
64.9793 262.526 li
64.9793 279.709 li
64.11 280.192 li
52.4069 256.505 li
cp
1 1 1 rgb
f
52.4069 273.487 mo
52.4069 256.304 li
64.11 263.009 li
64.11 280.192 li
52.4069 273.487 li
cp
.858824 .858824 .858824 rgb
f
62.7571 263.458 mo
53.76 258.303 li
53.76 273.037 li
62.7571 278.192 li
62.7571 263.458 li
cp
.337255 .392157 .447059 rgb
f
58.3249 260.435 mo
58.3249 276.064 li
57.6489 275.677 li
57.6489 260.048 li
58.3249 260.435 li
cp
.858824 .858824 .858824 rgb
f
114.336 268.233 mo
113.467 267.549 li
101.764 274.254 li
101.764 291.437 li
102.633 291.92 li
114.336 268.233 li
cp
1 1 1 rgb
f
114.336 285.215 mo
114.336 268.032 li
102.633 274.737 li
102.633 291.92 li
114.336 285.215 li
cp
.937255 .937255 .937255 rgb
f
103.986 275.186 mo
112.983 270.031 li
112.983 284.765 li
103.986 289.92 li
103.986 275.186 li
cp
.337255 .392157 .447059 rgb
f
108.418 272.163 mo
108.418 287.792 li
109.094 287.405 li
109.094 271.776 li
108.418 272.163 li
cp
.937255 .937255 .937255 rgb
f
122.832 236.732 mo
121.963 236.048 li
115.133 239.886 li
115.133 256.782 li
116.002 257.265 li
122.832 236.732 li
cp
1 1 1 rgb
f
122.832 253.427 mo
122.832 236.531 li
116.002 240.369 li
116.002 257.265 li
122.832 253.427 li
cp
.937255 .937255 .937255 rgb
f
117.355 240.818 mo
121.479 238.531 li
121.479 252.978 li
117.355 255.265 li
117.355 240.818 li
cp
.337255 .392157 .447059 rgb
f
144.614 282.134 mo
140.351 279.936 li
126.917 287.359 li
131.18 289.776 li
144.614 282.134 li
cp
.937255 .952941 .952941 rgb
f
131.18 291.759 mo
126.917 289.342 li
126.917 287.359 li
131.18 289.776 li
131.18 291.759 li
cp
.666667 .717647 .717647 rgb
f
131.18 291.759 mo
144.614 284.116 li
144.614 282.134 li
131.18 289.776 li
131.18 291.759 li
cp
.741176 .764706 .780392 rgb
f
73.4926 303.732 mo
70.7568 303.732 68.6373 302.349 68.6373 301.38 cv
68.6373 300.059 68.6373 298.252 68.6373 298.252 cv
68.6373 296.907 69.8296 294.2 73.4927 294.2 cv
76.9653 294.2 78.3481 296.907 78.3481 298.252 cv
78.3481 298.252 78.3481 300.442 78.3481 301.419 cv
78.3481 302.363 76.3289 303.732 73.4926 303.732 cv
cp
.380392 .568627 .239216 rgb
f
69.4382 296.811 mo
69.5464 298.105 71.341 299.034 73.4466 298.886 cv
75.5523 298.739 77.1715 297.571 77.0634 296.278 cv
76.9553 294.985 75.1607 294.056 73.0551 294.203 cv
70.9495 294.35 69.3301 295.518 69.4382 296.811 cv
cp
.607843 .752941 .305882 rgb
f
70.363 295.754 mo
70.4688 296.3 71.5294 296.552 72.7318 296.317 cv
73.9342 296.082 74.8232 295.449 74.7173 294.903 cv
74.6115 294.356 73.5509 294.104 72.3485 294.339 cv
71.1461 294.574 70.2571 295.207 70.363 295.754 cv
cp
.729412 .85098 .313726 rgb
f
71.4047 295.039 mo
71.4448 295.246 71.8467 295.342 72.3025 295.253 cv
72.7582 295.164 73.0952 294.924 73.055 294.717 cv
73.0149 294.51 72.613 294.414 72.1572 294.503 cv
71.7015 294.592 71.3646 294.832 71.4047 295.039 cv
cp
.894118 .976471 .568627 rgb
f
81.9283 309.301 mo
78.2975 309.301 75.4844 307.465 75.4844 306.18 cv
75.4844 304.427 75.4844 302.029 75.4844 302.029 cv
75.4844 300.244 77.067 296.651 81.9283 296.651 cv
86.5371 296.651 88.3722 300.244 88.3722 302.029 cv
88.3722 302.029 88.3722 304.935 88.3722 306.232 cv
88.3722 307.484 85.6925 309.301 81.9283 309.301 cv
cp
.262745 .462745 .109804 rgb
f
76.5475 300.116 mo
76.691 301.833 79.0727 303.066 81.8672 302.87 cv
84.6617 302.675 86.8107 301.125 86.6672 299.409 cv
86.5238 297.692 84.1421 296.46 81.3476 296.655 cv
78.5531 296.85 76.404 298.4 76.5475 300.116 cv
cp
.482353 .647059 .145098 rgb
f
77.7747 298.712 mo
77.9152 299.437 79.3227 299.772 80.9186 299.46 cv
82.5143 299.149 83.6941 298.308 83.5536 297.583 cv
83.4132 296.858 82.0057 296.524 80.4098 296.835 cv
78.8141 297.147 77.6343 297.987 77.7747 298.712 cv
cp
.607843 .745098 .137255 rgb
f
79.1572 297.765 mo
79.2105 298.039 79.7439 298.166 80.3488 298.048 cv
80.9536 297.93 81.4007 297.611 81.3475 297.337 cv
81.2942 297.062 80.7608 296.935 80.1559 297.053 cv
79.5512 297.171 79.104 297.49 79.1572 297.765 cv
cp
.764706 .870588 .34902 rgb
f
89.3381 311.776 mo
86.8839 311.776 84.9825 310.535 84.9825 309.666 cv
84.9825 308.481 84.9825 306.861 84.9825 306.861 cv
84.9825 305.654 86.0522 303.225 89.3381 303.225 cv
92.4533 303.225 93.6937 305.654 93.6937 306.861 cv
93.6937 306.861 93.6937 308.825 93.6937 309.702 cv
93.6937 310.548 91.8824 311.776 89.3381 311.776 cv
cp
.380392 .568627 .239216 rgb
f
85.701 305.568 mo
85.7981 306.728 87.4079 307.561 89.2968 307.429 cv
91.1857 307.297 92.6383 306.25 92.5412 305.09 cv
92.4442 303.929 90.8344 303.096 88.9455 303.228 cv
87.0566 303.36 85.604 304.408 85.701 305.568 cv
cp
.607843 .752941 .305882 rgb
f
86.5306 304.619 mo
86.6255 305.109 87.5769 305.335 88.6556 305.124 cv
89.7342 304.914 90.5316 304.346 90.4366 303.856 cv
90.3417 303.366 89.3903 303.139 88.3117 303.35 cv
87.2331 303.561 86.4356 304.129 86.5306 304.619 cv
cp
.729412 .85098 .313726 rgb
f
87.4651 303.978 mo
87.5011 304.164 87.8616 304.25 88.2704 304.17 cv
88.6792 304.09 88.9814 303.875 88.9454 303.689 cv
88.9095 303.503 88.5489 303.417 88.1401 303.497 cv
87.7313 303.577 87.4291 303.792 87.4651 303.978 cv
cp
.894118 .976471 .568627 rgb
f
44.4788 287.185 mo
41.7429 287.185 39.6234 285.802 39.6234 284.833 cv
39.6234 283.512 39.6234 281.705 39.6234 281.705 cv
39.6234 280.36 40.8158 277.653 44.4789 277.653 cv
47.9515 277.653 49.3342 280.36 49.3342 281.705 cv
49.3342 281.705 49.3342 283.895 49.3342 284.872 cv
49.3342 285.816 47.3151 287.185 44.4788 287.185 cv
cp
.380392 .568627 .239216 rgb
f
40.4244 280.264 mo
40.5325 281.558 42.3271 282.487 44.4327 282.339 cv
46.5384 282.192 48.1576 281.024 48.0496 279.731 cv
47.9414 278.438 46.1468 277.509 44.0412 277.656 cv
41.9356 277.803 40.3163 278.971 40.4244 280.264 cv
cp
.607843 .752941 .305882 rgb
f
41.3491 279.207 mo
41.455 279.753 42.5155 280.005 43.7179 279.77 cv
44.9203 279.535 45.8093 278.902 45.7034 278.356 cv
45.5976 277.81 44.5371 277.557 43.3346 277.792 cv
42.1322 278.027 41.2433 278.66 41.3491 279.207 cv
cp
.729412 .85098 .313726 rgb
f
42.3909 278.492 mo
42.4309 278.699 42.8329 278.795 43.2887 278.706 cv
43.7444 278.617 44.0813 278.377 44.0411 278.17 cv
44.001 277.963 43.5991 277.867 43.1433 277.956 cv
42.6876 278.045 42.3507 278.285 42.3909 278.492 cv
cp
.894118 .976471 .568627 rgb
f
52.9145 292.754 mo
49.2837 292.754 46.4706 290.918 46.4706 289.633 cv
46.4706 287.88 46.4706 285.482 46.4706 285.482 cv
46.4706 283.697 48.0531 280.104 52.9145 280.104 cv
57.5232 280.104 59.3584 283.697 59.3584 285.482 cv
59.3584 285.482 59.3584 288.388 59.3584 289.685 cv
59.3584 290.937 56.6787 292.754 52.9145 292.754 cv
cp
.262745 .462745 .109804 rgb
f
47.5337 283.569 mo
47.6771 285.286 50.0589 286.519 52.8534 286.323 cv
55.6478 286.128 57.7969 284.578 57.6533 282.862 cv
57.5099 281.145 55.1282 279.913 52.3337 280.108 cv
49.5392 280.303 47.3901 281.853 47.5337 283.569 cv
cp
.482353 .647059 .145098 rgb
f
48.7609 282.165 mo
48.9013 282.89 50.3088 283.225 51.9047 282.913 cv
53.5005 282.602 54.6802 281.761 54.5398 281.036 cv
54.3993 280.311 52.9918 279.977 51.396 280.288 cv
49.8002 280.6 48.6204 281.44 48.7609 282.165 cv
cp
.607843 .745098 .137255 rgb
f
50.1434 281.218 mo
50.1967 281.492 50.7301 281.619 51.3349 281.501 cv
51.9397 281.383 52.3869 281.064 52.3336 280.79 cv
52.2803 280.515 51.7469 280.388 51.1421 280.506 cv
50.5373 280.624 50.0901 280.943 50.1434 281.218 cv
cp
.764706 .870588 .34902 rgb
f
60.3242 295.229 mo
57.87 295.229 55.9686 293.988 55.9686 293.119 cv
55.9686 291.934 55.9686 290.314 55.9686 290.314 cv
55.9686 289.107 57.0383 286.678 60.3242 286.678 cv
63.4394 286.678 64.6799 289.107 64.6799 290.314 cv
64.6799 290.314 64.6799 292.278 64.6799 293.155 cv
64.6799 294.001 62.8686 295.229 60.3242 295.229 cv
cp
.380392 .568627 .239216 rgb
f
56.6872 289.021 mo
56.7842 290.181 58.394 291.014 60.2829 290.882 cv
62.1718 290.75 63.6244 289.703 63.5274 288.543 cv
63.4304 287.382 61.8205 286.549 59.9317 286.681 cv
58.0428 286.813 56.5902 287.861 56.6872 289.021 cv
cp
.607843 .752941 .305882 rgb
f
57.5167 288.072 mo
57.6116 288.562 58.563 288.788 59.6417 288.577 cv
60.7203 288.367 61.5177 287.799 61.4228 287.309 cv
61.3279 286.819 60.3765 286.592 59.2978 286.803 cv
58.2192 287.014 57.4218 287.582 57.5167 288.072 cv
cp
.729412 .85098 .313726 rgb
f
58.4512 287.431 mo
58.4872 287.617 58.8477 287.703 59.2565 287.623 cv
59.6654 287.543 59.9676 287.328 59.9316 287.142 cv
59.8957 286.956 59.5351 286.87 59.1262 286.95 cv
58.7174 287.03 58.4152 287.245 58.4512 287.431 cv
cp
.894118 .976471 .568627 rgb
f
36.3596 263.724 mo
37.1777 263.724 37.8409 264.057 37.8409 264.467 cv
37.8409 264.782 37.8409 286.751 37.8409 287.066 cv
37.8409 287.175 37.7938 287.279 37.7098 287.372 cv
37.7098 287.318 li
37.5884 287.452 37.3892 287.566 37.1406 287.643 cv
37.1406 287.698 li
36.9139 287.768 36.6463 287.809 36.3596 287.809 cv
35.5415 287.809 34.8783 287.477 34.8783 287.066 cv
34.8783 286.751 34.8783 264.782 34.8783 264.467 cv
34.8783 264.057 35.5415 263.724 36.3596 263.724 cv
cp
.827451 .329412 0 rgb
f
36.5243 251.232 mo
40.1091 251.232 46.1025 268.957 46.1025 272.792 cv
46.1025 275.445 43.7502 280.786 36.5243 280.786 cv
29.6738 280.786 26.946 275.445 26.946 272.792 cv
26.946 268.957 33.8757 251.232 36.5243 251.232 cv
cp
.262745 .462745 .109804 rgb
f
36.1802 273.112 mo
35.3618 265.631 36.5306 251.233 36.5306 251.233 cv
40.1161 251.253 46.1959 268.96 46.1025 272.792 cv
46.0025 276.89 36.709 277.948 36.1802 273.112 cv
cp
.482353 .647059 .145098 rgb
f
41.5092 272.169 mo
43.304 272.113 44.9959 271.205 44.9899 270.299 cv
44.9687 267.232 41.041 257.19 38.2368 252.831 cv
36.6335 250.974 37.9976 265.75 38.6912 270.662 cv
38.8984 272.136 40.9003 272.188 41.5092 272.169 cv
41.5092 272.169 li
cp
.607843 .745098 .137255 rgb
f
35.8024 277.57 mo
41.9927 278.33 44.9234 276.575 44.9234 276.575 cv
43.5837 278.754 40.9815 280.786 36.5242 280.786 cv
30.0423 280.786 27.2552 276.008 26.9738 273.246 cv
27.6649 274.774 31.4956 277.041 35.8024 277.57 cv
cp
.223529 .411765 .0627451 rgb
f
39.0183 259.05 mo
39.8857 261.578 40.9876 263.49 41.4794 263.321 cv
41.9713 263.153 41.6668 260.967 40.7994 258.439 cv
39.9319 255.912 38.83 253.999 38.3382 254.168 cv
37.8463 254.337 38.1507 256.523 39.0183 259.05 cv
cp
.764706 .870588 .34902 rgb
f
95.9083 296.329 mo
96.7264 296.329 97.3896 296.662 97.3896 297.072 cv
97.3896 297.387 97.3896 319.356 97.3896 319.671 cv
97.3896 319.78 97.3425 319.884 97.2586 319.977 cv
97.2586 319.923 li
97.1372 320.057 96.938 320.171 96.6894 320.249 cv
96.6894 320.303 li
96.4626 320.373 96.195 320.414 95.9083 320.414 cv
95.0902 320.414 94.427 320.082 94.427 319.671 cv
94.427 319.356 94.427 297.387 94.427 297.072 cv
94.427 296.662 95.0902 296.329 95.9083 296.329 cv
cp
.827451 .329412 0 rgb
f
96.073 273.767 mo
99.6578 273.767 105.651 301.562 105.651 305.397 cv
105.651 308.051 103.299 313.391 96.073 313.391 cv
89.2225 313.391 86.4947 308.051 86.4947 305.397 cv
86.4947 301.562 93.4244 273.767 96.073 273.767 cv
cp
.262745 .462745 .109804 rgb
f
95.7289 305.717 mo
94.9105 298.236 96.0793 273.859 96.0793 273.859 cv
99.6648 273.88 105.745 301.565 105.651 305.397 cv
105.551 309.495 96.2578 310.553 95.7289 305.717 cv
cp
.482353 .647059 .145098 rgb
f
101.058 304.774 mo
102.853 304.718 104.545 303.81 104.539 302.904 cv
104.517 299.837 100.328 279.423 97.5239 275.063 cv
95.9206 273.206 97.5464 298.355 98.24 303.268 cv
98.4471 304.741 100.449 304.793 101.058 304.774 cv
101.058 304.774 li
cp
.607843 .745098 .137255 rgb
f
95.3511 310.175 mo
101.541 310.936 104.472 309.18 104.472 309.18 cv
103.132 311.359 100.53 313.391 96.0729 313.391 cv
89.591 313.391 86.804 308.613 86.5225 305.851 cv
87.2136 307.379 91.0443 309.646 95.3511 310.175 cv
cp
.223529 .411765 .0627451 rgb
f
97.8643 283.891 mo
98.6864 287.851 99.9134 290.945 100.605 290.802 cv
101.297 290.658 101.191 287.331 100.369 283.371 cv
99.5471 279.411 98.32 276.318 97.6284 276.461 cv
96.9367 276.605 97.0423 279.931 97.8643 283.891 cv
cp
.764706 .870588 .34902 rgb
f
421.083 336.621 mo
501.642 290.303 li
501.642 288.49 li
333.897 284.911 li
333.897 286.724 li
421.083 336.621 li
cp
.0901961 .4 .215686 rgb
f
421.083 334.807 mo
501.642 288.49 li
414.458 238.592 li
333.897 284.911 li
421.083 334.807 li
cp
.152941 .682353 .376471 rgb
f
482.667 256.663 mo
483.485 256.663 484.148 256.995 484.148 257.406 cv
484.148 257.721 484.148 279.689 484.148 280.005 cv
484.148 280.114 484.101 280.217 484.017 280.31 cv
484.017 280.256 li
483.895 280.391 483.696 280.504 483.448 280.582 cv
483.448 280.636 li
483.221 280.707 482.953 280.748 482.667 280.748 cv
481.848 280.748 481.185 280.415 481.185 280.005 cv
481.185 279.689 481.185 257.721 481.185 257.406 cv
481.185 256.995 481.848 256.663 482.667 256.663 cv
cp
.827451 .329412 0 rgb
f
482.831 244.17 mo
486.416 244.17 492.409 261.895 492.409 265.731 cv
492.409 268.384 490.057 273.724 482.831 273.724 cv
475.981 273.724 473.253 268.384 473.253 265.731 cv
473.253 261.895 480.183 244.17 482.831 244.17 cv
cp
.262745 .462745 .109804 rgb
f
482.487 266.051 mo
481.669 258.569 482.838 244.171 482.838 244.171 cv
486.423 244.192 492.503 261.899 492.409 265.731 cv
492.309 269.829 483.016 270.887 482.487 266.051 cv
cp
.482353 .647059 .145098 rgb
f
487.816 265.108 mo
489.611 265.052 491.303 264.143 491.297 263.237 cv
491.276 260.171 487.348 250.129 484.544 245.77 cv
482.94 243.913 484.305 258.688 484.998 263.601 cv
485.205 265.075 487.207 265.127 487.816 265.108 cv
487.816 265.108 li
cp
.607843 .745098 .137255 rgb
f
482.109 270.509 mo
488.3 271.269 491.23 269.514 491.23 269.514 cv
489.891 271.693 487.288 273.724 482.831 273.724 cv
476.349 273.724 473.562 268.946 473.281 266.184 cv
473.972 267.713 477.803 269.98 482.109 270.509 cv
cp
.223529 .411765 .0627451 rgb
f
485.325 251.989 mo
486.193 254.517 487.295 256.429 487.786 256.26 cv
488.278 256.091 487.974 253.905 487.106 251.378 cv
486.239 248.85 485.137 246.938 484.645 247.107 cv
484.153 247.276 484.458 249.462 485.325 251.989 cv
cp
.764706 .870588 .34902 rgb
f
395.243 262.782 mo
396.112 262.098 li
407.815 268.803 li
407.815 285.985 li
406.946 286.468 li
395.243 262.782 li
cp
1 1 1 rgb
f
395.243 279.763 mo
395.243 262.58 li
406.946 269.286 li
406.946 286.468 li
395.243 279.763 li
cp
.858824 .858824 .858824 rgb
f
405.593 269.734 mo
396.596 264.58 li
396.596 279.314 li
405.593 284.468 li
405.593 269.734 li
cp
.337255 .392157 .447059 rgb
f
401.161 266.712 mo
401.161 282.341 li
400.485 281.953 li
400.485 266.325 li
401.161 266.712 li
cp
.858824 .858824 .858824 rgb
f
435.206 253.793 mo
386.096 281.93 li
435.206 310.066 li
484.316 281.93 li
435.206 253.793 li
cp
.937255 .952941 .952941 rgb
f
484.316 286.698 mo
435.206 314.834 li
435.206 310.066 li
484.316 281.93 li
484.316 286.698 li
cp
.858824 .858824 .858824 rgb
f
435.206 314.834 mo
386.096 286.698 li
386.096 281.93 li
435.206 310.066 li
435.206 314.834 li
cp
.666667 .717647 .717647 rgb
f
365.563 267.601 mo
341.461 281.203 li
390.572 309.339 li
414.673 295.738 li
365.563 267.601 li
cp
.937255 .952941 .952941 rgb
f
412.197 297.157 mo
390.572 309.339 li
390.572 314.107 li
412.197 301.925 li
412.197 297.157 li
cp
.858824 .858824 .858824 rgb
f
390.572 314.107 mo
341.461 285.971 li
341.461 281.203 li
390.572 309.339 li
390.572 314.107 li
cp
.666667 .717647 .717647 rgb
f
435.206 307.562 mo
435.206 276.431 li
390.47 250.8 li
390.47 281.931 li
435.206 307.562 li
cp
f
390.848 306.678 mo
390.848 275.548 li
367.1 229.584 li
344.763 249.436 li
344.763 280.567 li
390.848 306.678 li
cp
f
412.237 263.293 mo
390.848 275.548 li
390.848 306.678 li
412.237 294.424 li
412.237 263.293 li
cp
.858824 .858824 .858824 rgb
f
457.574 231.249 mo
479.942 250.8 li
479.942 258.757 li
479.921 282.263 li
468.933 288.238 li
435.206 307.562 li
435.206 276.431 li
457.574 231.249 li
cp
f
456.92 227.963 mo
433.163 275.953 li
388.426 250.323 li
412.184 202.332 li
456.92 227.963 li
cp
.337255 .392157 .447059 rgb
f
481.986 249.872 mo
481.986 251.12 li
479.942 252.291 li
479.942 250.8 li
457.574 231.249 li
435.206 276.431 li
435.206 277.922 li
433.163 279.093 li
433.163 275.953 li
456.92 227.963 li
481.986 249.872 li
cp
.203922 .286275 .368627 rgb
f
433.163 279.093 mo
433.163 275.953 li
388.426 250.323 li
388.426 253.462 li
433.163 279.093 li
cp
f
414.959 274.308 mo
415.828 273.624 li
427.531 280.329 li
427.531 297.512 li
426.662 297.995 li
414.959 274.308 li
cp
1 1 1 rgb
f
414.959 291.29 mo
414.959 274.107 li
426.662 280.812 li
426.662 297.995 li
414.959 291.29 li
cp
.858824 .858824 .858824 rgb
f
425.309 281.261 mo
416.312 276.106 li
416.312 290.84 li
425.309 295.995 li
425.309 281.261 li
cp
.337255 .392157 .447059 rgb
f
420.877 278.238 mo
420.877 293.867 li
420.201 293.48 li
420.201 277.851 li
420.877 278.238 li
cp
.858824 .858824 .858824 rgb
f
456.428 274.107 mo
455.559 273.624 li
443.856 280.329 li
443.856 297.512 li
444.725 297.995 li
456.428 274.107 li
cp
1 1 1 rgb
f
456.428 291.29 mo
456.428 274.107 li
444.725 280.812 li
444.725 297.995 li
456.428 291.29 li
cp
.937255 .937255 .937255 rgb
f
446.078 281.261 mo
455.075 276.106 li
455.075 290.84 li
446.078 295.995 li
446.078 281.261 li
cp
.337255 .392157 .447059 rgb
f
450.51 278.238 mo
450.51 293.867 li
451.186 293.48 li
451.186 277.851 li
450.51 278.238 li
cp
.937255 .937255 .937255 rgb
f
464.924 242.606 mo
464.055 242.123 li
457.225 245.961 li
457.225 262.857 li
458.094 263.34 li
464.924 242.606 li
cp
1 1 1 rgb
f
464.924 259.502 mo
464.924 242.606 li
458.094 246.444 li
458.094 263.34 li
464.924 259.502 li
cp
.937255 .937255 .937255 rgb
f
459.447 246.892 mo
463.571 244.606 li
463.571 259.053 li
459.447 261.34 li
459.447 246.892 li
cp
.337255 .392157 .447059 rgb
f
471.609 266.274 mo
469.563 265.137 li
458.215 271.39 li
458.215 294.387 li
460.361 295.642 li
471.609 266.274 li
cp
1 1 1 rgb
f
471.653 289.185 mo
471.653 266.263 li
460.261 272.527 li
460.361 295.642 li
471.653 289.185 li
cp
.937255 .937255 .937255 rgb
f
470.36 268.881 mo
461.573 273.434 li
461.573 294.957 li
470.388 289.964 li
470.36 268.881 li
cp
.337255 .392157 .447059 rgb
f
405.923 277.046 mo
405.054 276.362 li
398.224 280.2 li
398.224 297.096 li
399.093 297.579 li
405.923 277.046 li
cp
1 1 1 rgb
f
405.923 293.741 mo
405.923 276.845 li
399.093 280.683 li
399.093 297.579 li
405.923 293.741 li
cp
.937255 .937255 .937255 rgb
f
400.446 281.132 mo
404.57 278.845 li
404.57 293.292 li
400.446 295.579 li
400.446 281.132 li
cp
.337255 .392157 .447059 rgb
f
481.754 298.304 mo
471.689 292.651 li
466.623 302.772 li
470.268 304.838 li
481.754 298.304 li
cp
.937255 .952941 .952941 rgb
f
470.268 306.534 mo
460.204 300.693 li
460.204 298.997 li
470.268 304.838 li
470.268 306.534 li
cp
.666667 .717647 .717647 rgb
f
470.268 306.534 mo
481.754 299.999 li
481.754 298.304 li
470.268 304.838 li
470.268 306.534 li
cp
.741176 .764706 .780392 rgb
f
478.479 294.675 mo
471.689 290.927 li
463.348 299.143 li
466.993 301.209 li
478.479 294.675 li
cp
.937255 .952941 .952941 rgb
f
466.993 302.905 mo
460.204 298.969 li
460.204 297.273 li
466.993 301.209 li
466.993 302.905 li
cp
.666667 .717647 .717647 rgb
f
466.993 302.905 mo
478.479 296.371 li
478.479 294.675 li
466.993 301.209 li
466.993 302.905 li
cp
.741176 .764706 .780392 rgb
f
475.335 291.113 mo
471.689 289.234 li
460.204 295.581 li
463.849 297.647 li
475.335 291.113 li
cp
.937255 .952941 .952941 rgb
f
463.849 299.342 mo
460.204 297.276 li
460.204 295.581 li
463.849 297.647 li
463.849 299.342 li
cp
.666667 .717647 .717647 rgb
f
463.849 299.342 mo
475.335 292.808 li
475.335 291.113 li
463.849 297.647 li
463.849 299.342 li
cp
.741176 .764706 .780392 rgb
f
412.347 307.969 mo
409.611 307.969 407.492 306.586 407.492 305.618 cv
407.492 304.297 407.492 302.49 407.492 302.49 cv
407.492 301.145 408.684 298.438 412.347 298.438 cv
415.82 298.438 417.203 301.145 417.203 302.49 cv
417.203 302.49 417.203 304.68 417.203 305.657 cv
417.203 306.6 415.183 307.969 412.347 307.969 cv
cp
.380392 .568627 .239216 rgb
f
408.293 301.049 mo
408.401 302.342 410.195 303.271 412.301 303.124 cv
414.407 302.977 416.026 301.809 415.918 300.516 cv
415.81 299.222 414.015 298.293 411.91 298.44 cv
409.804 298.588 408.185 299.755 408.293 301.049 cv
cp
.607843 .752941 .305882 rgb
f
409.217 299.991 mo
409.323 300.537 410.384 300.789 411.586 300.554 cv
412.789 300.319 413.678 299.686 413.572 299.14 cv
413.466 298.594 412.405 298.341 411.203 298.576 cv
410 298.811 409.112 299.445 409.217 299.991 cv
cp
.729412 .85098 .313726 rgb
f
410.259 299.277 mo
410.299 299.484 410.701 299.579 411.157 299.49 cv
411.613 299.401 411.95 299.161 411.909 298.954 cv
411.869 298.747 411.467 298.652 411.012 298.741 cv
410.556 298.83 410.219 299.07 410.259 299.277 cv
cp
.894118 .976471 .568627 rgb
f
420.783 313.538 mo
417.152 313.538 414.339 311.702 414.339 310.417 cv
414.339 308.664 414.339 306.266 414.339 306.266 cv
414.339 304.481 415.921 300.888 420.783 300.888 cv
425.392 300.888 427.227 304.481 427.227 306.266 cv
427.227 306.266 427.227 309.172 427.227 310.469 cv
427.227 311.721 424.547 313.538 420.783 313.538 cv
cp
.262745 .462745 .109804 rgb
f
415.402 304.354 mo
415.545 306.07 417.927 307.303 420.722 307.108 cv
423.516 306.912 425.665 305.362 425.522 303.646 cv
425.378 301.93 422.997 300.697 420.202 300.892 cv
417.408 301.088 415.258 302.637 415.402 304.354 cv
cp
.482353 .647059 .145098 rgb
f
416.629 302.95 mo
416.77 303.675 418.177 304.009 419.773 303.698 cv
421.369 303.386 422.549 302.545 422.408 301.821 cv
422.268 301.096 420.86 300.761 419.264 301.073 cv
417.668 301.384 416.489 302.225 416.629 302.95 cv
cp
.607843 .745098 .137255 rgb
f
418.012 302.002 mo
418.065 302.277 418.598 302.403 419.203 302.285 cv
419.808 302.167 420.255 301.849 420.202 301.574 cv
420.149 301.299 419.615 301.172 419.01 301.29 cv
418.406 301.409 417.958 301.727 418.012 302.002 cv
cp
.764706 .870588 .34902 rgb
f
400.922 313.079 mo
398.467 313.079 396.566 311.838 396.566 310.97 cv
396.566 309.785 396.566 308.164 396.566 308.164 cv
396.566 306.957 397.636 304.529 400.922 304.529 cv
404.037 304.529 405.277 306.957 405.277 308.164 cv
405.277 308.164 405.277 310.128 405.277 311.005 cv
405.277 311.851 403.466 313.079 400.922 313.079 cv
cp
.380392 .568627 .239216 rgb
f
397.285 306.871 mo
397.382 308.031 398.991 308.865 400.88 308.733 cv
402.769 308.601 404.222 307.553 404.125 306.393 cv
404.028 305.233 402.418 304.399 400.529 304.532 cv
398.64 304.664 397.188 305.711 397.285 306.871 cv
cp
.607843 .752941 .305882 rgb
f
398.114 305.922 mo
398.209 306.412 399.16 306.639 400.239 306.428 cv
401.318 306.217 402.115 305.649 402.02 305.159 cv
401.925 304.669 400.974 304.443 399.895 304.654 cv
398.817 304.864 398.019 305.432 398.114 305.922 cv
cp
.729412 .85098 .313726 rgb
f
399.049 305.282 mo
399.085 305.467 399.445 305.553 399.854 305.473 cv
400.263 305.393 400.565 305.178 400.529 304.992 cv
400.493 304.807 400.133 304.721 399.724 304.801 cv
399.315 304.881 399.013 305.096 399.049 305.282 cv
cp
.894118 .976471 .568627 rgb
f
431.893 302.054 mo
432.711 302.054 433.374 302.387 433.374 302.797 cv
433.374 303.113 433.374 325.081 433.374 325.396 cv
433.374 325.505 433.327 325.609 433.243 325.702 cv
433.243 325.648 li
433.122 325.783 432.923 325.896 432.674 325.974 cv
432.674 326.028 li
432.447 326.099 432.18 326.139 431.893 326.139 cv
431.075 326.139 430.412 325.807 430.412 325.396 cv
430.412 325.081 430.412 303.113 430.412 302.797 cv
430.412 302.387 431.075 302.054 431.893 302.054 cv
cp
.827451 .329412 0 rgb
f
432.058 279.492 mo
435.642 279.492 441.636 307.287 441.636 311.122 cv
441.636 313.776 439.283 319.116 432.058 319.116 cv
425.207 319.116 422.479 313.776 422.479 311.122 cv
422.479 307.287 429.409 279.492 432.058 279.492 cv
cp
.262745 .462745 .109804 rgb
f
431.714 311.443 mo
430.895 303.961 432.064 279.584 432.064 279.584 cv
435.649 279.605 441.729 307.29 441.636 311.122 cv
441.536 315.22 432.242 316.278 431.714 311.443 cv
cp
.482353 .647059 .145098 rgb
f
437.043 310.499 mo
438.837 310.443 440.529 309.535 440.523 308.629 cv
440.502 305.562 436.313 285.148 433.508 280.788 cv
431.905 278.931 433.531 304.08 434.225 308.993 cv
434.432 310.466 436.434 310.518 437.043 310.499 cv
437.043 310.499 li
cp
.607843 .745098 .137255 rgb
f
431.336 315.9 mo
437.526 316.661 440.457 314.905 440.457 314.905 cv
439.117 317.084 436.515 319.116 432.057 319.116 cv
425.576 319.116 422.789 314.338 422.507 311.576 cv
423.198 313.104 427.029 315.371 431.336 315.9 cv
cp
.223529 .411765 .0627451 rgb
f
433.849 289.616 mo
434.671 293.576 435.898 296.67 436.59 296.527 cv
437.281 296.383 437.176 293.056 436.354 289.096 cv
435.532 285.137 434.305 282.043 433.613 282.186 cv
432.921 282.33 433.027 285.656 433.849 289.616 cv
cp
.764706 .870588 .34902 rgb
f
412.184 202.332 mo
367.697 227.82 li
391.455 275.811 li
412.184 263.934 li
412.184 202.332 li
cp
.239216 .341176 .427451 rgb
f
342.631 249.729 mo
342.631 250.978 li
344.675 252.148 li
344.675 250.658 li
367.043 231.106 li
389.411 276.288 li
389.411 277.779 li
391.454 278.95 li
391.454 275.811 li
367.697 227.82 li
342.631 249.729 li
cp
.337255 .392157 .447059 rgb
f
412.184 263.934 mo
391.455 275.811 li
391.455 278.95 li
412.184 267.073 li
412.184 263.934 li
cp
.203922 .286275 .368627 rgb
f
369.871 272.99 mo
370.741 272.306 li
382.444 279.011 li
382.444 296.194 li
381.574 296.677 li
369.871 272.99 li
cp
1 1 1 rgb
f
369.871 289.972 mo
369.871 272.789 li
381.574 279.494 li
381.574 296.677 li
369.871 289.972 li
cp
.858824 .858824 .858824 rgb
f
380.221 279.943 mo
371.224 274.789 li
371.224 289.523 li
380.221 294.677 li
380.221 279.943 li
cp
.337255 .392157 .447059 rgb
f
375.789 276.921 mo
375.789 292.549 li
375.113 292.162 li
375.113 276.534 li
375.789 276.921 li
cp
.858824 .858824 .858824 rgb
f
359.421 240.337 mo
360.29 239.652 li
371.993 246.358 li
371.993 263.54 li
371.124 264.023 li
359.421 240.337 li
cp
1 1 1 rgb
f
359.421 257.318 mo
359.421 240.135 li
371.124 246.84 li
371.124 264.023 li
359.421 257.318 li
cp
.858824 .858824 .858824 rgb
f
369.771 247.289 mo
360.774 242.135 li
360.774 256.869 li
369.771 262.023 li
369.771 247.289 li
cp
.337255 .392157 .447059 rgb
f
365.339 244.267 mo
365.339 259.896 li
364.663 259.508 li
364.663 243.88 li
365.339 244.267 li
cp
.858824 .858824 .858824 rgb
f
350.102 261.884 mo
350.971 261.2 li
362.674 267.905 li
362.674 285.088 li
361.805 285.571 li
350.102 261.884 li
cp
1 1 1 rgb
f
350.102 278.865 mo
350.102 261.683 li
361.805 268.388 li
361.805 285.571 li
350.102 278.865 li
cp
.858824 .858824 .858824 rgb
f
360.452 268.837 mo
351.455 263.682 li
351.455 278.416 li
360.452 283.571 li
360.452 268.837 li
cp
.337255 .392157 .447059 rgb
f
356.02 265.814 mo
356.02 281.443 li
355.344 281.056 li
355.344 265.427 li
356.02 265.814 li
cp
.858824 .858824 .858824 rgb
f
257.351 325.324 mo
183.467 282.894 li
183.467 281.081 li
320.174 287.519 li
320.174 289.333 li
257.351 325.324 li
cp
.0901961 .4 .215686 rgb
f
257.351 323.51 mo
183.467 281.081 li
246.29 245.089 li
320.174 287.519 li
257.351 323.51 li
cp
.152941 .682353 .376471 rgb
f
207.715 275.736 mo
254.285 249.731 li
300.409 275.818 li
253.839 302.295 li
207.715 275.736 li
cp
.937255 .952941 .952941 rgb
f
204.42 251.093 mo
203.56 251.093 202.863 251.443 202.863 251.874 cv
202.863 252.206 202.863 275.307 202.863 275.639 cv
202.863 275.753 202.912 275.862 203 275.96 cv
203 275.903 li
203.128 276.045 203.338 276.164 203.599 276.246 cv
203.599 276.303 li
203.837 276.377 204.119 276.42 204.42 276.42 cv
205.281 276.42 205.978 276.07 205.978 275.639 cv
205.978 275.307 205.978 252.206 205.978 251.874 cv
205.978 251.443 205.281 251.093 204.42 251.093 cv
cp
.827451 .329412 0 rgb
f
204.41 241.451 mo
199.004 241.451 196.852 245.665 196.852 247.759 cv
196.852 255.709 li
196.852 255.709 li
196.852 258.464 li
196.852 260.557 198.708 264.771 204.41 264.771 cv
209.815 264.771 211.967 260.557 211.967 258.464 cv
211.967 257.192 li
211.967 255.709 li
211.967 247.759 li
211.967 245.665 210.111 241.451 204.41 241.451 cv
cp
.262745 .462745 .109804 rgb
f
210.721 245.516 mo
210.552 247.529 207.759 248.975 204.481 248.746 cv
201.204 248.516 198.683 246.699 198.852 244.686 cv
199.02 242.673 201.813 241.227 205.091 241.456 cv
208.368 241.685 210.889 243.503 210.721 245.516 cv
cp
.482353 .647059 .145098 rgb
f
209.281 243.869 mo
209.117 244.719 207.466 245.112 205.594 244.746 cv
203.722 244.381 202.339 243.395 202.503 242.545 cv
202.668 241.695 204.319 241.302 206.191 241.667 cv
208.062 242.033 209.446 243.019 209.281 243.869 cv
cp
.607843 .745098 .137255 rgb
f
207.66 242.757 mo
207.597 243.08 206.972 243.228 206.262 243.09 cv
205.553 242.951 205.028 242.578 205.091 242.255 cv
205.153 241.933 205.779 241.784 206.488 241.923 cv
207.198 242.062 207.722 242.435 207.66 242.757 cv
cp
.764706 .870588 .34902 rgb
f
204.41 261.732 mo
199.476 261.732 197.385 260.058 196.873 258.854 cv
197.084 261.038 199.042 264.771 204.41 264.771 cv
209.524 264.771 211.723 261.001 211.946 258.822 cv
211.4 260.028 209.128 261.732 204.41 261.732 cv
cp
.223529 .411765 .0627451 rgb
f
208.146 260.941 mo
207.968 260.941 207.795 260.921 207.625 260.891 cv
207.625 265.735 li
207.625 265.99 207.418 266.197 207.163 266.197 cv
205.199 266.197 li
204.956 266.197 204.761 266.007 204.743 265.769 cv
204.186 266.053 203.566 266.206 202.939 266.215 cv
203.16 267.261 204.087 268.046 205.199 268.046 cv
207.163 268.046 li
208.439 268.046 209.474 267.011 209.474 265.735 cv
209.474 260.777 li
209.049 260.884 208.603 260.941 208.146 260.941 cv
cp
.827451 .329412 0 rgb
f
199.819 259.728 mo
199.997 259.728 200.17 259.708 200.34 259.678 cv
200.34 264.522 li
200.34 264.777 200.547 264.984 200.802 264.984 cv
202.766 264.984 li
203.009 264.984 203.203 264.794 203.221 264.555 cv
203.778 264.84 204.399 264.993 205.025 265.002 cv
204.804 266.047 203.877 266.833 202.766 266.833 cv
200.802 266.833 li
199.526 266.833 198.491 265.798 198.491 264.522 cv
198.491 259.564 li
198.916 259.671 199.362 259.728 199.819 259.728 cv
cp
f
208.691 253.276 mo
205.528 253.276 204.268 255.742 204.268 256.967 cv
204.268 261.621 li
204.268 261.621 li
204.268 263.233 li
204.268 264.458 205.354 266.924 208.691 266.924 cv
211.855 266.924 213.115 264.458 213.115 263.233 cv
213.115 262.488 li
213.115 261.621 li
213.115 256.967 li
213.115 255.742 212.028 253.276 208.691 253.276 cv
cp
.380392 .568627 .239216 rgb
f
212.385 255.655 mo
212.286 256.833 210.652 257.679 208.733 257.545 cv
206.815 257.411 205.34 256.347 205.438 255.169 cv
205.537 253.991 207.172 253.144 209.09 253.279 cv
211.008 253.413 212.483 254.477 212.385 255.655 cv
cp
.607843 .752941 .305882 rgb
f
211.543 254.691 mo
211.446 255.189 210.48 255.418 209.385 255.204 cv
208.289 254.99 207.479 254.413 207.576 253.916 cv
207.672 253.418 208.638 253.188 209.734 253.402 cv
210.829 253.616 211.639 254.193 211.543 254.691 cv
cp
.729412 .85098 .313726 rgb
f
210.594 254.04 mo
210.557 254.229 210.191 254.316 209.776 254.235 cv
209.36 254.154 209.054 253.935 209.09 253.747 cv
209.127 253.558 209.493 253.471 209.908 253.552 cv
210.323 253.633 210.63 253.852 210.594 254.04 cv
cp
.894118 .976471 .568627 rgb
f
208.691 265.145 mo
205.804 265.145 204.58 264.166 204.28 263.461 cv
204.404 264.74 205.55 266.924 208.691 266.924 cv
211.685 266.924 212.972 264.718 213.102 263.442 cv
212.783 264.148 211.453 265.145 208.691 265.145 cv
cp
.333333 .517647 .172549 rgb
f
199.214 254.075 mo
196.61 254.075 195.573 256.105 195.573 257.114 cv
195.573 260.944 li
195.573 260.944 li
195.573 262.271 li
195.573 263.279 196.467 265.309 199.214 265.309 cv
201.818 265.309 202.855 263.279 202.855 262.271 cv
202.855 261.658 li
202.855 260.944 li
202.855 257.114 li
202.855 256.105 201.961 254.075 199.214 254.075 cv
cp
.380392 .568627 .239216 rgb
f
202.254 256.033 mo
202.173 257.003 200.827 257.7 199.248 257.589 cv
197.669 257.479 196.455 256.603 196.536 255.633 cv
196.617 254.664 197.963 253.967 199.542 254.077 cv
201.121 254.188 202.335 255.064 202.254 256.033 cv
cp
.607843 .752941 .305882 rgb
f
201.561 255.24 mo
201.481 255.65 200.686 255.839 199.784 255.663 cv
198.883 255.486 198.216 255.012 198.295 254.602 cv
198.375 254.192 199.17 254.003 200.072 254.179 cv
200.973 254.356 201.64 254.83 201.561 255.24 cv
cp
.729412 .85098 .313726 rgb
f
200.779 254.704 mo
200.749 254.86 200.448 254.931 200.106 254.865 cv
199.765 254.798 199.512 254.618 199.542 254.463 cv
199.572 254.307 199.873 254.236 200.215 254.302 cv
200.557 254.369 200.81 254.549 200.779 254.704 cv
cp
.894118 .976471 .568627 rgb
f
199.214 263.845 mo
196.837 263.845 195.829 263.039 195.583 262.459 cv
195.685 263.511 196.628 265.309 199.214 265.309 cv
201.678 265.309 202.737 263.493 202.844 262.443 cv
202.581 263.024 201.487 263.845 199.214 263.845 cv
cp
.333333 .517647 .172549 rgb
f
253.839 306.562 mo
300.409 280.084 li
300.409 275.818 li
253.839 302.295 li
253.839 306.562 li
cp
.666667 .717647 .717647 rgb
f
253.839 306.562 mo
207.715 280.002 li
207.715 275.736 li
253.839 302.295 li
253.839 306.562 li
cp
.741176 .764706 .780392 rgb
f
231.947 245.022 mo
231.947 288.885 li
253.999 301.519 li
253.999 270.388 li
231.947 245.022 li
cp
.666667 .717647 .717647 rgb
f
209.895 222.104 mo
209.895 276.25 li
231.947 288.885 li
231.947 216.289 li
209.895 222.104 li
cp
f
253.999 301.519 mo
253.999 270.388 li
298.736 244.757 li
298.736 275.888 li
253.999 301.519 li
cp
.858824 .858824 .858824 rgb
f
231.947 247.42 mo
231.947 216.289 li
276.684 190.658 li
276.684 221.789 li
231.947 247.42 li
cp
f
230.664 244.642 mo
253.999 271.484 li
300.67 244.745 li
277.335 217.903 li
230.664 244.642 li
cp
.239216 .341176 .427451 rgb
f
230.664 244.642 mo
230.664 247.526 li
252.107 272.191 li
253.999 271.484 li
230.664 244.642 li
cp
.337255 .392157 .447059 rgb
f
283.799 262.205 mo
292.03 257.463 li
292.485 257.867 li
284.253 275.086 li
283.799 274.682 li
283.799 262.205 li
cp
.937255 .952941 .952941 rgb
f
284.253 262.609 mo
292.485 257.867 li
292.485 270.344 li
284.253 275.086 li
284.253 262.609 li
cp
.741176 .764706 .780392 rgb
f
291.516 269.785 mo
291.516 259.543 li
285.222 263.169 li
285.222 273.411 li
291.516 269.785 li
cp
.337255 .392157 .447059 rgb
f
292.137 262.166 mo
292.137 263.152 li
284.708 267.432 li
284.708 266.445 li
292.137 262.166 li
cp
.741176 .764706 .780392 rgb
f
292.137 265.75 mo
292.137 266.736 li
284.708 271.016 li
284.708 270.03 li
292.137 265.75 li
cp
f
287.946 261.084 mo
288.878 260.547 li
288.878 271.666 li
287.946 272.203 li
287.946 261.084 li
cp
f
267.499 271.591 mo
275.731 266.849 li
276.185 267.253 li
267.954 284.472 li
267.5 284.068 li
267.499 271.591 li
cp
.937255 .952941 .952941 rgb
f
267.954 271.995 mo
276.185 267.253 li
276.185 279.73 li
267.954 284.472 li
267.954 271.995 li
cp
.741176 .764706 .780392 rgb
f
275.217 279.171 mo
275.217 268.928 li
268.922 272.555 li
268.922 282.797 li
275.217 279.171 li
cp
.337255 .392157 .447059 rgb
f
275.837 271.551 mo
275.837 272.538 li
268.408 276.818 li
268.408 275.831 li
275.837 271.551 li
cp
.741176 .764706 .780392 rgb
f
275.837 275.136 mo
275.837 276.122 li
268.408 280.402 li
268.408 279.415 li
275.837 275.136 li
cp
f
271.646 270.469 mo
272.578 269.933 li
272.578 281.052 li
271.646 281.589 li
271.646 270.469 li
cp
f
260.101 207.65 mo
268.332 202.908 li
268.787 203.312 li
260.555 220.531 li
260.101 220.128 li
260.101 207.65 li
cp
.937255 .952941 .952941 rgb
f
260.555 208.054 mo
268.787 203.312 li
268.787 215.789 li
260.555 220.531 li
260.555 208.054 li
cp
.741176 .764706 .780392 rgb
f
267.818 215.23 mo
267.818 204.988 li
261.524 208.614 li
261.524 218.856 li
267.818 215.23 li
cp
.337255 .392157 .447059 rgb
f
268.439 207.611 mo
268.439 208.597 li
261.01 212.877 li
261.01 211.89 li
268.439 207.611 li
cp
.741176 .764706 .780392 rgb
f
268.439 211.195 mo
268.439 212.181 li
261.01 216.461 li
261.01 215.475 li
268.439 211.195 li
cp
f
264.248 206.529 mo
265.18 205.992 li
265.18 217.111 li
264.248 217.648 li
264.248 206.529 li
cp
f
243.801 217.036 mo
252.033 212.294 li
252.487 212.698 li
244.256 229.917 li
243.801 229.513 li
243.801 217.036 li
cp
.937255 .952941 .952941 rgb
f
244.256 217.44 mo
252.487 212.698 li
252.487 225.175 li
244.256 229.917 li
244.256 217.44 li
cp
.741176 .764706 .780392 rgb
f
251.519 224.615 mo
251.519 214.373 li
245.224 218 li
245.224 228.242 li
251.519 224.615 li
cp
.337255 .392157 .447059 rgb
f
252.139 216.996 mo
252.139 217.983 li
244.71 222.263 li
244.71 221.276 li
252.139 216.996 li
cp
.741176 .764706 .780392 rgb
f
252.139 220.581 mo
252.139 221.567 li
244.71 225.847 li
244.71 224.86 li
252.139 220.581 li
cp
f
247.948 215.914 mo
248.88 215.378 li
248.88 226.497 li
247.948 227.034 li
247.948 215.914 li
cp
f
246.822 274.849 mo
238.591 270.107 li
238.137 270.511 li
246.368 287.73 li
246.822 287.326 li
246.822 274.849 li
cp
.937255 .952941 .952941 rgb
f
246.368 275.253 mo
238.137 270.511 li
238.137 282.988 li
246.368 287.73 li
246.368 275.253 li
cp
.741176 .764706 .780392 rgb
f
239.105 282.428 mo
239.105 272.186 li
245.4 275.813 li
245.4 286.055 li
239.105 282.428 li
cp
.337255 .392157 .447059 rgb
f
238.484 274.809 mo
238.484 275.795 li
245.914 280.075 li
245.914 279.089 li
238.484 274.809 li
cp
.741176 .764706 .780392 rgb
f
238.484 278.393 mo
238.484 279.379 li
245.914 283.659 li
245.914 282.673 li
238.484 278.393 li
cp
f
242.675 273.727 mo
241.744 273.19 li
241.744 284.31 li
242.675 284.846 li
242.675 273.727 li
cp
f
224.054 229.468 mo
215.822 224.725 li
215.368 225.129 li
223.599 242.349 li
224.054 241.945 li
224.054 229.468 li
cp
.937255 .952941 .952941 rgb
f
223.599 229.871 mo
215.368 225.129 li
215.368 237.607 li
223.599 242.349 li
223.599 229.871 li
cp
.741176 .764706 .780392 rgb
f
216.337 237.047 mo
216.337 226.805 li
222.631 230.431 li
222.631 240.673 li
216.337 237.047 li
cp
.337255 .392157 .447059 rgb
f
215.716 229.428 mo
215.716 230.414 li
223.145 234.694 li
223.145 233.708 li
215.716 229.428 li
cp
.741176 .764706 .780392 rgb
f
215.716 233.012 mo
215.716 233.998 li
223.145 238.278 li
223.145 237.292 li
215.716 233.012 li
cp
f
219.907 228.346 mo
218.975 227.809 li
218.975 238.928 li
219.907 239.465 li
219.907 228.346 li
cp
f
224.054 249.606 mo
218.747 246.571 li
218.293 246.975 li
223.599 279.114 li
224.054 278.71 li
224.054 249.606 li
cp
.937255 .952941 .952941 rgb
f
223.599 250.01 mo
218.293 246.975 li
218.293 276.079 li
223.599 279.114 li
223.599 250.01 li
cp
.741176 .764706 .780392 rgb
f
219.261 275.52 mo
219.261 248.651 li
222.631 250.569 li
222.631 277.438 li
219.261 275.52 li
cp
.337255 .392157 .447059 rgb
f
218.767 252.095 mo
218.767 253.081 li
223.272 255.654 li
223.272 254.667 li
218.767 252.095 li
cp
.741176 .764706 .780392 rgb
f
218.767 255.679 mo
218.767 256.665 li
223.272 259.238 li
223.272 258.252 li
218.767 255.679 li
cp
f
218.767 259.471 mo
218.767 260.457 li
223.272 263.029 li
223.272 262.043 li
218.767 259.471 li
cp
f
218.767 263.262 mo
218.767 264.248 li
223.272 266.821 li
223.272 265.835 li
218.767 263.262 li
cp
f
218.767 267.054 mo
218.767 268.04 li
223.272 270.612 li
223.272 269.626 li
218.767 267.054 li
cp
f
218.767 270.845 mo
218.767 271.831 li
223.272 274.404 li
223.272 273.417 li
218.767 270.845 li
cp
f
240.524 260.425 mo
235.043 257.239 li
234.589 257.643 li
240.07 266.659 li
240.524 266.255 li
240.524 260.425 li
cp
.937255 .952941 .952941 rgb
f
240.07 260.829 mo
234.589 257.643 li
234.589 263.474 li
240.07 266.659 li
240.07 260.829 li
cp
.741176 .764706 .780392 rgb
f
235.557 262.914 mo
235.557 259.319 li
239.102 261.389 li
239.102 264.984 li
235.557 262.914 li
cp
.337255 .392157 .447059 rgb
f
207.875 223.877 mo
231.261 217.71 li
278.704 190.53 li
278.704 189.041 li
207.875 222.389 li
207.875 223.877 li
cp
f
207.875 222.389 mo
231.261 216.222 li
278.704 189.041 li
255.318 195.208 li
207.875 222.389 li
cp
.239216 .341176 .427451 rgb
f
234.267 267.079 mo
226.035 262.337 li
225.581 262.741 li
233.812 290.697 li
234.267 290.293 li
234.267 267.079 li
cp
.937255 .952941 .952941 rgb
f
233.813 267.483 mo
225.581 262.741 li
225.581 290.369 li
233.812 295.111 li
233.813 267.483 li
cp
.741176 .764706 .780392 rgb
f
226.549 290.908 mo
226.549 264.416 li
232.844 268.043 li
232.844 294.535 li
226.549 290.908 li
cp
.756863 .219608 .164706 rgb
f
216.427 293.23 mo
224.935 288.587 li
229.217 297.21 li
226.136 298.908 li
216.427 293.23 li
cp
.937255 .952941 .952941 rgb
f
226.136 300.341 mo
234.644 295.539 li
234.644 294.106 li
226.136 298.908 li
226.136 300.341 li
cp
.666667 .717647 .717647 rgb
f
226.136 300.341 mo
216.427 294.663 li
216.427 293.23 li
226.136 298.908 li
226.136 300.341 li
cp
.741176 .764706 .780392 rgb
f
219.196 290.207 mo
224.935 287.129 li
231.986 294.187 li
228.905 295.884 li
219.196 290.207 li
cp
.937255 .952941 .952941 rgb
f
228.905 297.884 mo
234.644 294.082 li
234.644 292.648 li
228.905 295.884 li
228.905 297.884 li
cp
.666667 .717647 .717647 rgb
f
228.905 297.318 mo
219.196 291.64 li
219.196 290.207 li
228.905 295.884 li
228.905 297.318 li
cp
.741176 .764706 .780392 rgb
f
221.854 287.238 mo
224.935 285.698 li
234.644 291.218 li
231.563 292.915 li
221.854 287.238 li
cp
.937255 .952941 .952941 rgb
f
231.563 295.089 mo
234.644 292.651 li
234.644 291.218 li
231.563 292.915 li
231.563 295.089 li
cp
.666667 .717647 .717647 rgb
f
231.563 294.349 mo
221.854 288.671 li
221.854 287.238 li
231.563 292.915 li
231.563 294.349 li
cp
.741176 .764706 .780392 rgb
f
207.129 265.331 mo
206.328 265.331 205.679 265.656 205.679 266.058 cv
205.679 266.367 205.679 287.868 205.679 288.177 cv
205.679 288.283 205.725 288.385 205.807 288.476 cv
205.807 288.423 li
205.926 288.555 206.121 288.666 206.364 288.742 cv
206.364 288.795 li
206.586 288.864 206.848 288.904 207.129 288.904 cv
207.929 288.904 208.578 288.578 208.578 288.177 cv
208.578 287.868 208.578 266.367 208.578 266.058 cv
208.578 265.656 207.929 265.331 207.129 265.331 cv
cp
.827451 .329412 0 rgb
f
206.967 253.105 mo
203.459 253.105 197.593 270.452 197.593 274.206 cv
197.593 276.803 199.895 282.03 206.967 282.03 cv
213.672 282.03 216.342 276.803 216.342 274.206 cv
216.342 270.452 209.56 253.105 206.967 253.105 cv
cp
.262745 .462745 .109804 rgb
f
207.304 274.52 mo
208.105 267.197 206.961 253.106 206.961 253.106 cv
203.452 253.126 197.502 270.456 197.593 274.206 cv
197.691 278.217 206.787 279.252 207.304 274.52 cv
cp
.482353 .647059 .145098 rgb
f
202.089 273.596 mo
200.332 273.542 198.676 272.652 198.682 271.766 cv
198.703 268.765 202.547 258.936 205.291 254.67 cv
206.861 252.852 205.525 267.314 204.847 272.122 cv
204.644 273.564 202.684 273.615 202.089 273.596 cv
202.089 273.596 li
cp
.607843 .745098 .137255 rgb
f
207.674 278.883 mo
201.615 279.627 198.747 277.909 198.747 277.909 cv
200.058 280.042 202.605 282.03 206.967 282.03 cv
213.312 282.03 216.039 277.353 216.315 274.65 cv
215.638 276.146 211.889 278.365 207.674 278.883 cv
cp
.223529 .411765 .0627451 rgb
f
204.527 260.757 mo
203.678 263.231 202.599 265.102 202.118 264.937 cv
201.636 264.772 201.934 262.632 202.783 260.159 cv
203.632 257.685 204.711 255.813 205.192 255.979 cv
205.673 256.144 205.375 258.283 204.527 260.757 cv
cp
.764706 .870588 .34902 rgb
f
189.552 263.291 mo
188.913 263.291 188.394 263.551 188.394 263.872 cv
188.394 264.119 188.394 281.297 188.394 281.543 cv
188.394 281.628 188.431 281.709 188.497 281.782 cv
188.497 281.74 li
188.592 281.845 188.747 281.934 188.942 281.994 cv
188.942 282.037 li
189.119 282.092 189.328 282.124 189.552 282.124 cv
190.192 282.124 190.711 281.864 190.711 281.543 cv
190.711 281.297 190.711 264.119 190.711 263.872 cv
190.711 263.551 190.192 263.291 189.552 263.291 cv
cp
.827451 .329412 0 rgb
f
189.424 253.523 mo
186.621 253.523 181.934 267.383 181.934 270.382 cv
181.934 272.456 183.773 276.632 189.424 276.632 cv
194.78 276.632 196.913 272.456 196.913 270.382 cv
196.913 267.383 191.495 253.523 189.424 253.523 cv
cp
.262745 .462745 .109804 rgb
f
189.693 270.632 mo
190.333 264.782 189.419 253.524 189.419 253.524 cv
186.615 253.54 181.861 267.385 181.934 270.382 cv
182.012 273.586 189.279 274.413 189.693 270.632 cv
cp
.482353 .647059 .145098 rgb
f
185.526 269.895 mo
184.122 269.851 182.799 269.14 182.804 268.432 cv
182.821 266.034 185.892 258.182 188.085 254.773 cv
189.338 253.322 188.272 264.875 187.729 268.716 cv
187.567 269.869 186.002 269.909 185.526 269.895 cv
185.526 269.895 li
cp
.607843 .745098 .137255 rgb
f
189.988 274.118 mo
185.148 274.712 182.856 273.34 182.856 273.34 cv
183.904 275.044 185.938 276.632 189.424 276.632 cv
194.492 276.632 196.671 272.896 196.891 270.736 cv
196.351 271.932 193.356 273.704 189.988 274.118 cv
cp
.223529 .411765 .0627451 rgb
f
187.473 259.637 mo
186.795 261.613 185.934 263.108 185.549 262.976 cv
185.164 262.844 185.402 261.135 186.081 259.159 cv
186.759 257.182 187.621 255.687 188.005 255.819 cv
188.39 255.951 188.152 257.66 187.473 259.637 cv
cp
.764706 .870588 .34902 rgb
f
262.111 295.932 mo
261.311 295.932 260.662 296.258 260.662 296.659 cv
260.662 296.968 260.662 318.469 260.662 318.778 cv
260.662 318.885 260.708 318.986 260.79 319.077 cv
260.79 319.024 li
260.909 319.156 261.104 319.267 261.347 319.343 cv
261.347 319.396 li
261.569 319.465 261.831 319.505 262.111 319.505 cv
262.912 319.505 263.561 319.18 263.561 318.778 cv
263.561 318.469 263.561 296.968 263.561 296.659 cv
263.561 296.258 262.912 295.932 262.111 295.932 cv
cp
.827451 .329412 0 rgb
f
261.95 273.85 mo
258.442 273.85 252.576 301.054 252.576 304.807 cv
252.576 307.404 254.878 312.631 261.95 312.631 cv
268.655 312.631 271.325 307.404 271.325 304.807 cv
271.325 301.054 264.543 273.85 261.95 273.85 cv
cp
.262745 .462745 .109804 rgb
f
262.287 305.121 mo
263.088 297.798 261.944 273.94 261.944 273.94 cv
258.435 273.96 252.484 301.057 252.576 304.807 cv
252.674 308.818 261.769 309.854 262.287 305.121 cv
cp
.482353 .647059 .145098 rgb
f
257.071 304.198 mo
255.315 304.143 253.659 303.254 253.665 302.367 cv
253.686 299.366 257.786 279.385 260.53 275.118 cv
262.099 273.301 260.508 297.915 259.829 302.723 cv
259.627 304.166 257.667 304.216 257.071 304.198 cv
257.071 304.198 li
cp
.607843 .745098 .137255 rgb
f
262.657 309.484 mo
256.598 310.228 253.73 308.51 253.73 308.51 cv
255.041 310.643 257.588 312.631 261.95 312.631 cv
268.294 312.631 271.022 307.955 271.298 305.251 cv
270.621 306.748 266.872 308.966 262.657 309.484 cv
cp
.223529 .411765 .0627451 rgb
f
260.197 283.759 mo
259.392 287.635 258.191 290.663 257.514 290.522 cv
256.838 290.382 256.941 287.126 257.745 283.25 cv
258.55 279.374 259.751 276.346 260.428 276.487 cv
261.105 276.628 261.001 279.883 260.197 283.759 cv
cp
.764706 .870588 .34902 rgb
f
304.269 263.439 mo
303.366 263.439 302.634 263.806 302.634 264.259 cv
302.634 264.607 302.634 288.858 302.634 289.206 cv
302.634 289.326 302.686 289.44 302.778 289.543 cv
302.778 289.483 li
302.912 289.632 303.132 289.757 303.407 289.843 cv
303.407 289.903 li
303.657 289.981 303.952 290.026 304.269 290.026 cv
305.172 290.026 305.904 289.659 305.904 289.206 cv
305.904 288.858 305.904 264.607 305.904 264.259 cv
305.904 263.806 305.172 263.439 304.269 263.439 cv
cp
.827451 .329412 0 rgb
f
304.258 253.318 mo
298.583 253.318 296.324 257.741 296.324 259.939 cv
296.324 268.285 li
296.324 268.285 li
296.324 271.176 li
296.324 273.374 298.272 277.797 304.258 277.797 cv
309.932 277.797 312.191 273.374 312.191 271.176 cv
312.191 269.841 li
312.191 268.285 li
312.191 259.939 li
312.191 257.741 310.243 253.318 304.258 253.318 cv
cp
.262745 .462745 .109804 rgb
f
310.883 257.584 mo
310.706 259.697 307.774 261.215 304.333 260.975 cv
300.892 260.734 298.246 258.826 298.423 256.713 cv
298.6 254.6 301.532 253.082 304.973 253.322 cv
308.413 253.563 311.059 255.471 310.883 257.584 cv
cp
.482353 .647059 .145098 rgb
f
309.372 255.855 mo
309.199 256.748 307.466 257.16 305.501 256.776 cv
303.536 256.392 302.084 255.358 302.257 254.465 cv
302.43 253.573 304.162 253.16 306.127 253.544 cv
308.092 253.928 309.545 254.963 309.372 255.855 cv
cp
.607843 .745098 .137255 rgb
f
307.669 254.688 mo
307.604 255.027 306.947 255.183 306.202 255.037 cv
305.458 254.892 304.907 254.5 304.973 254.162 cv
305.038 253.823 305.695 253.667 306.44 253.813 cv
307.184 253.958 307.735 254.35 307.669 254.688 cv
cp
.764706 .870588 .34902 rgb
f
304.258 274.607 mo
299.079 274.607 296.883 272.85 296.346 271.586 cv
296.568 273.879 298.623 277.797 304.258 277.797 cv
309.627 277.797 311.935 273.84 312.168 271.552 cv
311.596 272.818 309.211 274.607 304.258 274.607 cv
cp
.223529 .411765 .0627451 rgb
f
308.18 273.777 mo
307.993 273.777 307.812 273.756 307.633 273.724 cv
307.633 278.809 li
307.633 279.077 307.416 279.294 307.148 279.294 cv
305.086 279.294 li
304.831 279.294 304.627 279.095 304.608 278.844 cv
304.023 279.143 303.372 279.304 302.714 279.313 cv
302.946 280.411 303.919 281.235 305.086 281.235 cv
307.148 281.235 li
308.488 281.235 309.574 280.149 309.574 278.809 cv
309.574 273.605 li
309.128 273.717 308.659 273.777 308.18 273.777 cv
cp
.827451 .329412 0 rgb
f
308.752 265.73 mo
305.431 265.73 304.109 268.319 304.109 269.606 cv
304.109 274.49 li
304.109 274.49 li
304.109 276.183 li
304.109 277.469 305.249 280.058 308.752 280.058 cv
312.073 280.058 313.396 277.469 313.396 276.183 cv
313.396 275.401 li
313.396 274.49 li
313.396 269.606 li
313.396 268.319 312.255 265.73 308.752 265.73 cv
cp
.380392 .568627 .239216 rgb
f
312.63 268.227 mo
312.526 269.464 310.81 270.353 308.796 270.212 cv
306.783 270.071 305.234 268.954 305.338 267.718 cv
305.441 266.481 307.157 265.592 309.171 265.733 cv
311.185 265.874 312.733 266.991 312.63 268.227 cv
cp
.607843 .752941 .305882 rgb
f
311.745 267.216 mo
311.644 267.738 310.63 267.979 309.48 267.755 cv
308.33 267.53 307.48 266.924 307.581 266.402 cv
307.682 265.88 308.697 265.638 309.847 265.863 cv
310.997 266.088 311.847 266.693 311.745 267.216 cv
cp
.729412 .85098 .313726 rgb
f
310.749 266.533 mo
310.711 266.731 310.326 266.822 309.891 266.737 cv
309.455 266.652 309.133 266.422 309.171 266.224 cv
309.209 266.026 309.594 265.935 310.03 266.02 cv
310.465 266.105 310.788 266.335 310.749 266.533 cv
cp
.894118 .976471 .568627 rgb
f
308.752 278.19 mo
305.721 278.19 304.436 277.162 304.122 276.422 cv
304.252 277.764 305.455 280.058 308.752 280.058 cv
311.895 280.058 313.246 277.742 313.382 276.402 cv
313.047 277.144 311.652 278.19 308.752 278.19 cv
cp
.333333 .517647 .172549 rgb
f
291.742 301.071 mo
294.42 301.071 296.495 299.717 296.495 298.769 cv
296.495 297.476 296.495 295.708 296.495 295.708 cv
296.495 294.392 295.327 291.742 291.742 291.742 cv
288.344 291.742 286.99 294.392 286.99 295.708 cv
286.99 295.708 286.99 297.851 286.99 298.808 cv
286.99 299.731 288.966 301.071 291.742 301.071 cv
cp
.380392 .568627 .239216 rgb
f
295.711 294.298 mo
295.605 295.563 293.848 296.473 291.788 296.329 cv
289.727 296.184 288.142 295.042 288.248 293.776 cv
288.353 292.51 290.11 291.601 292.171 291.745 cv
294.232 291.889 295.816 293.032 295.711 294.298 cv
cp
.607843 .752941 .305882 rgb
f
294.806 293.262 mo
294.702 293.797 293.664 294.044 292.487 293.814 cv
291.31 293.584 290.44 292.964 290.544 292.43 cv
290.647 291.895 291.685 291.648 292.862 291.878 cv
294.039 292.108 294.909 292.728 294.806 293.262 cv
cp
.729412 .85098 .313726 rgb
f
293.786 292.563 mo
293.747 292.766 293.353 292.859 292.907 292.772 cv
292.461 292.685 292.132 292.45 292.171 292.248 cv
292.21 292.045 292.603 291.952 293.049 292.039 cv
293.496 292.126 293.825 292.361 293.786 292.563 cv
cp
.894118 .976471 .568627 rgb
f
283.486 306.521 mo
287.04 306.521 289.793 304.725 289.793 303.467 cv
289.793 301.751 289.793 299.404 289.793 299.404 cv
289.793 297.657 288.244 294.141 283.486 294.141 cv
278.976 294.141 277.179 297.657 277.179 299.404 cv
277.179 299.404 277.179 302.249 277.179 303.518 cv
277.179 304.743 279.802 306.521 283.486 306.521 cv
cp
.262745 .462745 .109804 rgb
f
288.753 297.532 mo
288.612 299.212 286.281 300.419 283.546 300.228 cv
280.811 300.036 278.708 298.52 278.848 296.84 cv
278.989 295.16 281.32 293.953 284.055 294.145 cv
286.79 294.336 288.893 295.853 288.753 297.532 cv
cp
.482353 .647059 .145098 rgb
f
287.552 296.158 mo
287.414 296.868 286.036 297.195 284.475 296.89 cv
282.913 296.585 281.758 295.763 281.896 295.053 cv
282.033 294.344 283.411 294.016 284.972 294.321 cv
286.534 294.626 287.689 295.449 287.552 296.158 cv
cp
.607843 .745098 .137255 rgb
f
286.198 295.231 mo
286.146 295.5 285.624 295.624 285.032 295.508 cv
284.44 295.392 284.003 295.081 284.055 294.812 cv
284.107 294.543 284.629 294.419 285.221 294.534 cv
285.813 294.65 286.25 294.962 286.198 295.231 cv
cp
.764706 .870588 .34902 rgb
f
276.234 308.944 mo
278.636 308.944 280.497 307.729 280.497 306.879 cv
280.497 305.719 280.497 304.133 280.497 304.133 cv
280.497 302.952 279.45 300.575 276.234 300.575 cv
273.185 300.575 271.971 302.952 271.971 304.133 cv
271.971 304.133 271.971 306.056 271.971 306.914 cv
271.971 307.742 273.744 308.944 276.234 308.944 cv
cp
.380392 .568627 .239216 rgb
f
279.794 302.868 mo
279.699 304.003 278.123 304.819 276.275 304.69 cv
274.426 304.56 273.004 303.535 273.099 302.4 cv
273.194 301.264 274.77 300.449 276.618 300.578 cv
278.467 300.707 279.889 301.732 279.794 302.868 cv
cp
.607843 .752941 .305882 rgb
f
278.982 301.939 mo
278.889 302.419 277.958 302.64 276.902 302.434 cv
275.846 302.228 275.066 301.672 275.159 301.192 cv
275.252 300.713 276.183 300.491 277.239 300.697 cv
278.294 300.903 279.075 301.459 278.982 301.939 cv
cp
.729412 .85098 .313726 rgb
f
278.067 301.312 mo
278.032 301.494 277.679 301.578 277.279 301.5 cv
276.879 301.421 276.583 301.211 276.618 301.029 cv
276.654 300.847 277.006 300.763 277.407 300.841 cv
277.807 300.92 278.102 301.13 278.067 301.312 cv
cp
.894118 .976471 .568627 rgb
f
236.027 302.69 mo
238.705 302.69 240.779 301.336 240.779 300.388 cv
240.779 299.095 240.779 297.327 240.779 297.327 cv
240.779 296.01 239.612 293.361 236.027 293.361 cv
232.628 293.361 231.275 296.01 231.275 297.327 cv
231.275 297.327 231.275 299.47 231.275 300.427 cv
231.275 301.35 233.251 302.69 236.027 302.69 cv
cp
.380392 .568627 .239216 rgb
f
239.995 295.917 mo
239.89 297.182 238.133 298.092 236.072 297.947 cv
234.011 297.803 232.427 296.66 232.532 295.395 cv
232.638 294.129 234.395 293.22 236.455 293.364 cv
238.516 293.508 240.101 294.651 239.995 295.917 cv
cp
.607843 .752941 .305882 rgb
f
239.09 294.881 mo
238.987 295.416 237.949 295.663 236.772 295.433 cv
235.595 295.203 234.725 294.583 234.829 294.048 cv
234.932 293.514 235.97 293.267 237.147 293.497 cv
238.324 293.727 239.194 294.347 239.09 294.881 cv
cp
.729412 .85098 .313726 rgb
f
238.071 294.182 mo
238.031 294.385 237.638 294.478 237.192 294.391 cv
236.746 294.304 236.416 294.069 236.456 293.867 cv
236.495 293.664 236.888 293.57 237.334 293.657 cv
237.78 293.745 238.11 293.979 238.071 294.182 cv
cp
.894118 .976471 .568627 rgb
f
296.541 286.627 mo
298.384 286.627 299.811 285.695 299.811 285.043 cv
299.811 284.153 299.811 282.936 299.811 282.936 cv
299.811 282.03 299.008 280.207 296.541 280.207 cv
294.202 280.207 293.27 282.03 293.27 282.936 cv
293.27 282.936 293.27 284.411 293.27 285.069 cv
293.27 285.705 294.63 286.627 296.541 286.627 cv
cp
.262745 .462745 .109804 rgb
f
299.272 281.966 mo
299.199 282.837 297.99 283.462 296.572 283.363 cv
295.154 283.264 294.063 282.477 294.136 281.606 cv
294.208 280.735 295.417 280.11 296.836 280.209 cv
298.254 280.308 299.344 281.094 299.272 281.966 cv
cp
.482353 .647059 .145098 rgb
f
298.649 281.253 mo
298.578 281.621 297.863 281.791 297.053 281.633 cv
296.243 281.474 295.645 281.048 295.716 280.68 cv
295.787 280.312 296.502 280.142 297.311 280.3 cv
298.121 280.459 298.72 280.885 298.649 281.253 cv
cp
.607843 .745098 .137255 rgb
f
297.947 280.772 mo
297.92 280.911 297.649 280.976 297.342 280.916 cv
297.035 280.856 296.809 280.694 296.836 280.555 cv
296.863 280.415 297.133 280.351 297.44 280.411 cv
297.747 280.471 297.974 280.632 297.947 280.772 cv
cp
.764706 .870588 .34902 rgb
f
291.659 289.756 mo
293.502 289.756 294.93 288.824 294.93 288.172 cv
294.93 287.282 294.93 286.065 294.93 286.065 cv
294.93 285.159 294.127 283.336 291.659 283.336 cv
289.32 283.336 288.389 285.159 288.389 286.065 cv
288.389 286.065 288.389 287.54 288.389 288.199 cv
288.389 288.834 289.749 289.756 291.659 289.756 cv
cp
.262745 .462745 .109804 rgb
f
294.39 285.095 mo
294.317 285.966 293.109 286.592 291.69 286.492 cv
290.272 286.393 289.181 285.607 289.254 284.736 cv
289.327 283.864 290.536 283.239 291.954 283.338 cv
293.372 283.437 294.463 284.224 294.39 285.095 cv
cp
.482353 .647059 .145098 rgb
f
293.767 284.382 mo
293.696 284.75 292.982 284.92 292.172 284.762 cv
291.362 284.603 290.763 284.177 290.834 283.809 cv
290.906 283.441 291.62 283.271 292.43 283.429 cv
293.24 283.588 293.839 284.014 293.767 284.382 cv
cp
.607843 .745098 .137255 rgb
f
293.066 283.901 mo
293.039 284.041 292.768 284.105 292.461 284.045 cv
292.154 283.985 291.927 283.823 291.954 283.684 cv
291.981 283.544 292.252 283.48 292.559 283.54 cv
292.866 283.6 293.093 283.762 293.066 283.901 cv
cp
.764706 .870588 .34902 rgb
f
286.778 292.885 mo
288.621 292.885 290.048 291.953 290.048 291.301 cv
290.048 290.411 290.048 289.194 290.048 289.194 cv
290.048 288.288 289.245 286.465 286.778 286.465 cv
284.439 286.465 283.507 288.288 283.507 289.194 cv
283.507 289.194 283.507 290.669 283.507 291.328 cv
283.507 291.963 284.867 292.885 286.778 292.885 cv
cp
.262745 .462745 .109804 rgb
f
289.509 288.224 mo
289.436 289.095 288.227 289.721 286.809 289.621 cv
285.391 289.522 284.3 288.736 284.373 287.865 cv
284.446 286.994 285.654 286.368 287.073 286.467 cv
288.491 286.566 289.582 287.353 289.509 288.224 cv
cp
.482353 .647059 .145098 rgb
f
288.886 287.511 mo
288.815 287.879 288.1 288.049 287.29 287.891 cv
286.48 287.733 285.882 287.306 285.953 286.938 cv
286.024 286.57 286.739 286.4 287.548 286.559 cv
288.358 286.717 288.957 287.143 288.886 287.511 cv
cp
.607843 .745098 .137255 rgb
f
288.184 287.03 mo
288.157 287.17 287.886 287.234 287.579 287.174 cv
287.273 287.114 287.046 286.952 287.073 286.813 cv
287.1 286.674 287.37 286.609 287.677 286.669 cv
287.984 286.729 288.211 286.891 288.184 287.03 cv
cp
.764706 .870588 .34902 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (\700\755\762\756\755) ()
%%Title: (1508.m00.i125.n047.S.c12.252107416 Isometric 3d private house, rural buildings and cottages icons set.eps)
%%CreationDate: 8/31/2015 11:25 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj26De+!81>hAc^E<h%S4^654.Tm%O+:'C`(m4nDg!&Hd]g"WorN2o/90tB^gf[C47gtZSm],R;g:FlY_1QR!>;'(CkLmk)
%<`:N'P?K[u/S.!4_:&>^lbS2iPln5Gdn6Jh^E%a`QMF"L>P%-NrDo]S[G/5][F&`mVK0G/p!dmL*53l!5'YUmj.B;Z=tEsr1RW+G
%Uen%:Kgr+Dm%j!T7R6!e*e)juVk=.i9Q59_>m&HIfBE8jco6r2Ya(1X#uLK)nEI:/`Fio<T;AO)^F&koI?me#^D?h!nFMu8lmB&U
%o<=!VZe-aN.ZHIt[$hWsB*#_?jh8!0\(Y8<;IM*NfNCmV(JCa@-:6GYPRU.hqP1#Sr0qX,JH'7Ni;[5lr_N;l:DkUFa4]@ritsg9
%Y[Jk0pf^`0LqWm$Z9Ur)GE9C?ZWc^?1nD2f1C-3Q,/]Ij6^SgaF/c'S41/Oe<nar[Q;51%(OoA#_s-oE<kNo_;_Pdmfk[QicEoWf
%Q2e^;=tk\>BaT77Xa7+Yoh#Hk`Z;TP$+l2&<s95S`s^EA9mMCYqPdX<'jKj-#@t5>mG]+eVB!k\mWH"I;uGaN1^Z+]?IPqs2;Sq>
%.maKhFQa6[+>dK&Ws-s_\o(.(An:o=?Ejn)_!bIdeEhg8m^4P-Q29d'"1)b.6Ab,2X&9ER=6_5iIh33+-h>m^s!h9)nkR6+qoB0D
%,e"^q"'U$F&;T,DQZJ-):-fhKc$FmC/<"?(>^[Rj6Jk'Fh56p#!%4rhn3Eh1*WQ)iC];U>froSXbH4g?gYAs(2?*Sj+]E9KHDu*p
%WRGOsUm=r+Vr-I"`RMb;6e=OA[eAB.iNFj.YGEr^QD+CQdBI`j5/glr;LK_*#>P-P!k?3dUkHI7n^>BKF)_>'^pB>nic!dYqA&um
%_gdk4%uVHM;V8fu6dlnp`(OhgDO*OS9LT*^CE)a\r^nucI;RPbHIYIua7hfqMY2#T\CbOC_.CAbX;>(iqVi#_\I/oMT;A5.-Seh&
%VKalc(OV#c-^_$J0_/!#-X]jU#t]e.XGS@K)*LB)!YRs\LjYJ$W++okN/C[i\,Vsa6LocI)#W"VgBTk!Torf,poASlW)hV0_Fl:^
%U:_ifbY[/5>qI*L^mVfdO0hkaO`_ib21!9Z0179pEn%/8/W`M%_(6%W#nTbNhi?<gn(!iRX`""[Fjt)(s.%cR&S_=*L(ZbD$RCuc
%JX.(W:!u^c9jiYR*>AX9D\RPl1p>Do"R:pgFZ@EJ@@o&NX-N9WZ$B1qh(/SQ7,Ri%f8*O*;rR01,iS(LTu:5fD^'m8U6X/"V=5cn
%U:KK3aV:L=@>]JeA,?$oYsd8okpn-P\U^]YDoe>5<2lJ=B"8!Bb8$mnBUcnhMOi0aC8Z++.^gh`#fD9]I9*>"n!uN+<]V;6AKoD8
%dl6]P-#>`gL]f1VPX[o%G$KiF*26l4J9r/V+'2K43gN+m0+ZrW5mZ,Z8E!/03OK4/^#.Xk%:K6bc<!X%eJDH)7XVV0>51mq>)+b4
%J>]NlBt*,R;m6Z>1Ta]_[nZ+];D#Aj3jm=5:U]S[n4W],q1XhJI(:@VmD38saWYb05E@c"=fcdHX+)V\cG^OClGX[N!X)K7jbY>H
%_Q026F:qF12]NVoRI([7`1!l;=d2YJ7#\"J;GKJ!2B!BK%196^.@AL>S^AXU\2jY1Z.@s015Rts7<t,bs%G<W^ClXt/"gGfSs-#q
%45JJ%(Lj/&2jtEXe4=0SSWAc'dA4.^G.3o.:&5=>-D>.u)GSLkZ0`90hN'9_A.j1TBg460lA`\V"oP1D"Lb9M-9%-ea&qYI&Z:\e
%WnslFPrcmVM27$I:8i!36<jpdI'fmDN^bIW#i<JP5F.]tCiil-Di97M"R\`BM7ZV,T;5bL@"a>*dq][A:e<oEfQ=EAGbol>&rTPE
%55+Z4CXef42?e71QHLjg5q_22"J4\fZdd\kZC<g_VEV:AkE4R_ZC<*PAim:[CDFZkXM/ROg@Ns7+>Mo;m1L\Vk+UVlKm!bRffZX2
%LN`:9mWV\+4LG"[L3=P#oT[jmIMn/pU@s$n<BD=&*J(s?n(2U4Wm,AH-s9^\COhR>_EfB@'5@?IM5I/tO)K<O`m4c/4O@8+`ffW^
%B"V7EVtfSXR>^t3SRO+C'@/8NkNUP2bYGEBlINOK_OZ4SB]F)p2+j-%C%FiD9f.eU0A_._'FHDmD<5XJ^PZ3SMiO+TX;7#dh\ODs
%$J+AeRA-A=fOcKWf!)sIJtH3RriX(Mpid/TqFB",+-W&t^Z"rMr3CNIWF,$Y`jB4(.sCK?6o*26>bncseOgJ1==R?EG^:V9<FO@]
%-#F8CNDo:.;.QZ[NAZA<egn-r<bVW1rR:%s94=9ZH^Q-N<mH%V.s-(h;3iceHsCc51+#q:?5.#p'pD>DIOFqRcMYX^Z.j.tMY6>d
%eBNXVQuqS]\O>>_1U5QRpl1!%P+V$olX%!7VcXO909J8/=s-+kmkT`M?&hdrP0dS^TtqS@GFX2<X*2fu1mjJ$_c:amUHqS3Y*sV$
%=DUtu(H&C[`0*ffPt^Ng:R-o5T[3VF7WKD+,-Er8f24$XSC:cIFm^D/a16iG=NpN$-Zoq[_-r@\:G^8iOCK!MpQ,W#B"j$_ha="(
%+j]nEYF;A'g-[3FLV(X=[[,;:c1d4<^Mf(C`l/'PrV=1tI,F_.k$l&CHj)D!IH,;RgU(P/VLIF4>WFn3-92r&nS02_r?1KFlO;R\
%6SO-aXC]'?fR2ufSi';QY#0rSY+B2"oK=qFeF?F43bbkMj.bfTh%i2CZmm+oLB]7T]K/(SFhJ;Z[Pjb&UQemXh3M?81ik@sONfRl
%@gR8kkeS--P?IK6g#T$PfP%IZ[lgk."pW@WX45=Xo>]M18u(ZoellC*XjJWLYM>e@kKi;dZ[)O$L@7h!cg1dkFKZ%d,tpBhg5aEE
%3=0@KrjPek-G!&*BK>339tir&mS:'g_j53S&ILL@PeT#>@P;=NdfK`&*jSRfaGt2jJS:m&CSq]_["4fV9e"5gOlktZA:1(HEWS3"
%dtBFL=p0S@bS)Z$`60`o1f(d.'//sqbH9kK0[7Ik(R9]Jr6%4m1/GR,'//sqb<W*c"!n?H"O]D`FA5.5<PUE@)5M&en.VFVR*duG
%B'2#=Xf%,tWL9X\_MTV*$r$MO'hN)+?W]#pV1]M3@E#<Rgci&'<[=l<Sp^E;X`X8pPq2InF5o6r$>n4Nj8:g5aY8a]E19dH4Z0^,
%;\<e>O_pWGi\XlK3*g$#k;PBFDf?Va$Y[f5$XOJY1M&4aeNY"=XY.l(q'%E'?-BP49@Ms;\+!EM;s/Z#Q7Ya8_'Q;UI&CZlleh4b
%fG-+CDhCbR`,*1!G"+*t8FZ&l.DGF`FqUJ>CG."i[FR<!CO<Ba6BXSEP`mNfneb_sS:lVBQF/hEdlJ_O.sP@XZ>OsLKG=L9VS)VW
%Xo6@B>A)JUUWg."X/FKWl#JApTLQ7iWcW]lC?\-H_67CIZFJ`#A2.LaqS]GuKQKoB1+JsT:$!j>?PL\CIrbQAnX=^O1NR,L^LKp7
%?q9;8i$(j=h8&q`^EGec7%?*+hs!(JGP_8ZOm&mtr-j1lQ$sBX%7n3FiPdDB%%`b?&m2[>BrO<^AGWLaR8k>BDGR1IT$HPJ3sc\Q
%<+!+UNVeD.NS!RA:QWnNU49.<1d=8iEAi"&;W%'ZjRZpV"<D<IoL!Zj'BG?s88`m.I.D+6bat&gT-0aFa%9*@PAVB'-cd[Q36k<]
%cgB`1`EI?;3"*07)DfIL=5B3JWJkn-YBQ.WdUqWbPl10ta/rf*PnJ)f.[E-7lK^nc8\E$gNKf?oqe=-U::N*$e8:b"X'Rs2eb2qJ
%a.1]nCh0(PgKpT8rTF=Q8^?SnZl^*$ou:F<dOAJ0!>dh6K^FdLeO6n;a'+NUi_0pKe@W+Ocm_0m;&*q1AlCI*V+nBFY8*bC"?0"J
%KannJ:&Pt%.=dASG%t?0E?.2,nO@:%So,&f\XVm*Y1dRV%U3_4XX7ZWG)TSoqI]U5g!noAZ')nNSbTfC<bC<2M;-3/NJ3n9J&)H>
%.DB?P)LfrLMqZBTf)<nJR=\-Gge'i+0L2!gAME47"R.1%OJ^Er^7NhK]X!HYPMj7>[&p(%GGo/rYbJ545P&'48o'C]O%Gi":@U0_
%lqTum;GST0K+l)iP,9=2XiIM;$Jg$m?n0^J/.#H_VR4jSMqQZdbf25H@eQ'iG-&Y+']S&5i1j>XhEFU'#)3GKq<N;`'CVaA>k[43
%LKgW"n\J1af9;f(4pK7AQ+U\.eTli>]CJ!9Z+QV?b?MhkVI#i^0Ba!G]pQi>n)(sJo-A8Z-iWCls7q"cVGUXD@-)<@(@L`Dh=,dc
%-?^`5VHR+qZHG&-<h<AC:P7A>H*tZ<":?5Egf;(:O!UlfF(NJsVQ5itE&AtI^RV\M[3Y?0c,N1DZ2.8df2W2-Y516!<^PWg/]Xb3
%lNpTbYuL#>]%(8Q?p<.d>\#-8=&Jhld9dP-UIgER*uC2C!a.'%feV_kj!(8[264\A#6TkFEhu^F;SC+_-tkXoW[d\IG?1[j]':%j
%i"\?L6rOh74"es]Q+C$jE5c[n==rnuP%7T;9bTQ/\!%"Fegn-r>42(s1"1SJ.oDNlklKY"m[r9,g$&'E1<`[pUBQ?LV`MQ'*</W+
%T1\.M@I*jfEmqmlT,ZS$2YauJpt+"j&feHl:4d4!"47(a!OQi!\8.F?cI^i'YIOcbJluH%$!8lgF7V85opWdp,W/nD[`7'UQ5-L7
%X"G:f(G2lp/8,dAQ#;aAZeo`7^@:JoPZt:!airR+^bXL+N(0jndAStK'5T_S2;aC/5'sI.'!PcHq<",aY5'DOo*J?B0NqTXWK\(0
%?V%RDQg?(Ek/'dbg7b1u\B&*Z"P1ZB\SP&2Xc^TR9$.eWMZ#3(H'4tpB[Vg5<qIYYRH1Z:1#>onN//au6bfML=dWP\2%=FjZ57UX
%gOY9^5:)r__PTo>F_V[ESXP]8f7s%,ce_iti_-0.DeWNPpbM&Vk?"rJ>][MsakWu3Z?o&?!kr)Rr]9?J68sCboooS!&9Pa<UNuLh
%"AJX[(h6&d&J^KN!K1KPEO.ChD>>%GNQV1$ec0F&1[uf6?5]0D130ZhD;&Hjl+Tu'r^+m9%EA0VR(n_=6Gr_<eMh\1E0fD(3I`::
%^W&6.@h=$Y9^ce(9/L?=14Ku#/RgH<#J/<OPM%H6R9pMjJ4U'-WQn-o`pQmR9/S'E^<]G0k+s!*ikWmt$T?2eg$QGpDL00O8Xl,P
%9YsNMUs*>VBo(;Olg0?\K4d.&EV(g;<Vo"AUW6?A@O2T*M(cP66H![^5"T]kFe6ttH`T$LBM>3Pm*%^a,7+hNN5ifU][O=Ok8B8)
%7UskYAtID;B/HJ3US5q17O&L"e!JITb80Up$Gi>d,Kt2\2W']Dj\=VD2pZ[&)O3*tdDl*QNR"IQd\H8$Tr1@8,NsMk"O5;m<%Y5s
%h^LFJn!$G+6FcDa9&5g-3p#g18>[RX4u"fW5FDA-`&LiAr65T?G]+Yl>nufSn8@CYhE9Yaa*Tb_JJij'o?9XN$-K71!T2rAHjQZe
%*q2n.L6r3ns(d5K!T-#t9,8b/=UOq9n[a"(YF<KS&-"L]<PFF,cOU(Q98L&4$h_]"QIfqCGtH6EUoub?:2o]2b2*pk/!\_qrO/@j
%>r:#2=*i+M+&/1B9+nVVe_#PWOh(%Od%rL!?N8atR>%kXAJVErR>'F'&o!fC"[9o/?CAWH[*r/;B:_ZY:Ae9ki\=3SG%Lejk1c;f
%\"/q[0PA+j3?J,Q$YNu_d*PPa@]qN$dHf\!F/Il!ng$k<C/!eVK"[Q,7Bp1nWeXp2.j`A=oKP)`qD&AcBs(6=s!)$^2YftW=Y5rP
%RTJtE(7S6:Eb\&,0#=.BF@8.rOr>!P5IHaU-e7rg`'02.Q9HYciV\FoXPP>^e0YaABhRRKn-ub:_j&)MlaP>G3/3OU%AqU!CKVj0
%4n5R:JV;k1Wh6ZKG1Q5ss!GgVSlMf@A>N5TM9_<,)G,=N`^FU&ZW<ieA1jh6\EG>As!drYb)qN6ZqdlkE2@QtEKO4=e.\pJ@]@kZ
%Fbf=!7qmi=*Z%rc$rN6OJ+2&X`b5_>mDl(B&r:!WaXrS/C0Y;V4GmJZ9N/K,ku<*YR\?D=\>ZE.l<Z3]"c9'b[C"[ZEaMqEl.D`I
%";5qDSL<uo<4fD)(<(TrQ:Ru,h\HDPE$9"2-7Vl)iEFo;W'j3$:",EBQrg"U;LZ&2$^E,sPjZJnp"??5R9udKSY[_Y_&gV/(1fTH
%@MW]U'"F6+;N(+LYrYf[MiqUb9TAS4f:pK);'s6BbZ$/dBdRUm`4qr\-'@@HnYUJ9M_];KXYd4M)<b4!6nM"TI6I,$IZ1Z_e$)J$
%NAWSM[)Os+F.@;3h(R&G<(f3CM<VXS@X9B\<j<Jh"uCD&+l/Z$=F<h(h3o^0lSVenB[N!=c_fg\S6LB/i`PF7>$%c!)n84IXIAj/
%f?VSTh4H.-"Ku"$F[_XI"`m*k=*/LP#E%q8Am8prS+Ufpn-EVLki?l]^(7o!TVIbe"j^WmC\4+2s*EN!m:T]'0%9)*G(*H)2U'XN
%HK1VYrJ$NDnEI7no!>^ie7WJ7nA3%Mi%KJdi<rS:cPHG4J#3)I.*!6KRdn9fX]b=KY-c\"rpY!lpud&;+U@K]D7e6IAI:Ul9BQh?
%@n@%l8Ahhd(Hr*ll4u^>/hEJ7\n/IPpDN<eW35%X_V\\:VsaW_-RH.LDX,[e/QMch^-'1KL69Z0i-l9jJ[5oY%N!e8@E<--mMDp1
%VrKLOqklsoYX93pN,(KZIF*(ALC^O7Cf=c"bgcmge'sep-Lan?rn$>6B`VS'_"[lj)+j\Ohgb$[#4[*"Zdep80TQk0<VW]rCaur=
%?#oDBP)e0#$b</h-1LX2r-e6;BU\d,59$mi@-[D1Gc0!Xr.`_pcTHFDS')/)1jsZEX*33q@TWR_]$u)"=,ikDb;W%!gu$<l42BVV
%-Vo*i/h6cVAi]o'Yq#pj^03rmj$639YI_9<;6EgZ%o.kJ_ZqOs&*rVHT>aiXD5:$^`q[MDY9gu]*WL9I=dA47(::,#8seC*+."\O
%Rk@J>JYs6o%=e"V&$uM.3V5@(c>O:adH3A:'S"DmU&N>iP@Ubn'MfCl?QpC[ApWfqE.+ReqD5Zc^p]FMn472kg[6n5';5>B<CBpC
%7<D#HL;GuF/uel/F`TP=W5eiUT@mDjmB_9h5ea-]PIITXdd3oP9=Iep%_Q7n#fVYWYs^R)DcmuCAVR%@Ub(1,QO&Gh/!n7OgPR0'
%UZZK).268G.5[IHkQr2r[NYj'9aF=`CpK&?0R?J5*H3QQ]X,miX-2Cs2BgQLd)>\jU`;B:9^g6;0g.NIn_q[ic)j=-<@_CPF^j]"
%X&Qd+XlG!FD*AO>5TB38N5/2nFmaCfRDP1`HTRjUbl3B0.>=FS<#T*1e15J#Er2sCc?LP)ofY)Co!*/;5lW-5$R!t?Y4G@UE4#F/
%coTkt1n't-Xn(A&Bq\)`ae2EK\_;OTMq(EIR10\\:'P\_-a23<S@?.S42FoVKL`-B7*mnsn^JMif3<pu#:>/I&O,>k[G/jR^jAXb
%FJI).`Xa$QB)HSR-?4r,&L]+$8Oj.8$F0<X58/T<c0H(e`QhKV[+@U`rF9C+Q.:=iU*U[k*FJEkWooX%E-`>bgsSpQ;&EoRh,LZ0
%3GfI7j\uQ:<_?/YL2CeN19@P2MJ1b,rO)d^4gHN(MS?(WDqM,3Ysl"OoNJ5;KeEDsO3rVa&t<uH`Ho.!CuK4H0N+_Uc2X9#ifK%[
%9k./TL1:@GrU&<DZ2V)^4q*2_+Y?$Vp;(3aXe/qbaSSa\[99YSMPl_qRp^mu"@QY$gM(gmWInZlj0dB?:E=]I7^X1DKs5"sm<\/X
%;3*8Ug@`URDCtG(Q\]/bY/(T)BU<Tm<N)W<XM\9S&Y2m3T1aiYhuDV0Z$tO]SpRI87^LkA"ieT-X4fNb<Y)iT\(V>^M[TF`B!.j@
%+9229dHpZa_Jt&OV(+`DZ/^CcHaEf5]_,jL;7^QDn'>3t!9l[WDZh\&\QMM)<i,qLd.dZZfKR0s@_(8UEin!.m$3l[ZdJ#S#QA6Z
%*M(kYA\+F%0[nlY8G8G;6a-?\fRZ$a,e_cP^.hrF2X`rdSOTS\`<hU5Nj^pa9a)NjQS9T3=uptQp+is[kZ4auFM.3K38sAoJ<_<W
%LYZPUh94=<70R:?n#+cP@cbOn<;$A;'73h@:;&X@h+@Ec1A/*CjUMfN[kB4[au*qY@OJQf/G8&\gZWLfnt4=3N[sdCj.Fs<pGAkf
%PXSAL5Z;F0L(!CQH[=8AQG!<h`J1omo2dDG/7"udfDELK)f=2"eLl*Wms"O))6I<0m?j?8QLQ])HD-C^U"742%uWZWT)ut&+dJ$J
%Y.l3cXsq')r/Q*'SVeh%?+\ZiU<beFGtRZ51U$J=rHjT.^7Djd;l3>n;E")UL6(Bfk03WadU]Q2&"2O[KWCG)9]]SDib(t!U$*kR
%cDT"!k$\$#N#DGan[f=#K>lrPkMiQ*\q=.6'6rUu"'8[?gOogY5_kD2]aKpR^b#u+VA;ch_U)r2<5t1e.B;35o4UBmA70abJUhts
%K(`$QZIRU,r:GAJ?1eh<`?hIfXLFdO#dhYbLX$kt6F0bq@g`LM"!"Hj_24f:X>N)SEaH0-:-QgY#5BC%H7'P"%!gt`IuG>L0;;[7
%CBL&4\`R`XV(SkK5sb[?apj@_Ju57'bd@6VA$<T3m@Bm)0*WB9""<S+#%l]+ah3u"8CJX>K6C)s]1;XkZu,f?fkA2/D59L*Vq2Z^
%<gqY`UEZ7[rcOO8lZufPhqcm[%`)0,lRNn85uE]/3X\7Zn>PjalVtLFC0Z&en.p2CFg9f&Uql:Jp<0)oa!3PuD`H:9g@9W<eH((.
%_Opu3Qlh5G!PS@Q_+h+dQ[E^;*-jl5a6%k4@44=80ui=[[PAQ?(_/-<fiNXNoh$Y=Iu8?3hGDKTrQ)8&Hc#.^:R#g99+@tYq@<_>
%kHJbh8HKMsNE4^_%p2o4-a+J[q"MK/f`B<F=UFf(7Qp*2bEFWLpuHe^1jrQle;?du4>mZD)f=IpY?e#$;&UBdB5-3f%aE`Cm;'\l
%A\5.Z(k>Aoqek/@,t>2tCKI5@Q"k#_<Z7NeW4+pkBrUglZ:E78["Q!__FS=5IB\u2D/\QQiS+!_SrQjSp5K[?*4l97>.@62GLS+O
%g1d],*8Rc"Y6U2i(c2oUb*U9E0Re&cDS7m,NE=/.doTQXT0=4*i,a4A"b4eCL1R@1<_@e6nGthgO];?i6]4-X\Ups`Br3,s\Ns-u
%/_V[Xr<Iu*7WSh9d(%ISG=T&SpSur](8]%?(8s>eGD<Yg5lq'=;,N9cdAV]Kl*/_[5-/K;;6Q4U)V"DlDs<&QPb+bS^8?I!m:k7O
%9aBkdQH'Tc#d)feVl*rK5M+Z`U'ST=2kn?m.$8F-]G9q?6Y6&1)q@L?@Z#5'_n(%um"Dum"4^`tPVMHAT?JgiO5&:#->2u]XG#'r
%0_2GB\_:kj2>SPKrcSlZPsEU',&UqCk+,nR->6Wfj.>$k757B\]G"9_UDh0-)/RGD@=;<q%2DBLLjf@UlXFL[(h)/Gppl[dfeC+W
%K=?SM^lTJL;*(f;lt]_scHopV(1n'-e'o;kMGC!H*H'aO8[<7HCO%5+D%+c\22[m!J[8HnQ.+s0<K#,oc_M"'L('%.3gJuLrJllk
%V,Da*U?"egC+2\*%b>^VY#t>u!_,)\(eJH-497O:Ol+V1`K+l)NHSld(h5?5VrgFCp"pA++H-IoIakqW<En_'+[<(qkVf0?Db2*a
%)X:Kmduf(tqToi+j=3*XE%ABMgJ60Tl9c'PGCkRIW^:`>QY!@+3NnKS,kt/Lg;b-^$J=X<TjE+$U>8$?gVjMpLNF?[5RX1n@>!Sg
%j'F)nPX`Tr6q7o>[mZ)mpn"Dfm]*7-6iVH=bIk[m`PEeJm$K!al3$]*1o)+>4Pm>J.rC5i+DS(a3XF(F1i^pX2"(cG#d%QU"1mUr
%YKa<!%7a0\MHKXi9>q>$K(HhLJWW[%MH:CB"@`&)#9_C]<.-Sp5_GG?E51&<fdu/MX%#'2UbR's:Q@lM5E"%GPW9Mf*'R_,0cVeQ
%UZFP,s%s7scnOI,X9Et)^m%g<Dk2c%!rd(L!%0nQO'Smdr!du!)s=!G?jiLV<nkO>LILL%`WQuTpVZo.Cu;t.1dUrh0,+%@OtQC6
%U,9hlrN^FS%;o:4dEucs($5bq/-#.>qd/U4/&e5;^K<bbWQ]O#$h%H=k/DXL<=]KHbi2Fc?kt?Cihr`F@<c2^TYJ$eGl>JRYp?)M
%]*L\j+2CbIH?3lL$m%@dmIhpr3-U^K7@WgN!pWTn)il3%n<JtC@nG)IG*K)QWJ'+o/>3m+TOQpik"[`&pch@##<k5Ve0C.Q755Y%
%12;r9A),mZL;hkObqEgtQsEfcnQXeC@7Dq$/7bb>_VB".;Q&"q\uYumb7cAK9)Z'LmXW$1<H$;RDV$O?Gl:$09ggM8H59&X=:\m<
%"dMp5feB2+Q=_UFDOeT?aVQYR_Wo$.ll7>A"&r36O2$S&!G!]E=dd1_p9nJmJ[@2g+S3Br^A%-Gde`L_7r-*<b:ej1HRmd/elM0I
%ot5b:A`:r*_P:A4Qu:fjhnIaMn#^K?h0QMF5%!.Ar+L;LeLen[VS;@Y&>j_Ke(XWdq=A1brl3[Do](r(j^rk7rCVP@_ecFAghHSd
%??WX;0Ac&3XIJ'TY4D3f.A'@"3q"#'Vu-Q"Pki1K<V^X8PQ1V.COTMkcI<aomEG94k@3\DIBQkrS+huMhlDfu@@6t\p@<<5Dtg)T
%-JuN4oJpuW9>A)be7cJE0,s5DKeFCGm<!1o^\ja/=P,*q_(`g2_RG`BDZ9"GZ-66-Wpa$8Z59(eL&<?.*;T:^?P5Fb2V+Kb3p)G&
%l#uL\q:>guHMA`"?/E;Z?#dU9cQ'+CX"tCWMrcQ"j*k?;.W(KQ2[d/(o42]$o>#U\P^U7CD.t6hk\VL+FWWhpp[[1[>,bK6`(uYp
%c*NrK*a35QMR$6ms)#17ojp-fIIR0^8o*[42m[T#n-9T1\?Ybu_LQ(][<Gt91A0(jg="I+[3r9Rq.W:?-g`]7djf3mV9;jNFBQc$
%Cqg(ta[_pb2RN$i-242@P:UmL0!$UNfrEi20b#4J*c0oGfC'_u0"Vm*nrqu1AD__\F,d@rlgMug<qXpg?`;jpo`mb11]-]*S<ctE
%Z2LP[XEp2G>dRRsJA*Q&B]@4Kh>EJrqSU1@V2m2J`l9[G;D6N&L=&cbDO^:Ad^-g%qQt^aq23qiQ8cQuDu']e)^P3l[e/q>k-CS.
%If<;hFSp6/Xo/.j=.7A6A*@haC\bk5X6e"0KeFSV@c?PP[dm+D=a.1I'4Q1BCHjcFO7r<Gjs^7X.=_'PeW7san^7<:IJWYs]Dpgf
%gWWtV]:V;LXSg`GnR_A5L<5l+N_Yt8+78X>bnIAS/o/2IlkT*KO&'e]n+MsQZeC''6LO3F!$4?$-KRP(&J""Eri!NQm-Qoa<QHhZ
%?SQbP?Lndp&a2(#DjI!0/,iq>T%QkYA*p492fnVse*SNcLUe!lplk6^FiWt9&6@.a%^5`^r)eDeY('Z*T%==A2[kk%ol'/M4NPV(
%jeZe2rRs>?ETT_<f:NHeTB@$X0(B7IM6cF.c;s)gV'*<O?YZ`l.kI4(8nYO(UQ>92rNGOG8Xq#KpV?G/$P/_b\I8;mEcYqB>mTO,
%f"m+G.@\6"1(*:NXKL8E+R\)qmegP#/_<U5%l3^NIb[!qq_+u<@\)E4g0@cEFU(X!Hg/5d_(_:Ph=;1,RqHV&]CY!%&AHXNdVeB'
%4G1VZWGD?r\_Ac$Sc-FbIW_cS[m'(McaLRHAOmtY5Zd3OYaMt2em@$V8%L'"?G'L>;=dSt2'6JGGKR=0[Jm=k3P'Hb+8U5i'Qh^W
%>].4*$P->"Vp*!1`?TWobJUEpZu_p?k@4GWd0go_D-X;;gjJkqKs/m4KNDN@N5EU1e+]g0^ZA89MrW%9#GlUVh8@IQdAO#9]t1LE
%g+BZ>3)%ttnPWT;?7n&bL%R%&&5i*B%iuO^C]W9';;FQ#m;=O=rG`f\St9jtTGKZ[*"_`Pq\hHOQI`M!B;!"4pT1I[<^1.*^V.jj
%Dr&XHNV+*u1c5%%%eRT__lWXc4in[eO3I)tC5b1_+LR20C%WWF=`g@OX0$fLMlN#FMYG'R`JXgq>,aY$V$E%hg<1"&?21h<!Pc?/
%'W(Gs]__@$q(mQ7L;jbljQI6c6OuVX9]+1l9ind]a,>BBQ+kdT?C(3:X$q5>r=Ik-n=uM)+6Qf%;;BN)/\HS1IU1/=&e(bucL9@C
%U;IOoN;9M5C=JMlL(Nt^gf]CbM](("_PcSdURY?AG4sL\akQ"Jj&79EL.Gbh*$)"eLlh6JV#JagI(GMq+3-ld5\chgpt"m6\]!^i
%(Yj]5HumA&,Mm8)760Olj\ps[&7(Fg<sl3X5Wf&RmH)AYYPGHPo6-]pj^En<:IrG!"eE-/Yn?IqqXp=kP8J9r9T6\Li]c5PnXi4[
%@D3pH+mC\a1eaP6h>bc0ahrd080'/'II=j1LcnMs;]jZ&07lBZpfN2M6l,V,"ZiI!Ip<F"%b!)qI8W]8O*&o_51)(^,gGeY#_.>F
%NPsIC/+UZn:Q:DgY%1io`&T"t55Pq;;)guj3.)o\!]4>#OL.i/8$\eKIZVXL0_!HAc6&[X)'i454@[=7(5+NoSqg,:*.E@PCS15"
%F*OC8Op:r8pD\e'6mN%@&B`7MqtV'>Y7gDn6=GG*bB^St&h'Cofo5-I5RW-n7O5*3)on1'nI,5RE'Kk;V$0]AI#bh;O#';p?I`JO
%_T!hh#U5Hg4_iC"9HEKqq+fo'mYB?0S]Bt&br]3RI"u7o5.F\ibDkP/DpNKiY9t9YV99qkg!iJr*ilVCNXImEK*&9UGI2HS-ibJk
%oB.W^ce1bChd64#g>H(XW1in>GkYmfc!>E%53?4cqN6c#PWeOl#PJ#O`o5P#.>2[u&KbVA,+[99>4lESj]eG+qsBTZMk;,0IYW,F
%DO-TLSn.5"I3fNmMX9SQhKup2,2r_H^$N<RDj7U'g"D;1)Kg-ESAog/XVMflHX>+?HP;uUBft'3pmaY*<ZncR55o.F7=JF$]6t'l
%PX!C"@jrU^j8<#prq/#TW17V6oceLNhEJGKNnjMu=n9,`XAZb15oeAj'ODderCItcBPssYKdcln"2G_Fo<5In,8akZ2#CnFe)Tea
%#@BOQ\SEk-KN.O-o8-r&Gjn*/i0jNnS_sE!M`mS/;imunORK228"%'"Y<_5YRJ()&%tS,U0FD9l5-sXs_,Aq.<pfKS4jck4Wdq"V
%Qf#B%i5$UaZ]<_+&q!mNCc1[Q]'e"8q3iO[8A@5f6riQ6B[k77F^k_!5Q;m!#LE/:NOO+:'jVnEp4-M:k+GsJQqsJGnaZ0Vmc*i/
%<C$EA`#!tXBcoD6.XS_<"EDoiR2IQ?<=EBOAhWhTGJZ!7RFbK_[Ans[ob(8;1q'm"L%W^:l(B8(q"j+B]u"Bpqb;Ruef:!Zjnhh;
%3O6$`1Ab[5@p`U@:j]>6m!a2@H1Un%*G,TT093dd@8PU$W6*6Nl+XUT9NS^WHX?"BLW0mL^utlUp/c3AUXcr#CTd(H5Go+E[-)5^
%0HSJQB5VTK6J#O"q]]g!ZPm#njgXV=Z$H-:2<1jQ=p_o&14Q)M)>JArH)#NVjbq"9`FT]^f.k3RbN1e;We3XsAF[qKdV<U"T73n\
%*5>X&\9bE%=934$IYV?&i^mE_OaMGZP(2/2r,&*5f'dE=j*&6oNch1a1"r,U.p9>;&!^-7[>^)!D;)=TEGjbd3J%[BA;FS3B=UXH
%@cu'<5(Sd&q'4M?AV/tGjuUD/hqS6Zm]U.gCunu'WR\"fm^t/'Ib=+"?@<ArT#dh5?C19FR_.pEi54=Jfq[_6554%X/'=-sSS)ZZ
%?_A0BRs"YY>4oTmoG"?4lp&Tmdg#sN4fjFQaQi*#cBle>Y7EetqWE&\IUp2G"=EIZO?QLVpAG63$$R>*&E_G":S3$9`'#&;iL_O_
%TM5.+3=+2Ro.Y(+\Xcta2SIA=H`&7LY,n>b3Et8i/SUh5k(<I7<8k*7F$hR36G^1@Z2X[g_u+\[ngS@fH_8TrH+\Wu3B11lCd$GI
%,.!W1gkn-HCg`hua_u[_H&Nfc!Asm`]m^gXXot3@EfM3t5:i>[Hh\b6"t[quSbpV+QOA]ZU!'4dMt71?+;XD$[Boac(B[,a_5n]b
%2jYT?B4UHt?N@"*H'8-;na:k('+DPV1OX_mmd(VtZIVm!-2,<Q450D+X``/[?uIL=]_hZoCpiitbq:u%b8>I<nfM1#*],g\VUj2L
%Qc>rL_j\5b/74app3N1/H!_@@dB$b'E:ro">%MccnPOh*Zpa''.X]pLFWNcaVVbP0oZ>Op2V=>O$[,(4g[DUlYB00(pBV%A`P=03
%cWYNVJQMg1!+pQ;8&TIJ]kM1gno9l%EsBiU)A_TggO<?$nR=Xgh6B<8=A@l.HZqI$q5od[gq@WWLmraZqQoS/+B`0igM<%BmdAaA
%OkEspI'p5FD+<?%L"Q7=7Vg!1U5%OGa=lZ,1lV>!alZ*so<="Nme>;-,OblNI`O>up)Z_0,fJ.*U?L4T+o6`<oBh@44F:f^TqoX1
%`P'K3*bD-o5VD.irp3AV'k]ZE^+\mhEg\TDL"s]D_2J1d`HK7LEg[g#,kLdm"Wg1g`PQr8'>XtHo"DXSX2j)mL=9t07$=TZ+.N,d
%A"#'4V>Z>2[/*6Qir?tZ>2Q@Jes;oLXVVp@5-B;>VTJn@\_4tCLGp=uh]HaK4$2^s3e(bVm,lb%jcthUfABGu,L/CK33qugl8c8?
%'Wg%2)1<l:"+(lSJk+?=(Z*b^5-I+*b)R9bh>E27m<3sS["*m=II[;h[ignWIUm5@c`DT+H#jcQg?$BAjdK9ONFtET#O^eIrp6Qe
%nXt&+M_)j7p6T]%%gmMeD7&_ZmGuS3XY^>9C4Vc-\mS%S(NI(PI3Eh.gur*7?R06I?]s;H\GuPT7FSB^Mu;/4#9NX\Y0Dgad^tS-
%T[Pb:B"NGL!U+/q)"7(QqH&V%\kB^Dds/O0kZFsp@rRaB^1[.-epqH3q;oWmZf\sbU@__9pf)\TNsN,dnjiT1>B;T1Xh8t4>!qol
%6VRj:Y6Fl<TS9s]fVreTX?$d'P$[M.pJdqOb/hKV!mJQ;rCeGWeu/Le(uYBDVl,TKK*?4o[.Di(,m.uLdDJ&N/\FBM2Sij`8Umt(
%TQOWo+4W09rk._)jQ`5C=o-L^fJC;4UA;]F^YD(]cXqa^qQNhn%8h.+QCbhgpbK]/YX)X%<Om+A+q:qECZ@m@I,%0(ENm#p[bcm<
%'2)En^0&mjeS=\[DlDQ3a%nWi[Im$e%pQ<bjtAL?U5)r(pNUWDSsDBMlu_gAHU#Ze"*N9+0G!O[%J+PFFP$KnOj9Lu@FI5]dHcA]
%G]BrTiUki,mGUEgm_@N?El;4Y*j8rfo_2toW]:S0NO@fkV7fAl^r*?+KA,j-0f=Bf$g[?5I2KYZ*]ir``d5%s(j42P7m63EI509/
%bP=ZroqqVG%Eu0P7lSq_7+0P<2iAb3JpI<jEc6)+q7;$=_FaEW%1:ReDTMS8Ri,k>h8+O<("*.:=5N&WgKJsK>CBTU_@IEW6U1HF
%;]b)mOr%2jh2HF/4HESMd_-a['OQA(f[/3p\mC<%E86"Z4O-0J4;;=@89jJC_EA$7r30#M3!W#>llMFIM_R@aOYN:^A-N5F]-'S`
%3qt/i]:$Ru%@EXVa7UJkh(3^;Sn+@VoNh)&m2dDQj&GcYk%2)>^O,k>SKjci?K<_&Q1&b/^3Op4rJg>)s6A/2h-_VCpW9g0n_rWM
%g6];,Nlj:RR_J]p"A8^S-(*YtB',b$*JZ*^oPsF"7XO\(h>F=?#%fkNL\J+!5ml0r9A'7mO&!9/BU=(75I^!klc\,1(&Q[Fa.!Ve
%4oS;\09h\h#)XnW;4g2bX`R`N`>nacQ_&*9]6Ple!+`h)jC,U(^=BmrFX7ZPPfonu<PA0P5?hD*7pGFH^9>H0FL#?GO.3f]8fNqI
%DdU'l=B"dHJu=n1nr_Tak?=e)1NN2"jVVV0m6[\!HJT/(>boQ[\$(+;9O_*n!lMtRI0Y5gf.QR^_ZN_TDn>IWO#':Ej\a)_pN#<k
%%T$InNhnauc/4Pt?o>?87U)eBr'V0s`38O&oqVHFb*19MnqU<"N3g0V>s>@^pk1fcO-gTP+Q`?7Jrc0K;2G,7"muMcIm@W00sofm
%"`rXN=t:XQ^?;,)IXb2HF;pLiYO=.$K'le;0VIqpqsE7<mn2:"'L#IA,\d4J(D])JNQmX"BOuB((Fuf*rFW#nNVs'/J_e0fOQu]b
%2ci1&k?7E/=G_i!jm2J_js],9N7AG'?59(sKa;u*!jHeZ+#)pBn^Fnpe]Xld09m(B,2sA[7,^A_T\@0k0^s<`0](kC2TdQGm:u(!
%`spDf2kTOR(1(RCbl5ZE7YJ=W%!nis.N"paS#8cG<i@6_h*ad5M#P>N11e&qABIE/1,)[e'[P+,DAL!8?d@/nhq9Z1>POrQMYN]k
%H07kZ?l.B%S:"VshKs6MYJ,L5$Ij;(jZ\:3.Fmrd4%K<h&OuO8:%I&>pV%n$U*=qo\L1%>]1Xb-^nkUE:.O]rd^'b:gY7M.qsN4`
%:\W]:itgSH!YbFpYF2/D;?sK)^Lpu'@D()C:Y4sPWYBdja(OVrI^N;H.urt5H<?6";[KTW./rj^]@BZQ=nOO5L"XmoA@1VYMVI))
%=(;]<Yb[K$GVVQ"56e#!Cd,"1;*e`-]3=UMRCPd;`J6]rj*\b;E_e7Qgs6d3%_VC=4IDM/ku"KZlY5*\hsWLa>ka>Qli#hR[iIO@
%325T2iMR)nD0NjL#(t(_j)$=>@HXfk[WG)02EV[6XP]O/>mlg]T]\YHh)Y1(hc7==&efL$5FjO-Dk/8[fPCa>$]!]rHUlck+24EN
%7Tt\g)MQYK+t&MSpc3S:BSOQlkWDeIbaZ1Y7GVZ/p\4ln)TscK?6h)mKbX8Uj3)Cm85l)$a3QY.N,>@a.E&T4/I'7k7'I0)[J&%q
%8rQ$PU9PIKn*'0>du8CENcWSaU[_P`W<6IaMhEgb&SXW[_\@tgrZq`6cUGe]dr-4'7&K*RCZ(gIdsS6:CqjpNG]U,2c49RbRp^_4
%rSq_dL_5a];baJ2'nbUI=<5[bUC[i'-Rot:<.sLJ86iMN+\))@C/P]gAK.WD=h:9`?kWC:$G+Y0=?qf3HJW-gnY@@')q!\M!;tIB
%je6lbU[f+i;jucU;BMHs5YU:teJDAd_*hcTVV]3`P0ih9B#`FNi'ET2Q"K[Pb[@P^;JUCgb4):XnR8=t08I"B%D8Fo)HYl+^(%s2
%G.W`[UNFmue@^1hT/sa_X8bl?&8_/_<VY:KGLTh#d/<;jWg2#9"R=RQb;HRPn3U2aH`l#^CL&II#[=&/Ft#odKCLjT(]kpp'#lFK
%3#UsFTa7Kqc)s&Do*b%=7upe[l^@,qn@EX@)0%9M`!dq71W#LrK``uS#j`q0(G:5/J^sdudCP;3+QgI49VSg08g.IGQ8rf8=)JE]
%jMUC7%bmq+%M7UXe0Vcc.<=u3hEeI5JVX(_4T84=cK3,]hcmaLV[!7tSe#'p7,iOAS%o,)$_:&kU)+i\3q/$-@$4mOI+>V@]q5,+
%2r\e"Y<pBr>)h!?B;bOJ$[gdrE@*d<I]Y+B%=S-W&q&e`E(M.1>Vfn;Z5'q>esog,khW_#SfN+nh6<:aA=Fd\l'=KniN6/Nf+Fsm
%pa+oeRn'E''79,fW,W$J6eANGgqe'LPhf/1)1OWF]cQZV@WmoW]`p]d2?"&>p-+n3U\*J_ZaAo[C[ndpfa,SbB*).&Z/Zj1FDIfI
%@\l+pjcW2ag\+1#*^t"K)0F8*1^*9\np7g\E57eXrJJ@@)89NHOUKSg_3b*\TXDOe\&A$RPPkNreK)uYrZ-8?4=Ssurt6d[UVS&M
%.G^68SWn"pn;E"IS^Y@R>,Yor`RIYRZ;I8LH`o52Yg^0n#fhhT^hbo-!^mM:Z.is]2)K6\o;U9)h^^):ZkMZsD/_G/(jI>T@@_^G
%C#^5A6SA_)4V2CbN&pe30.iI*+7K4q-=iS?Gn5C<MAQ'NI1[Vh_;>4/hd40tmf<54"c@^ep$%C#.fTrb*rPu'l/9`.l#hlk^]3:p
%7FH*9_/C+fU)M%#;=2Z3iikb]9E/dA7tN[oVmJ:6Gg`tXK54]>ET)O&D9F]nKB?pc`NSbI?!+OF'1nK`S%9<5'j]I+a+a<nFG1md
%L=#;:MNDH(Zjd,bM*gmBD7V>3"4*CDci^65Ki/E_U&BTQUN/X[C!APijbsm!Iid(e&O8)!CC$n"nA2@<QY%g$/DW2BA(l*JbSU>p
%Uhr`Ob6KQ"8_<=j6V&ph2#q52-XH%Q0(a@6Zh2!1q_'n9YaB`d9JVQYS(:9RZ#Jtc@65_CRVl=jEPOFWXld"VZU0'GKj.Wq/MpDb
%/hAsKR*\ck#]_JQU`4$g@![Js9>e!DTrZp+;=:4hNIVKm7PecT#P?.9+=T3B_mW,t2&!>%IP=Jh1?LLo-fK[l3+q1TR_)r](KsFj
%k:T$C2UfOnh<X%Rh^>1V%^0s`A2$P4FpfC.>LuusUaZ9squFfPoYJo`=!*$,a:q$A%,o^D&G;<@cjcJKPcf+%#:CB76;!\q8!g*,
%*t/hcReo9+#6P5FH@SkpZjffo+9Xq;0Qh6lY+qgFJN2s*cnAO9BKG?)=(eIAgV$FR#ZpkuoShl&>Y%404C)nN>aI=<@1Y"E&1qLN
%3mAf7k1[37"j]KLE$m#)(r0h>lG5Xa-:".[1h\*=A_XXu8c%'r9NMe6YUBsM`#dtB[CGY?j1%\j)a=e!&kA`lkpW,q9='!7\'gSC
%9-s(8)LUsW"p#/hm:[.&LM>+#?to3.qXg1o];C4*=b^eOatnaH>:fK"AB3:OJA8=e"n3OS:d<tF,*'P.#fDZI)3P(m$=Q!1Jbec8
%P\VD!VuYd7)[)O$?4/gbKjhF3EatkI!^^:L^dW:/2'G#Opp=<q;H2UF5Bm,uo>;E\.C<cc%JC9r)\B&cW/Qi<VFVrXOAm#!R+RId
%G"IVS6jK4>3%hB=0Se/@];5*/"Lu;WJ^JK:>c6$6/p@Wna6q+n1d`B<Di7ni_795_Gp<[tphB%0%0a2h2,(u""Z-ZR:U/"GH.#N4
%9F21KCD$i?pc,d>_I_<mobl.;J&#!E*6hCQ";\jEeHZ.V2N&ib$5=APC4VJ6RahKC?<O/!;!mMR?_Y0;Amk?aa,1B:*J-#14el+e
%jNLqX^m5n!fe^##Z[ZX/I0:MBCKfpR0ZaM19"gW>b`9Y0"@*e?bU=\L4Dpj'$S)_Zq]&/t+"UYb.o?&Ml]UlZi#<dC`%;dYJ/"o8
%*sGH)@C+sH`s%E\SqiN<*2-auX!<-$am6ZjS3LAj4LiWe':M3FGT`FucmGqp++ei8QT)3j%:"4Fc/\+>1^JZ:oO'(:$GHa$c3Ss,
%?jArE(nT)*VPp]=)d0YsXeD0^1tdCM/I&T0&m5PhL`$e%YY!aXRrKR^25[6$<."H].)_6[/fNE7Tj\Ykd!CI*6':g@NASA)Z"Ib#
%BE->UL9;GuG6iJ>=>t*M9SWpiM\fk/Zsb]CC0:LM)o\6df"N2DHI9;J9as\WS!HXseobt3nfbeT$BC&Gk^pF)5d4##-J<sjV-p)F
%`0@j8JC(41;J+[D'*=p2rV<JTd4Oc"FK&6\&&8j0Jh[=LDoH^_i8?RGG5Y_'aJsBR[#<1c:V$WP<JpoQ%#B"g1D^+97lma6@153t
%,"uIm_;`o#j\<o&oIF3ABeTfYaR,3M4AN&D%[ocuH2o`I)]V,m@)i:)Tl(KhB]h3],ki])#]ZXZ!i*[2\RYhqK7<q7NN"W#a-)">
%>)A^.?AWuHO#J7!'"i$T\k;uf&4VH[5Zm]6VRQb48!(=i#e1(cN"!(@qe.]UI=9t.4pOi6-LdqT:`T-oJ<R3[`@*F_[/+oe3CFAh
%oROrt7W4=ijYq!d@mFsipqY7IV6M%sN+!=X4[:g*Cg2CUr?HqeJ@/glV85h/NiGInc"R4er@0!M"G1AC%3@BS)XT)VTY;IcHFZXE
%G?EfkY*Oq@!cW<J>&?lpJ_LG+RDV=H.<K`^+X1I`^`p%m!]JB/'M'W.#Vi0t'A5UkT.ec7D"O[&/f!BZ3"eaq*6-[#,HaMKVnX0R
%X,[Y3J0JbG*bL7p5R<$.`6if9@-Yk>?$722n?`6>4,tM%.p'F!cPp#f^aW4I.RjGG=]ZU9JUeJ+Tu'E[37Frp,!]6e)Z.&CI1?tL
%82KaZ:h/%%J?J53%dg"JfaDmU)q@$WlEbtR#CKU.;Vhsdd1-;>CP%#2pq_(#N\[+JOOC:Hgu*/kjdK*nrI*PtR^Ku6,EW1C`C<55
%=?@G?9EoIZi98[q5TV>bL'Y^O=AgD(?#5d6Fh:!3XYKII1XOQd-NlmD\q+uCNXc1Rm,8JnPCU#2"SBu/Fti?4?/EfRKdh5Aakb[>
%lcTLM%#I=4W:=/["U6bo*-Dh>@#mu?e.V$5n^#nQ:sMk@f52s<g]:\h3g,&_@%A)89cZ?=k#1t6GcmJV,f+j(m$HWRBtQZ$gTSCd
%l[iST#b<6n80eH7]hH[),>`r"19Geg#6SJa(rS94;Yp9o#g`UC$6F3n_+cO@g64A/o70Dh4U44S;t5GP\/%F_>u1U[0f@f@1E^.X
%Kq:Y:UJT.mi!+I7@`1`4QtqpCa)Lqd>nfHH[<;'!V29Pi/pA+cK!WI$FX/[gV)BXB'J:E]3\bJD%g's/?$n&.V[ijg<cems8R`Mn
%K]pPiXs2LQ6k@6!9,,P8Ma2Y*7mZ*5`1]#!&OcPB*?Y?Y6/%M*9\LEP2AdPXTUScH!)_"<XU#jL%,'us&=VouAft]ib)ntNX9B(7
%D:Br'Y\'9<B+08GaFGBUKGXd'0d1Oo66IU?%7BN3+],od#gnQ6Q6?h<%NV>b\795hbpY^:H.6X;JUA#L'YGo$V[+qlW$=5hUpgWN
%+#Sfn#bg0Y)B;49Tcr,%W)%RVlEb+,',3Jr(5dhEN98em,mp%4&sBVmAHV6%)adGiZp)tT\'6B?>+#qr4)+t>B$"Mtka!>)Ld2tC
%3^sfGI)#jd:R.5#J0L1t$#%G/OF_+G5RP8*qnbD]bi(B<[c;:hK9lZO&7+.LU>Qo]"'<\is'1>%k^qaXQn"1kYcto.i2\%>.:`Gr
%G+(LS2CTBf0k`oY[4^,o*A"Eil%E@e9>gJ[_<5rHdr^e?)?<!=E^1`_!@$1OJ=JVHm7&kC252!'&+SHVRjlGQe<.0*Fot\G?4#bQ
%60*Q+BK27QdOEDX&cr>b37k?436Y9Z-JPt7_-K)=@LJ\,M`G2gk646sS.N]!1pgmA%7)t-XN3aBB*#BC7/:7.GZ1EZ^hl![\u)Sg
%k.d`3'H-4kdXf2Cd'&$++i,-`m>)Y,5_j$JX+l3Dd%paK'AjrC5_Z4,%D;k,n)+l[L)M"Y@&saYc!`G':@k[I)Q(2/J@T(X;_'2k
%C'?C*8@O]pNb+<8`E#;T@fUDAXX%!UjIHcmg0dV\gpX#XA=3)hJ6b(Eh>AfljckG7/Hnkq(kQ@Y\.&e30G+fXDkNB2PZ`hsekP"8
%2phGrQ)`9k!!-l'lDO8DRG[=k/!VBrkce%fT>Mq>KUX9pS#q<4,*.I@19/`1ldB9B/0-OS/mB&%>X.mM5Ss/(22>0g(`Y:f)XA+O
%_\\dn^RLN)@$9Mt.DqH#N;?5.U5.J,b[0e'L(.Q_=bc4dFEf6c%b#8PWp-fl^dVi0a;M?7KP#63>7iQ>d!coSX6]TQ$B>ipr8Uff
%Dl[h($%NR:k[k**_'BJF0sph0i?'T[WRBa-$3b0+`s]nB_Re?DB.FI7*0#WuK#gFcIY*`a((.D`J`M&-8D>gB:bn29mQhmhn?ek:
%$AZ[[eH7j6F%q@HV3<.7Jtcp^Y0("ZdSq!DN"cK2RYG.P##:f-:.N2n:*VfOL5JVMBgLNdQ*-l;#nUU.qrOU>K:"HP3Zj0"8<hV;
%9,'.C0o*e'E8NYWnp-[6C%S)A3$r9QTgKVQJNn:e*5Egb&80$1ZY.QdbcJ/SLP_N8E&_+ZG-eurFJKrY+s!1$-b%#g@9C`b7L0SY
%3C4n9ZE[cnKaWH&\1liDO<mW3>3*/^\=_eN!9aca\WD+?8A7=@,[H`K.+[i)\uc/Jm'2-MA9'1c"P!ngJH2I<X%dYdV3)lQ)GH7X
%%q6"!fMis4+S<fi0r#d4(8(Z\Q@iXS?t?7bQi]()+jrQ-fV5>9@@.cu8&1,d-("bi:IJ><R.^eRYnK/+JX@%S<43J7[2cTND.sLF
%2o?f2/M`$n1L5kQL-`:0e\?W\d85sg7^e#/CW53S)4XC'6,HZ%jO.Da"0r/p8%>3uiiPFQ.bJ01b6eUC"4$M,70hKX:)jI9Ld=8O
%>Q=s[Bkgo'Q3<-qB20,\^c#dXC"6CUeC;@a1$KCHmmB_6T*s,)634p0ZLpM%&Wdot,U\6hR8OcUL<p4k+k.mS#O4*;i'WeFj_#[m
%j5GQ'RV7=m;GE?ic<QA.NOc$;L<Mni8NB?r(?N>FGYkA%UB$R>UQSlnla#,ZfW5d'b]T!kZ@l_el5@LFfVjB+OQ<9KDOL(&(sm6=
%f#2u;QTSLlee7YQ;oP8IPGI8;-kk2bAu]6`NK[S$$O4s(mAZL/A.Q%#ECf-"rcXpZoooY-\Q!F-_qW@_jHf`?0o0Hron@Q)(5C!S
%V6[J<;+3+O5sE$B*U!r&d=;6EZOVn'\<[KXG`k:KWHh0Vrl?FR0IM;oLZ`^^r>(`@9^")O`um?<cAdZbVh31#7Ss4"l:Srj?6Vco
%4;YMV/Wpu=8tU/W8s,Uo1k2'J\)mCDZZTJ8Bb?,O#)CZLT^s.eh4cm.52.4<![!eSKf)/dP_IKfQ/K2XF<.:q59eW<R=Y0+/6_R2
%;Vb06RKgoh$Y*qg@$$'GHq48W6Yp9_%iMlk3jr#_lGspe.@RsrBfI1[2R^aWJj'n6=eQ/Uc+mcgoUXA>Ron07+;>2'(9=)BO%cW)
%k-T_mMGJ6;UA;`,WDMD2/B`J&%SY@TDDh3_j@`.%G>t_7-f5ZN`rD-kIMjB_,>:03?NV;LV@@qj5)b$bZr0Ad@-nA\107F9,LI[N
%I;dITC84*4asq//[!_=EkJ.f0;L3G<8d,69m?g@#E!<7f8Cs]3$nS>W>BW>3$C,?m<*>3R,qF567O[JqFLYQRk>i.R!2]Eag0`sa
%6V<d2&KpORQrk/8WaEOq@nHi/T"mML%ElT&@hR=Nr,/59Yqb_KV5i;d8&>B4)#4/>!R-QIh.S<,9G;TVV\#TB,'PR<lH!-]!"FJk
%/-DP@=raJs#PFnp;P,mr*5!EsVGd\$'m+tT,Tg)Xm:J&8+?Se=Jg[3"Q0!PJ#QL/$RroYoAjM:W+rOIgPj-UJaaA:]#)(i=bAe,'
%8a[ND<T=2iAr)].-MJT=P%=rrOhgJM0Hab6W"N<?kUu&H@$1>49A15Z\?PsLm`EJ+K7<ZGhdD!f&7c$MGAn1/ZQDjRHr:8Q$VqjP
%@>o%R#XekX\sJ`A-jp50O-#]q7M*^^0gIr'eXDAcd!iM8qRs&6$aiH/PoH&lf4gVdGl_K6F\H0SQ&<ME0"t1b>!?_<;_Ygg=&\7s
%#/-?Y:pmWEeM/J\;uJ!@^7d;Z#J8,L;r)U+JVL>.$,Sb[^_a@`9/SK0"N&#`d7;$g9R;O^0aqS0W&l,?2VA.=BJ:Q?&Q,DH.ul#n
%WnEp17h^\*"qM^K11OcGc_:jb[Ja`(4H%ORkd>/_nM]edi9$J:W$Mc</'`2hICE^R6<-GXV5h0L*k%e.oJ!d3%#aXP).4r6Z'8Dp
%NcO1dQGkQ.K:lt$>`km*JdtY;\@iLYielbI2d.<)]Z,).OctFXTc,0+BPWpuQ]gC_`Y)(fNaU^6hf*?fa>3]`g'7[BS+GeU$`-ue
%/Nf7_7ahTGaAu2\;UB-A35iY8$^AsK#kD[156D19XQUG2EJTP#C%O\3:MF3j"(pLgM'>4*mP0hnkr=>5Q6^Mg"6uBVYRj1o^^t*e
%()7s"=BpU5!nNcn.0721.6*'@"'r_jW6hC\W].tLkes44!J_gN<j2g&$m<''BJ7tr2T*=8;pE*8e>&+e(GR&;/:[k>NBfhua+-!<
%!=lq6p<WIbm.]H]QD9I\cjgctQ-F#u&;Vblg;h(1+;ZO4+qRidK"#tlTELoKQH)8V.\Hn=39jI>#fIPlqQt2TM&^Dg$J(29Lp.CU
%G1-)<'5`I1j@DeWmqT3LeH-CTipMOR<-^0M6:?6`:Lt69=FkY2@"21]X.QFO[(1t'h'O^l)jCIO$RP"u0I(:>m#:0550AP$N8XT2
%.+:\uC,W"X>EU[kf#,`W#$T)+FO`[1;H37C4"r*U<cNu.N^4@.3rjjgV%P@&_Oq!MiV4T!<l[LWQEK>U^a8#17h(.2PUjP%iM_c_
%&f;+IWI>K#^9r_2erH_M]Ti#e&^Y\]1;\.#KhRhL]s-oHSRE2"07D]fS>N\Bk#Q&D&6QNb4.T"oCdC.3#goHIU+T/Mk(.8h\-s@F
%LD^en<6;tEK`qYbW?5%P$K>H**4]s<(3J)H;_$J9ZihaUTRR7=q?\/=Afa#(L?jV_Op_j%BQFI_iXJpOA^Yi@P9CD?YJ:3,BF5rK
%HA;JgF[`P^<j-LbL&ApTG*5m)m1qsCDlX,>#W<DO])\D6.Uh^rRr=F8a"9U-#$kS`&3!hkhB7u%BLT4+j,m[Tk+eQaM;H..k[!h:
%/ZK&_W7&nH!&<6Q]?H:1#;aIu#hHXHVFPZK.ag0lB]/Hj;9Jrdb`R2mP8e\h*2(P(/ipLF$4=gAq^.T2[gdLEkWf-e1Op5f?ZGb]
%.,t3th>5D;7[Q6Ub_WmV-St9LRH[+j-LUM!"jo&SJth:%jpWCk&K$*rijb".#,DA=<j\5>d/\0kZk>gXB$MeqNWe6PL'$cSd,iJH
%n>o:U,-$.A+H===8;*A-+HP6p"%O&("44k9Gk>0^l$)7+W^S"m2aUd!G_+&:Rj:Z[DT.-_[4$NW]PoV)"8s"0l9fU)rg5)U\3oVk
%/4(S+(:\!lWdbJ!)^3.4@uel[.3M*LQKoW-P0>l[g4Cb3Z!tp6UGLL\_7-aB6ZnV['r9M$QRC852;).TL^,1c1C3sh3"0sEiaD_]
%Xen_l*NW&pjO>TNN>_LtTYtkEM,Rq_qV&n6&"8sf?QW1?-*$:B'`f6:37*;,:D&C$&FbYZ/Z_+p'4E%<`&@hqjMla7=&8s4g&fRm
%1&-Kd=a4nF%p,IJWDijt'O,<Qcr%aRJB?8n>NHE8@VSFp$:8sOYgp!=Es0fL\=JSKQ_YWJ3-^fn#Dg4D/KR%&GUiqd7<d:90X*re
%dL$bNL`0GEKdh.K6#<5',V2cYnn2(:M'Wgc]1H-9M-4CD%K."?IQ@j0K2p/CQrAtPHr.5?RZ_F10T]KkT8\ut%\'iN5q/e;7)NIE
%p-h8I.o`>i8C;H<!rt/?VM+AlBrMG<'8qn(S$I-'qD=td_>6&ke[:hun.\eu]E*\&Cp")]A.<17Y_j/mk0o+j6_jk(fMCHJA@$5N
%a1nDT-I_WtKqK(0_+5Md<kNu,;-cc1hGKIID30<bH6Ke!A[N-a;PX>9"YoNY+NoT+9#hB8IaE6pV2)j::buD0MI-i?T/$*);FUiE
%=K[PGK^B9UlG0*)+AE"o0Kn)bipA"u_Y*Aj\Ik(R_?29j0I&grD4[n0T.)Vf@N:q*6Vpl#<fXM<[CM)(]blB]QnF=C.amDCZ\XK\
%8G9;9>VE&#9Rf;@c[4_DTkGe7'_1s]")PhC@gFH>HQS+EPGFMk0mJu_jsF118etliSF%C'+=NPi3L6:?2BZu,!DtubVWK+"'Q#)K
%:1ACmNJ"I4O1-Lr:lm,])G4"gN`EbR%r4gBh&Bp7rE5/Q%AAO$Vb@Y:#ufr<W()aR!_l_<3ZeqXEWtRP,mK6el7iWgp`^UZg4FI1
%WlCl]:<QWf9Z'3f#ZlEcOf/#Oj?Z-6rYLo7,CYGu*#,V(!qggUJp^$X+HZte6.O0_R"Y(c-O@2Cm\3QX`MJ251b<JRSKnMm=<qah
%")4F2#3;O%bRW=e.n-+UT8;Q;\WK\rd8ZD"&Lbp`c@AXpX]=nQDW*KNLpmm=c<=mPoOpUl4m0s7^UjbBND"!Y!(nk#+/Fra,FF6_
%TCs>)cQlrY`_M3#r=$H79UNWoAXCW?6.NS"h[=$o"X[^dFqSeXGV_[D:1<AMR3GDSV>Yj(KctSF*I&6OTaid0b]T9Y;u29Q/>Q+_
%g^?,="stA@UCN_\^EDCM6SV\Hm.`>)j]jdH`_d8O_GPAf@kL)R463+XJY^uc[c%sDk_]kCG3i?dPWgP;,m6'$D6"Pig18B>&-bN(
%YJ(ZJh(33+[+ZsH=,.,&Q2NsB->gJ58]P:'A/]`hMALLsNBd^*ct-T3<gC>`GVk3\dEs6UJeY!"gUhPu^bA>Ifg`boabOP+6m)W:
%pf[7N;b2X(oo4/XJYSJK5k!@3A;IeM;)U,+is;4Y8a\B%-2Lk+#I[3L.K`I?d_Z"9SD=orKfb^F83l+9)VTG^$4<r_.'7DaH(u7@
%AP+QLO1H[1FeDWM<qO6QB,oM9el(P4\n*CRTrAKDiUBSS:P#k^?F[/@B%4d$SH7eHFOD_?[S=Each?aci2a/2.*VbDaA=c3\W2E\
%o[UCWA70@UXfI0;#WA_/gC;I'7a+<NJgb\K#5^H4\Zg4FD<T9`KEeDuAQ1K%p`->=bn00K#9>Um[*gt`)N`?Bmrc=b5>7"A<6CHk
%QC'2b&CEoSbFsRjijP#IX2*8>;5+UaVo5(G&Km[ZF7`!ZgHdJ=oc`#rD[sTX&)75k%<\W^B&Q+a'EG$5l[2todKgAA3K\2G!0;j*
%i.D"Qb6:*a"CMB\%.Q.-#`jmoK]&\3Pc+-;mq:*7BBtWM)lSN3[Hdr=+5\#(73+FQ,r%-1[/l:af9ePG63e:<Eu8Au*<$5%P@t*+
%0S1!`>Z.N'1`+ajNoOIg@0o]L,Gu"-LV`h0L]P=dE&b/D9dZ3s!kc%ehq""("lc8s@]?Cm"KEi+&MEP&W8q\8M8,\?^`-r$%X?c\
%mj2LOcrCcgRA=5%_[m%`#%3FDg8)),AP:G!3f4N\KZFX:2YeV_NRc*X2?b!s;r+25fAm9"9WN(+^e6RW=<)f\%cVULcP28/_DDt1
%>`+4@BVLX)>8/*OGbo0[edM-`q"s:bXKo3<KtQ_4lFp7\0qkbBTr]f:*=Qg?0l/<p0e>uo9mBT3:q5Ll+GElPU))7($e<1;LoDXf
%&SPsWE`p0Z=K36@JeVKWb9YO#G(S*>T\RIrf8XNaKp""9d])e2(Rh'g@ZnHt_F.Cb^<uf5(^Z7tBp9'KcjA1SAiU^aM?m&*0f@Z0
%TKQZpJOmFL7/%M"&#;j_NG(,P?l1hOLc**G!Kk6ab^M;&q#YerM#!,F>rsJEBgdL8hf'U=hc0fR7`;)n#c&\-d8g`(BP^YE+V:UU
%QTCsq$IGO&l0$Yp?2FF1%k`?5d3W&ZlJX=\>W.2'6Wc_[$BqqI0i<_#YG:>_.6e3H>p[(%dPRfCSDb>uFIFN/G>)aZ2Ag?uFZE/d
%kqUe&2soDZrCmLS!-+#DFJXpA<kR[=!l@hkU<9_D/q$bjOtS?fbZ4UtM\Ub3Wh7#qLH#b^%V:Aga7,FIg.mrUMm#O7o-G1cI7<@g
%EZ(AT_@p;s.Hme?P(4I>0ArC=>J>Z4nTTt.)/VE=8=::MoXC?QF'(4a-V@CLLP+?b0H=K%XtCA?T8"-F>hdDlYg>hZW.6hrn5`!-
%-iN[s5GGu56MX\*9tIq,Pm\u0p*mX5P%#,2;<"7,MBRkP.9>/cO*Trfe_.hAJp!;Y/2OV[%ccC8/?OA0N5dEqWA;A%TS^^uFf^Kt
%!'28gZ&[.Odpdema30:h<8"e/M2Tb^"ZG<3&0Oa)Xi2qp>DD&0XpmM':V-jl7@.7XmBqjR0$4H]%]cY4;&=/W%0<uH^a;!nOY`\d
%NMMJmMEnKZ_BeOWa:s>'QI9!Ir_jt85,?-+MK0S$cj]A*Z6MMd!&YbM"<Zb3p4ktb%PBCWq(p_1Vup*FA`,>@Aa;.FT22rV?DB(b
%>]5C8W6)I:&dr:lVG,$&D]Q=Cfk01HjKRVT6(TiR]i]Lg/-BNHiM%V%MeM.e>XMX^bWm+HT'Yrs]&`ER]#'_VGV$cWAJeMki,9as
%$P3c[U5Mt'-D(;fOl.&rbi<:Yf%L5kI!Q]Z"gTb/"TH,Z9r<jA2C:.1Aesg!>073q#%LDb:]B:D.?]KY31[(S,V=Ht9ue&9#R/`I
%-lh*<_<4m=h[pM+#&OUF\5V+/X+N\WBe&`f\.<,C%k6!dT]<QKMJ,u_Li(Le@s2"8<"IF1*=Vj7Ycm<.2"oDnq[U&0Kh<h0FG7<T
%g;S\3C.Nni!_UCuCB#%;RPO*7*0/oE#oC-]$<)?&#,]ah73SQ.+qfLjauN=X5f;c;JZ#_+rSdUH]WU:IFI/8U,#G9:+?F;(^Q49F
%=\+Niq_9cG*p]`mg,iVjl>#AG$4=m[4@$f.[7H9P_*rlfpfU-n>efc6#][(<9oqn8J93l@&T).L^>OcK1Yd;lCl""g<(]/c=;Vl!
%k!Magq3@s.;*`WgNZRR;!`:3)kdl-`8H)2fQ%OFpjD'H8(R5tbl(Eg-LiK/]@CP94UVFS^3X7J1Hj^R-RUSpk>/RF(mY"G_3>S$5
%FZ0jr5#g_'7Yj^\:ZC%M@[i"$0i3p4'3M8(%T\H\3Omp;K0&)H\3@P#`.W7-[QN&j_H&21_;YVi=Z4G6@X-G]V7*OEq"b=3&3:bX
%#n<=+b_l$)3-JXJSRTl+j*d+DLRf'1@a]5:(d,,jf7*Q"KanmA@M+1O>;o48l2e7[X9cqb=i<GYG#ePZJ0;m;o'%E:^[lMkH+0ma
%S:UM?oo/%3qB5?@0[esj*8>.C"=:`T8=9o+D`P1)TdTLd2//ra8K>@S/MUP).3UJV0'boulV!hfEs``tR^V2jh/86STCF3sfZ)nA
%FIZ$)c*0$r?4Z/o4N>&8Q<7_G>nnqi4bmhL2A[nV()cpsL5DD9\D,:&O'iWj9qnG)J'&$iA3V\<gIGO:\"KA1WH,O(4iGCc>`!>"
%SbfSp?7-j>5`8T$Pqq@L&@RNaYj.fIN<g*!Y(J>N&1kUe!tg-`X:n]Qe"(mOh*_lor<UgA+XOkORJ0^6B!;Kl>mS"K+?WtjDI)s%
%kX%:Q[#p37Dj8e4!:f>[Zs+AY;/#=&Tq>Puj*4MU3;M2:QA]fMONjsa@a[*gSAH57%98._@7_R#B3L1=Ehne6GcM.M"hZE-GF9mb
%[8]#b#u^j);j44(=0m,R!SP^f=rlDX#3i&W+0,+V`j>=rh),d<*$;&^nR;M'\X3N?CKh6#m);:V=Od<1rP%$GB,YTHQgbUjf'>5K
%l]g0lH5o<nGFeZS@07scn`iZ[\sOKXYd/YR`'LjQB&9CJH\K&H]=BZ$bkXMOgRcBM%54s:\Q$bllXES!N+I"WcK<=t*noQ#7;QJ<
%4%OSlE2aV!/eGhY.i%iP04(:;i$lr8!e9+j[]sM;X1pC6aRptf[/@3b(GEA(Z#E62X^TbGNN:b,Yire/6lo.&#fR,UF5JAUWluOW
%/;Rn+5U8E/r1GQ_T5)S-iJSW`^OH^]ij1A=BW0oq+h4Dt7XrESkj''oiX4VudHK"egh?!u0tH';G/QHU#ONi:anlb3p%g]r9edfK
%0/tdn<lJJH;/fM>f!Y<ol6oVE_8M3K]G-<Gg'$MqH_XF&JR>D*2qZEO]M1,4)SJSWlK(B(0f??e_h`F:K&?S^Qk0/OhCQWID!p31
%.i$GPFU`JcR:3+B$1OKS[\;u0?tlPU)&[lODdg=9^GcAOC-q%0>]nrTJ8QSjRfDoIo>34f\ke7Aa:t@=.YQ,;?3BHk??ZI1GjPjc
%JLF"?Jgb)iGU9]!Kqbb.IfJMMfJB'NVsslo'=A\,:cBC<(AQ08hE0/i^l7`GVL9^RpB"1?14#W0]h_,ll0'!:j>EgN;7Vhc_`\cW
%rb7obGj;m?_mT$$jMf%L%=q+?r8#4u>r0h2:h(FKDhgd/e8[uDpI3]mlR!0=b[DV.:L^&D_umg?EioGV#429J[5JS+%U*ESC&o1d
%3jMJj0##(\rJ@a8I>KfE3XLda-tJ8jNPi7!9"YX!l#o1X6X*hun)s1sX=IoK.[k8>rJ24p334b$EA5(aJj^mmrZrMPjBLdYWih8t
%gHa;ri+qS1Ip1]/DoAu6CQ.Ms$[a2SJ?f+OSpQ0AIuB;J55ott15n%L*ja4KinrLiO6E4L-P9!!>eb[2:g'@q'MisWl:lnUP2(24
%.V`!%#W77h54G/ISUoTd[*'Pq(2HCLq@jGF8]17IlU*CK;m0uTHUddN4M8VLi9N\(:^j@_?m^3rm2,;1]H'F0^#N=-WVXW44$!22
%G]1.Z)di9m5JE.DRVo,UY38n3)I2Im%_eRViYV&OTGCfQTVa%!!T2;"hFTGphgr`GadU4j<&1stbiO7F4M]*.Dtq<ejhDr:2S0A9
%hqgk"5g_5^dsSjISbh*QP-;af+6j&21^u,9\&dM#8@>Kq%A:-A]HH8B!rBLAR73*j$Frn<mrMI3oaHB7ll5j\3#rNPC&U1.KrrN(
%<)nmERM)U6?>jFIRk=rM4C8l=n1b9h9e5lp:cu&HpikP^H63hA*(*lgrdG)*kt!leIl+7`nZbDG.?DRF-JejPLD@Ok`%ZPY=8`V2
%dO$!u;qJp$R,k$Yn[^A##]BjpeDL?A[B&Da'_Hp@Eis9P5lH.MHqB*j'5PoK'b`OT(ab`4'0"Bl/e#18m$pB;N?0lmi'h9R'H/"X
%7a8<#l!(L7:.J.j%CM3$l8cGdJq1RADq\%J0!fkpI09o9\#K8k$4Je`\?O2mHn.RD)r0^>_#aMk[&(bk_og<8V*rN9j`ZA:;9'LL
%p-UEX\Nu:Qo_TY?WHFjF_h"ELko)L]G9f9hf+5jDE@eeII+@[^99#c][VPM;C>fB#9oD7GNA!\UgLLZ[PSNHOpD,?gJZ3PAmP38-
%2b`0&QoZ7+gifd/WM<t[r'ob'Xi@^"(;H&P^gK*9XKh<sY90oQNGAMOkjnHk"SDA5_mUK@Iq<VJ>mSC&+lP4-Ygmh.760J'Xi?9f
%*$nR4^#$,u`q`O,=%8kbM`V!$7p/9501YJbi]B7(3U5jPPc;Y)Nk3Xf&ZCCbQ'f5e\TkSO+&WRi<=lk(X+#hmC93W9"']bDNKm/R
%p\"ZeJU9C@8jNt7m3:dX:qtm,?dfq-=OL5)O/%`YK56Dn<n,MpTs6h5:r.kCGZ1Y>nI[)^UjlHtWR>jf?iN8s[drAR8)*ilCa4ul
%3JsT3g=fP/7\KM\16iT2if7s";#/-1IW$pFV"kbh'":M:;F2L46ft=p]LEC>_.YgF1*]W1eAN0f^2@jo:p>tHMpB.A&@O(1__W#S
%4/8[UEk$@qJmUiU@2Up-XS=n*EM_S4%X*G!<IM;mqYB!^Tl*-goD%U^29Sdf&&pJ[i\%?FM4kXUFF,gTT2&DV[;o<:mR"%pTGF,E
%<W!I^bps#E6G:oJ6-9#%i_;jF?b\Oprp`,\L8"#H'WN!4$H9>KHpeu0ZhOT:Rkd5u0,3`bD;jO0e*g]C+1@prF5Dn96?*sq[X(HL
%Bkt0oC1..QhD;n'mf<;>CsK##T$-122=#JkNmAWj-(SeIL/?)fkWVU)%p819.uW';mnGHNXO"-GqFM>NJH[,(a":`&mm@Is\8#*_
%`[0V"e5j+2liEn_B/1M-WW_`k]og=AfGttdg7PQbK`EF?bd??5B"A%HL8pS($!eCc8a,F57[>t"V=R\RG`s&3^=Qgj]Qlm>%)\;"
%Jl-Je*fPZ=9&TLuBc>@cNN?rr),Rejit59S5hCeNTblQ:V%Oo"Pm?.uV`@d2'T6":]as=NTQ!EU8N]FYoo>+-"mE7),RZ8<d<i,b
%6`SgOn+`p?rpf5.453e;K0-NQKZ*P%[5QRW_jr4&1AGUXS_3P$``Fg%+40>uqfQN)iYii.DUdZ7iF33i<DId0:l&K_4'X$[Pde9B
%4X_a8CqNWooq<.&,TBk!UV,[ed;Ha/C[))/e>ZCRote^=TGV>:)fA_Sd*qC,/8I1D3&ipQiH&6iFa@>Eig5d.0@RcG15*gB1XtJf
%K1__Y#53C"lPfWM2<iGT@&"HjrdX4i*)2G=B,WtMIttU#pZ),pQV-oa7]&lLSb)l!AjD#>7ZpJH-+eM9P\O^(0CTD\#7QDJ[^WJk
%pP<G*0\(2BmjNcRMDt:'f]UG(qegNf9Pb6iS'0BjU.cZ*)p5D@pfP:rqrGPI"-!/76-,:Ma_HET5lHO06MM#/F(d+[_JLU7=i>,N
%:We+]_M2s^Ph*,bFd$XB!D["H1=UJsAdZVa`!M.5f5bW83@`\^Jg*pO<OnDAI5Y.YDmd8d@B0FX#?aV'^=1^Jc*5?YV<tm#GUW;D
%\i=jAUM-X:b=]6+;']=>/hjk;RE`)Qf>WAh9P100m)MkC/b_-6GX.GWi.G'((Z/%K=1^)FHh]E9T,q8S5>fAuZt%^6./18)IXVM(
%AN!hA6^&K-+)5Pp4Pruf<)7.ZLN9"=D.qJIepg-nW,K7)2^LUR&9R3X?/!X6s4VX`0!#2/%h@(-n)]"2Bn+KtK.O[0a'SU5XO5PM
%'1K"Q+Wfn]"D<Q%+C;6=4Cgo/>3^u\e>8JdlhZ8Tk2&S^ac-94'OC,'mG;"PB9Mu@^n]XKms+\+-WJakQ[3=%%a:jKmJetXIqfp[
%#Ernu,XnT\*C=SPE^3mW'%Ya?61En<YLOA&dmBc^keN#FTk:kXq#kCBU$-C+F"3=<"):VjM>f*[GVJ)5c_#u<UhtYR.f680$r5r@
%$$eHY*2mYd5[,5J:74\bJGc'LAfQchaD[PQ*Ff$[K\4H/_ik9D@J+EIma*SU*Anu]cme6#3lg;LO23oHEXqVV/j(L4r<.I;7Gu'?
%;Tq>kR5@1P33`VOJC':)Td&%X#(acPMG/._Ri!=^)+tfV_pIf'hR6#sU.jK'XGQ$\,4Wc@#HZoCBWLkqNs6e&O93,.(Uq,ikP^/<
%rt7,J<+F5?E2WIX1e:sUS'EK^Fm&&#-AS>GZ(3oR,pKK8^@fOoNHOH5?d:fV$S&2dLB*14`D.R!i^qn;^V:h-LNgNJbJ?2BrI$U-
%74][m*('JkR%hto9RNdlRW9\sdP*,KKW+FKO:hj#rR'(d+>3mRJ73)pi77rU/.^VBJuG$P-k-YqI+XEXCE8DJ6K64c?j%WeL^s`(
%$ea`CHV:BJKk`HII*]CupALBb^AKrG/6,*Nr2d[/s*]bc0$1h?iIc-=_F9Z`1UbW`MM<>b$hm=3X8ciYdhp)CJ-[rfAS>l?Eid!*
%iWe)Im37<G5"+B<jf^pW3FY+\6B-U[K:Z+!`ClkX=]R7m,S7u[aUk/.a?oKoF8(+0K=$(jW"F(p,h?(Wf]emPTa2`bUHtSGN8=$*
%k-K&Qica<AC5+%IJ_Wok<%G(HcDY"/i!J"P/$5[`f!=Y?$IY#LJmoH[7n-./nlQS]=mMmP6]Z@`3u7e%%\iZLWuN+@!6(q]XC/>!
%^%^so0Z4RQ<c.4o5<Y2pU&B5#`CHNZ1?&kOnOd?)Ishtkj^.@'TClu>.ebnU#Z@p`g@C+:AF\NL$0<Ms#H4OT*e(^t-9*-D/UItB
%Sr*8b\Hf8FIK4H*]70#n=HN.^)\>=Wojs*5PS?+.':EA8Lmo`=(U>0:+0rO0g?^#IiA]>imWG@or-<:4@Q>b"&:'*t]d\8Yj$RQM
%eiMRe2e3TE%SCsNE_(FFNfc:e)mHXXa/IjMs5gi?W^>ZZCG@VR18!3_BC0Z&mO2PG7o#HXH#+&ATjfhE7$5/(qZIt!Rg4M12>,:!
%%A5tJ1:u0*/&Y*2g%V4!BWH2A]lCT>Z?GQNXfJ'qQ1FFW^8$LPs-qB6geqZ^a]<U7fdj7b17"H.2/.ZkS;n3?kR+VHHsb/DHH9hi
%E$Qp4Q>C+V,,i4=C#CB2V*^b1@l5/bR\LL9GUfcukn'kTb+UX3?onG;824^*Su5%i$*_SY"ZHJG;[M,Y7AU&h/*I1V+:6S$!Qu1"
%*>`nh`*t<N)\:W"UQ]bT:C5;oHD3Zt7Ok9;j2o]409L#kolfRckSgIJdbFMo1AEeB9QI+iRK3_,M/R/#&6gu4%8j&ES:OPD-c'*N
%58q[,'a]p.RKfS6RNC'uhc@'8hP"V"s,&U*9=KHSJr<Uo>>uaa7ee5;$TTgn[AF?7\VKm%"K+KKek:-3gg7:kde2h,k"mk3dg?l9
%#itT;[N.jj3@6r3:<#/M+V9K1`fX[tF/b++.28-V&;;tf]]e"1mCl\cLbFanN[JR`g1pK&C/uuFa&kcc;4$c'DS]Qh-LuZfRNd4$
%o/ConmX>&-Sl?RP1ZQ5T9gV<*`F`V[GJ-'ho`8s%)[KtF^F15Z`.da`d1P?<Id/>b]lF(6\Oa!)D\+mrPS<;=Ah]_Vl=ClHEM9ZG
%DBM%.Ohj"mGIaAXQn`k/K8.j#2WSLCb_%7>1+;H[,mHA,igO&a]G$d^N0aXl._:'R6T$n0h7d'QNe!*tPGpq9*&F#7bD4FqU+o&W
%IU8+7/gkrNn:47gT?obC4)+kA[,`4`gGF/T/q$W-67kYO?iI.[]^TVFN+G?iR&]q'$GHl6J.<u?eDplU(s'83O7PjY*oOXnC`XG!
%>CqqKHau.AOP##p=_mm=6(X`^.rG:rmY&,X9%tJh'Finqgl0K<m6p\<Dl@gSMB7q3,qR0<mF&V)q<MhEAgHTg@PL@?+=(7h-FD?=
%NZq/(T3uc@d8I*U&2_?Wq]:,!>Se?`Hm[%G'*HiFQq=<'Sr23^VH;KSOE4o,A!7(i7Bne>;:p$&ITTX51gi2;'nW=eV,;A=J.5/K
%&@hH)Uqt.u]5n/oD1$]Yh1(sY.Zm4n4TrGfef#_QPs=Gc%!<DE@8eqF_14CZ"d\F4PQ!f\HB=eHW5-up+-o-V8JtS1\9TF`_&MNI
%!EsRC'`9'#Us2<]-r"N5cpanGJ2L7(CA=_VXUeU5FCr'5%M0ZHQ9#(%UZq/;=9!9[/$uo;]buVVZ\:7\crql&d<5Zm,T+g=22L&M
%O@60r[r8LS7GjbNlmD**+tHFA@C!mOS]tRdH04-PaZfSh+b(^\'T+1X)G&D4AkZq%paR4#,VfCXq$,hKhI3QhF%sK6XRkgN?[j$j
%eLU3%ll.kDCFVHF@mnB'BYkcc`^_;C5Uo8F#cX<JD8\<TNgLsdF_/EqS?cG?q4BYq>,AO>T+mUW%o8fs+-`ABWbk@R$Et6U`\#hH
%PA%u%V&-W/rg4)V"\E>]-0-Z"[p/G)L>-om@jY'uVWcT/9O1Dj=\P%t'R0#SS:i)uZGk<ud<2:Er:u;_Zm)4cL.b3LV($EJh:*u]
%`#S_"Zr[$d*'YN=_rJk2_9YeG49NfDSP6@`i*<Z#-bLFt*0t"s\7%ck4U'"t*bIOAdNUjW4r</V#_d7H1mM6fHJ@1jd(:l-l^skX
%m,1deQ/h&[3HZbUitQa7GKAkAXsn'uAbL`>--"MaA<=5?:b/Y3N9GEF^]'O8[&CQnn?RQJas()q8X<75PUDI=LI,pZU[:m3s&GLO
%IZ>Ugf[R(=7%ka!nVG&=Pc?ehXFe]I[=P3aXlU%@eQS!Rbd.hB5GcW<\.,`i3F4ccVUME4kgo;6[D$"q6V*d,T5b\/?054BnIlVc
%T`(QY%dE,LEYq5AS,UnLTW^Z3.Ma`=Nm;8-%.6=7rBUSIQRuDi9ImPfUJu:)N)V!p"CiiN-'.)^c,KTr-fWjj`eHg$n;<%bPtkV[
%].f[R$\,*e+4=tc?52pf_r6s-&GPUASGE^OVoV,T<:Y!Er?ensB%&q$C//nWD3GELKp)jEqG85SHo9o&V0@r1bmTtuYSCp:iUO_:
%J-^,^#>A#VLF[3.=FlkV:@&U%QqS\`ck<=erOFD1a30.&l7hCmg,TP!Vf5"R&N7BOrV\\j*q(?upFK-sjnl'I9!I1C!?R?.-K+8'
%q_KjLA,&"%SiIoiV1(dYWtnE/F9Z=jGj]D51dO9nK#aXuGjf-B*V?nkWub!crUBQs=(,-rg^):CCP=P_=%\NSn$$TM6XQJ#FaQ*0
%mC#f@p!KO,TQQ,6ajDA,2&.-:S?hP,E`oEd>MFREN\^&g8]%eI(2<><IG\/UI:LO`iPXaFb]kAO*Kh@Lo$j!\qFqsPQ9WG#&GpHQ
%N>_Isgq3HMA:qWj0_k0ZP<jao%S+U/BQOX`:VAo0-qKW'2M2%6pi;'DoE3@f%0^P.dKXn$kJ/2HpkE5[%ErLJiTaiIFVtPYej,!e
%#s9YX*W(VJfo,99T]/_flc$AN.%W'2jgVGo,1uk/f+3eF>+se$X7Rj.Rfn3Oi@BSF_i\pZ^'j@Y)J/.Db%6r,"Xc#VrD@:Zfgs*R
%iD^b>$jNs",o`2=0iSa??;_f7NY7KBq*q\qe31r=<F\O2g(P/9ZDUht@$?9hl4f(+7nK0m#j:QT>4BZQOA$u<dlUofSojW=7pm`_
%42B6DjtXiGn/9N,fSmZ>,n^MK^$&'-P'Mm`Ze%"i2\^=a6/:#=fg1C.I;""Z#m`!D-DCKi$3$.lXk%p3:'>Ci*%_GQ<@TR:^9GNr
%BNe4r?Dua818"_HQVBTOC&-P1qME*#Z`"sk.K#VM%Pe=>MF=Ip\o(O#lZ1Uma*rDH:\Bf\)V3ij<%=7XXVqnK6fP_Sji3ft!r^Eg
%#I&u`%uh/>#9ijY!<j,Cc:1_P<r6VjOa!lRFtHeAS<4f&p@cP]oS_-N+E"L2@Eco+[X&($[N3<OP,f\K%aER/p(Zr*fBFg>5R8=.
%YYM!E=]o'_-]%ERfH@]Hjno?m@lU'O9ll,/rGW_?D>t/5+dR6,Mq]AT(-Cu>G2.JJ^BL1ORQUV`IL%G3/?k(Cc+?O7UANohqf.6G
%ZQ7bNQJIfV@^ST;Cd=d=7VujjFqQ(5Q`uJ&3@FX>_VK8Q>fM":=aM7/g2r*P-W!PP%0AW&q5uX!A-t.df3DP?J<$%bgt9OCaX<$n
%P9k+%DD(6<)H`e=@Tu9s"1l<OaWmJ49XsfiT/ThA>gfW4^W\C[6]aCj"1j),lU5V+EuUWoc&P4Q8bGrGRi`l:LYTsZs+E-@_<G<#
%=/\DU8]OudD)XbTk)oUUW[1Np6b[Y%2kY;eg,+D@;QspBjPT$,#K&0WCnMG!'K^ouf]T^k^&@+Gf#YO?4"J1HN/J"@15s[G?Sqn#
%:"apR%32*uSd-KCnk#KA2L]5XkaJh@R_/kW)OeZ4C/1XQ<$_\oRUB>hBhK*uEC[`M`PU7`qoXrH#X4#W5L$<'op]+b$Yk;'\TRVT
%RB1m.^4sSmI+2@JbV]%+OJ#X#NWZ$.3!R_"$!1n7m6K6FW7`K]"A)pa[a1<KTZMQB";+O?HaY416kV8.)/X53Lmo<h#)p`\>`WSP
%DM,#o*\%DPS-On?kme0T"o`lIOMQT0VSHB!GELZlpRAO8S7eBglA0Ctp&rEPID_dV-;k:#UfLIc<[=o"-A+e-ekQ,Qe1DAD(%Dl5
%":ISu20]g.ThQ=3k:o"^5#a"uIk6mD,Jo"VS_6Z^P3^\&KJVnp*q:)Yil;Z&!>)>t(GWF=(0<ha^AUW95G?D%",W=-@ROca-T\Aa
%bQoDsd?X.!#&l]#UjV;#.%,.oP%Kn9:H(d'm\JjVZ,gETU7c>u0,dsFUs:?(DTRodl3!PB/_F=Rg_:F#Ko`Epl"\FVT1tmt8WA#*
%lQp2*,=@@)6Z52_e#t6BY3,-emBR8L#,aa?*u&#,hLD"S0X:gS\!!5oJ4$'Mo<"*\RBo<<;%OH*oe^Zgc)!.Z6P!ih0i;!W:nh="
%)kD8jR286^YE\&Jc!tWa8Ih(d/<W$\]1K-gf%68C>s>r#/$5+86Sh+s0nrAX/oh^p)5e]D;PrtP0'EZWd^2-s-]0kVV#p']#1oKQ
%*H,W._F8KGKT/!mk^_L>)H\m'Por"s9)Egb$":k\g'1]fn+c.(o%^nW(9qQu.tRVT6G6Z[2QDc-kr@dF'B&?4Xs7:ZMi"Jo@g5k'
%)%Gjl8<u.A(\?<3W3X6?.7,PGbGuC)8;i_lS.LI2GC1gok(SF]0\Dtq`hq[tEiG]%O3sOW)%)#UK!*m:Dh[,6h(%-:nu+H2?jgji
%T`g-4RDVM#8&kn3kXf\W^0`Zj@[q%??/',a8Y1(NkBl6Nm.0XY::utCTJ2,6_bR&_VNO+@OVBE+eD0m_Sk]))`9]7*]<psoM,qS"
%JG_a-Ar_o-B-B5YLgd;9U7pd1"q)p0;kj`:>>uq7HfuJR6+="GI'][f9c7Irb/:/'+JdpD4kXBZ3Sp'iitphlH(k<HHFfee.NVCF
%X%Aa*b5B1:hK6u2-7Cfan7;7AmV%8.Pf=_t/jYqc,6:,QQV"9EJ=X,$(H[h^ZZ@R!"3YZIg>BZa"J`V/T"VUXFq:gmQaEI!cre$4
%XHDB`Cl)ZudWRGikuQP',]S%+).lAh*c.;tpuAIuf#Y1GNdN^e*>oiXmj9rP1&'*SaK!3#I%hWnOaQsV3WaZrJ$0r+\9?k!bhm]2
%bG4uaNu<\7J?ho0BJ[@0TN0*qOTc^#.C13G:V,AU19lg1gB$ZNIZEB`F4c9'f-&\r\tq=RS[(OTSND@WWm&:!J.\=D*8W,DfbMK_
%k_<2ADmD8KS,ulLbhhT(-O%dX[+)Qmk6CSH-f+aA%5E/_M&oIL6q7TklS/tQ6A.)[>&1IhK%>Vc&6-&PrJ=t:0o.OXVuf'R)MZ]h
%KfLOq3ft'RQqc6l'a=->!eWE5C<.u0PY]4b]I\'I<_jSZq>dlDCns*3@qiLgIo7Kl:O[Z=gOIui6XsVJAZf--A>62qk0TntJ/uiS
%J!Tf1&Qf:-B.TLrFt;]DYhrK+ZuOYtG9ok+%)#EsC%k)3ehu)Jm`;g`e\,2F<up'BX4o#l<KJDV==V#`2864cA":e65%_7af%p?T
%;[bY>U'7RGRV65=95c7#N_C-kdE'dW]LM>2)e>!^[V%U(@-U@N&$ZaZdG],?aKLMcIF=^#3q_]PceTN'&2uQ'U$'(9aCSL,`LW+@
%bL>Q@$hE[j5=D/b-otX/'Ur1AGm0i))0`pP-2<rdI%5"n<(1VQ<734a]I^O:&g7L]7nF+-LeP\6@3]Qr@&;63Z[ptdP)L2bZ83L(
%q0pQI9ou*@h%&HkX_e%JdY>L(7,WYAd@*ff"Ld<;*[)gOVX=]<N7k@%!Ao^n-I]h`63?W7-b]J3L<m31>?''T.c"`_&JkUsL3&R+
%C%ag&"pP=n6u5TgJ>b*0'?JZ#LnUNXh&G1rEZT//\.h5fmZ`fb=<N,`Od2X?OWP>AXdJ1Z4!OE8UOQ&!Tl!EP\q%npW55BL2BMih
%RB.>K!P26`LYdJHae+BIN)jL_-99"&F9AA;_djXuq_iN2X*8qJD"PQ2<c-jCn!gX/9D_2/C+_\i%*Eh#[GQ/<V]d'BP]oBn,Bi/Y
%8/$Q?bc0nPaJ\^*_IVl*>J1>42Qd^g)kP2&G44fkD).^h@H1067l*,pn.O!h(;(gOS7X20]o9f7V^-AC$e/@cbLV\K0&[J\X=N[9
%*9:]IpFEgsK_VG&Y$r'LE(`[]RN@kNYXeckY2=,1<,NJkZdiLEdu(O[<M/Zl7C=J`$*<[h87(;1:88lNHBgu=(*o?g`G4)bO6cH^
%=,5-eF<RO[476h#AlSqYq%YqYZ_9"h'07CeJW:naTGkG;-0G9cB#8UZ\51m>45Xup-@lCNgFqei/(umKq>SmgGr8V@P7FC)[YY*>
%o1>/UUEru\-]"+t8faWsOD`)@j7OR4"0M"1D9u>NL3iIB*NV&LlIL_pB77Dipf3ErQlPZH4G@kfBad`p^X814.Q?ZR.j*#QT5uiU
%FQ*1V.c&Jgg^"rh4^?L3B/:%^Y(Km7h$aqd_"jdShWGDS\em[j/^Pb%OW;`bUK85(YU&e=hthk?)f[NaW+/i_DbRhHRRLC;Ps^=N
%GDj>,U:O`A>VY:^l3H<rQft9Q/^`7;0k=17#:l1kW!tX&*g:i9==LbBL;fqKX?(\EiA40#'\ogomnY8!0+.Qb%Egm(4+'07^,b6i
%#fBh\1,X6Cgd/?#T)V:_=_)5U@dbGUN-a9ecGdE!B3W#)VL;%bKU]!PW[9h]ELCQu=3I*?R=ZmOLhN6*D0WRWdjJ?C"`"=V4mC^L
%1]2LY5KU1ME7V/>Z>YD%&"-fiTFHVg)7CtQ/\?n'/98Bmq$9mbEaL9jGGpnuCfW`CUipS07G$X'[KAqbkNYhj,:&1`N!KIBSCJo(
%@<Jnk<@#+%AeJ^qo>#5ZW)m[^6\)W8D8HV`:$g`m+5UW0QK\@0^O(Bj&[WfgMn2=m[j\!G'$/O:mfCD5<+`Ak=Zg>Z.1[hs2`e'1
%nAO\9!;*)BK6MLN+MKHGHQF;h_/0qdF<)\:F9E;'5og"'9]0NjUN!nJ"F3J*%E5Q5+$]k\4,S8:d=+<Zm>%1hhjKLQD]9l>gO,7(
%en=hZ.+OOWf7.-?pMsWqk=]@GCU:8^OFJZnO%D[V;m80"R'B?XLr"Cu+;*@=f,^h`:'F.sGuh;TnU=C$7]u[ZPi6t+aPS7-e>$;'
%^0.8hcaWR=R@e-FIbrFG/?m-<jjSN.XC#eFa&m^M7oDnn$1'34)i#_DI\IRS-F#cOYQsJS(D^,rFhXOlN3AsCIo>]-pqbQ1r&Nl+
%Se4[Ek61.WWQ0JSZJ"tY8)\_VfS7'BfQ$ct[;r`*r8H1-i)-H=Cgea[:id6@cK,6Xr+H_$;"k).]-/!c)Q%2QS>.Q4n5_"E,8Cdc
%UoMa:m&ba+$V_H3Z_edOKs`Z0+1;,Ll>%^O;GdYE!)h&jH:'Klg<nY/PoC!69")*[=ruN5Pk"E<Z$1rh(PJFtVE3fY9]1-'"7&@K
%j]SGfljUm%"`Ne-`6oT.@5cRi\/0K'OFMHN\=P<K)YNJhUMRt_jo[Ij)FOK16J&]j9[C?99CnqT*_p98bU.T*[/S]WlLr[;Q_50-
%[+02"B=p2XW\M:*;Mfsr'`4VAmoa]j'^84V0O8;X$"<r>[6o;203cc:gY<l56%*3$>iJZ2X_pWr,Wei#>>krIOAXYpCa1+c[7'8[
%:]b!#G`s[Q)nhMPpWHB-Vn:RSJs0LMW%&JsrGUS1l\T*-8*+R_ILiU#^1>sYME&+V`g9emrF8422&T\))<rnoUi8!;3GtcR`3.<_
%:J0FYj<nJr_lQ;A4;T"r4,UpNEtn#1;fT=[ffu3AS5MhI-fs2tq>Xa86Z0Ze*pR)i*W"JjIp'(lUG-kVqH1LtH`oXm]`>d'kSS[O
%X;p&PAp'J4WksLBQ`GAm7gW;l>tJ=nPl%iZT39`tKPk[`"Z$g\cB)U@7k0Ht)@BU*U,WXuA?&ok%iQ=.3?:O+]WK[-PUu'+T%<Rd
%7BQEG4bPZJhnIiGTr->[;"G3DE%CW>X.&YhH74EDZZ<<gBVed+EN;LrbpLCB9A`QUOcS=qe\0biXD:q*'U=D-9<G^K*Nb3u1moZ]
%UVt?0X=,#[?4eVE:We+"Y.*lXB4^t_L*AChG*&j*//^UDE6S^NZ$n4tah!5u@J.lc+KC?b,GIKr98G(+[<eQ,%t(E>95'^`Aq[a^
%qs&<0Q=;XrZi6e3G=+cfLMfgng9`=*HkNoZDcLIp__i+6B1[nF2KC>"80>HTIst;M$goZ_^eg^V.BhQO)CmX[;.NUs^XIg>Z*.$r
%!cgT==5O;Cp=N1kF=o5NI6+Jt*5-6g^W9T-g*c!rA7\,=.2L5N4@G[DUYmU4LEsJp+M_r;8)_s'HmBbjI6+jHn!`?5]2mgPU<=T-
%l;2eFB[a$YQ`&s%lS"4_cLrG"iOJAOkYr03T).!;3Dd5u*gW"bKJqn9r8hY'Y@#r"TBXGX4RJk7Sln_Yeh!:5bR.4=GbDj2G'aG$
%J=LS@!%XB<NP-0]:Wkr?\(Y/nYh=OM[3c(7S";N=W+i]88-Sj=(EU_Id01#*p;DkVL;`L(G8/9LH!@E,1=:9?_(sO9I-RpDkH3M]
%hr)4EU%e*AKH(t(]tq0B?&E%Q1j22:U1Cl:Uh>lS,7Mc$>8WqIc0Hu>HTSd)lXTI)S+9l#8<@TVS$Y*^3U:L=r(:Jfjh>,g5B#m8
%Q\mb[oR1HP@Ul$m,(ID2<PT3DN+aMons3')6*H@t>2\!dq7;If&=9JB.#Z"$.t5+*C\LU$LNk%uf@^mBlSq*+[ZUANh\?Yo5d1ra
%d&IbU_]A5P^HBokV^,P6fp>E[%ZtVE8/CgDO&-)^("&g$2\okHhY#V4[7%/_;r_!jeH:gq7>V2K61D>:V!8M;LR\n(F)]ffTE%%l
%#\rlMg*C`*-,L<V"FYi]&_Tu&]!Ej+!8hG+Wu[O'`Al`B3[hNufeV'6]V,LTIdP-.<l)P_5tF_'ABLDr-]5iL*<V8,\CteN$')H?
%*MQXYU3ZPE0"j".V/=R[m>2nO"&Y]?c_D<NmXEl4$"^^*70M#@F;^1j76cQP(LuRd&S:'XY"P"%kB<$HoiVq3]+c<aG6<&N8[[Ge
%D/Q1h"K>Qt5p>blLUGk2UjX>/>q.OY[UR??]5b7=?+:bH3k9uHX`\l/7<0HX/4`k=678Y+4togRo*)3Q?"apek,-Ye[>MXcj_#pV
%U0f0,2MXuL;a.L@_F^VUA@OiUWIPh^W$)K>+064'!SQ*K@9l.#X-\Pp\\OES^-<@KQ[b(b&qgm5G6660*XqP.l,F/nAkF&%A7W^q
%'Wt`*ETu2&(q"$HL(KB"Z<.)!im"f:=*[Wn*3S.U-V^bmFJQG8=X-M0#J3p;g9;#&Z.uR3/S&_Wf<2g8EsXWHpM@4r/Z.Sj@8`1L
%=Qd$8MHl>3b+WiuY/VB6."^il*M!IlD+<+6Z'?$#!oQ1qj7[0aBiGQr]OrETi2]j>\e1eU374LL;7EZ$D`f'"9j(@Mkrt+@3sE<Z
%+u@Xa>!@fUL>s?ie0j)NSXrKXoBT]fr0eeJ3D?b#qJrIJlJ,3$6TK%g"(Lh,U"L0+\Y2hGOA:4Vn88MXM^qc=W7\7d"&/e=)%Du6
%190&?3B!)R'&N<1%CK8YTXBX(#rZ1,9\+rn=;:E[MLPYHS49#h78q\D/-Ik!Qin*eKn,WKO?9tOOrtF=6g,RLf%Biu@3R.Z2\<e?
%=6L4?"dKKlk`GECm6bn[20NV2c4RcbKidS1W1lt0`F+W7B3W2%ar?cW!eXeG.1Kb>+:nb(-ZK7Q*',5=rb&^UH))3_]>@UN6^14B
%ZUsc^mmu"REbR2oKXP&Ccs):To9Rn^qf)#jVmRb6)66!TXXfW0\;<L$;9&[CP2O4rlHu1q?Wp'*n$,-O7R2R1;`h#7)rjZ@`RZmn
%<&YUtngSV=O5b>i[;MVDn)N-L](mHmeK+%4bZYk@UsN8;M7!gi&Xf)B)n)D?m9OI/g/Oe8*l^laL&H_LO]giXB``<%Mu4Nb1icFp
%>k[j[CFt?\_?M`A16"F?L]TeXik*7)g8f(+$#Z$aRLD@iN5Xr*JI_/.-bXqX.YE55HA%.,H[#2]+oM[`T&R=OBJ#C/B;TkBd-lJb
%M>q6;CNYYu"NDe0A_-"1dN>StH;%V13Cn#t](h0P%^+=@*p$C)VsmtB_*#l,@^)k,E5;*IQ&=(^:\scW"UT6Z.RR6f1+*G.S24,i
%UBO/(+pDEafEbR>ZGZ(*(p3PR`?lH^[\Y(JV$@&G5jS-\"+&3p6jTHqY&$1E`AO)s<'*P*Zudf&O`J_s6Sjt-R'\KOG^&]m)l'%Y
%3rSVK*XR4mG\3mr\4JgImJhuk1`IWM4Ba\r%%l@$g)XJ1/0<,lTFUDO*NDUTi"[i""5+e"^`mCd$M>TQ`>'D9[/c:#,>:q!XH`r;
%.Tc@t%uN9.%I=Eur$!sGWtbOrZS<kr3nU5o/eU4ok[lO"]pfR.[%!t/8&TTf=Q$@`-n<=X+C$W[WB0ZOZ4:=(bD3TB<VpXOSDK?5
%0KX"^4J5Wu4*1tRM&mmc[,`4agI-:sG-n9:MI=G@%Y82=`^0B!SK!H1RAIm-/U6'd"n.*K/KhVmDCB=PYU"`$=dBc?+%$(_l?.nl
%J``Y_jW=up/Y-*c4*9&cU#&%ZIB@j&h7E-P^RnSh<ghs]AEqZX^2u3-)t.bN'sd,u1iX1Nr;SKS&$psap^]`D:"q=J!e\X>79p<*
%O5auEp_p[t`#!oAhC"7P!U>Hf[#\Zl*FO]T5mGmP6tVd9l)u8iFa=<kOt9G.G/`k]c(5`='M#)H.:08'1r!a+/&dGTBTDcfA8^n\
%+pgAAr6F_5%F;d#qXcTrUm6qJlp3KY@SH@NWS/o;%OL>`Dti,&581lJ8NE5aje/"N<%LHZDg:Cr<D7e+9"C$b4W#tg6ED-h@e%+J
%TW<`k)r3)<!qFlX[t]02j<0a^:0H4W%H/ee$7@'[JdM&,6/Z"C\2Iqq-F@<)]-D=6PKpj@4$j;GiR(E,l.#toV1mp49aKdsMIi)`
%@l&X0/<Gq6\-n$GIm`YG*a4[#KF9#]B1MJNJ]1&,KSm(@dfl!NbttKn_.*aPjDd0874jI%4:%<4iibBS7kJnJD*4COBO&cn,QsEV
%lg>;6UR4<Udsc`ms$$Ae9R,!^@D<)*n]IYVRl^sjjCku_"N077C/`V'43Bs]AcIjLf30Y*BQgXBmcY;NR^;prMh;o4%$Y!^HJt#J
%7AK)N9Z?q0iStPU_jP72eeho(@3#C`qD;KT:2p>?dH5nn#h.#Jg=Pl%#H/D>HC2ZnPGpoVjV!na]RH55<T)"8hJmaQQckDX!"\9-
%o*OgEZ(j3r7oR^l^!22-lHpt:,h-9pC7$!d]H_DpUNa&>nBIIdRu>NpMX^b1r`;S''.*H]X7"^;6PSUGfaNHO$?P#B4S44^D=DCn
%1==er2[GSc7O11@j28kZRWoUV!ELROIA5foNoi6JU0FZoeGK2p\pt^]:p%>Hn+-JSRO#?[cD`#Hkd%CA'0)7\'3#.^`%l?f>G$Kr
%kMUKGH&Am#b"N9m`1#JF07fi-"0lr2g[`IJL8craXfc9*i8D$(eK:la9.PVcisb(X26`-M``Mc#6:*s;-+lF1o7/"'-+]b>7j)eU
%pRepA:Ofm^ruEq=):Fd5WZa3Ha:(]W)Y62:ljWe#V)L?1#+6/n.-;OHN,o@O16q*gY%t:>K]J2,'`fa_ku+O/'MHfXl!+E2b\.*.
%_61Hs>=Nm#\T!`90iIYIg8loVEYT4(81fBfckDk50O4*=DuX8LIQpOI>!B(?Uiqi6'<%'=KC'2s?'uS\Z[FeuWs)Ye3rH%CVB6>[
%Z%>@[[M^2>\oj"(l8FVJYL,`2?^Br7]Rk'cm_nN8R5ODhnP/^S%^tTBibAXK##5Q72(*.?H+lH+lq7TAeL>CF>n=EO_Zt[Cl"U=*
%o,$5`n8\j$)U8EEp?'(hrJ^"#S3fhH3'2-+an=Hce,>6PaUP@1l#Pi,P'D'#rA/u-MS$FYlJUle<%m^o:8:M6@SWM"$`hBZn&;uL
%5:2qI6$OPb`4F>1[>\/pS,P"j[\85;%V+ZFbN!DReS_m4U?L16Tj?Ld?`rUC5C;"Rf#;r"5dO>oBtJBGh,ZrnF$hN3Tnu\7r:O5c
%8i+PXe'Q7,o)1sd^aerYBiXfN5Nk]jh(_APNAcpEN!l5cW7lM-75T/%$Uua>/9C'Q5p!XBP9"tY29Oc9BS))*s7'Sm1d/4K.Uo/>
%E'bo#GFO_L_ST,#ghD(\7#XaZRVPhl^cn8!j0#qYOa4H=?CHn=CYo8tgY:L[5]oWs&^Mep:^PV"h"59s5#Gj:ZKL-R3X3&SAB)!%
%'+h>X9k%_\Ma5@<@-5foe8>OdE@U.tnR@]q%R*S5!9pPt<P)r)1,+];J&:`<9C]N)`t5(^.m*e;"Di/.ZL\LPaPrP7qJ;]IW`!c>
%617^8]Q8g2&5F]p7hoZ'+&4*A:,mJVaCNHLm6m*:\L&tLaQICW0cQd[,AJ=Gl`bm;/btD]'ph6s"Ih-(SK;7!UAK%sWlNVYIu!k3
%0@4HNY]mVk"]oSY`UA"87_s85lQ_;C]BXW9UY6Up\e#i5GNc*7GF@%-mm%lH/u<EH<QjKNU:>JP#kWjh%6m_Yq?-"<Jhks]\KpVf
%^KqpE9LOc\U6H/Or-0gj-8^Em)8/'d<DiAUT$FBf-\e`YJk]L);KappbO_VfnXK7#Ce5H5^r!,Xo.YJk]N1&.Gu/<")6N7]O^8%$
%(kuFg]$6XXA%",YDPI:aIQ&tcjm@Tp>e?YacFV!if6KnafK=2.1*NXQ\q9.ePXN"O._'AC2T.VEjJ$*3_5nDW!TX?_)0lJ55'Y<d
%lU-8F@4"3J1QV6I*7I$>UVDF-gq\/DBZoZL-Cntp&CVlq)p?OJ>LlLI[aU#=U1%3.)CP]0GCJbYbO3u=89m.ZWuX+LW5fe3=?RgC
%%##/9@M@dM-PPae=Tg"mYDi%BakI3RRV-;Q3=W&"RlNf=N5n_PCnBiRS9&s(=/@:Ge@\n#;jM*GAM-LZml=ucRG9irUK%,-#>scM
%c9?aEqJ<ItI=(;&<T`h5WV$_>DAc,bK,MEq"'V#t98?GIc[94<^DfpTCi?m&\\\6bS*J@Rgiq9er5!0E0XRla`ia'ENe+V&Bo0q-
%^dTP>`1m_7^A_6^rqn44RE+,Q&Q9Ub7FpE3Fu1G1N9.;QLlOIr9InR3*2DY.#-f78"UV"$'uRig,o;s_7Dt!0LfC2j<7CLK1?6/H
%#iYS&9Y>H7`GL^eqX1fMkssGi9tH@VNBTYsn,qrr5pd1XkD/CF7Js/a%Zb5amg%]?Ko9R*]PSE91Vng:oiC7:_3N#B\ANV67<89R
%eMVH>"kH=,H!haG2oU;1E"GXj;pJET,:$sk\KGFuIZ"T:Pm06+?##R'$XpR4\Vk:L2Wc8>Au-;oV6-3.m@h.a39QM`hTr3<Rn?1o
%78LfOI>cqmSlo23:UlR5n!a`W<+b<tT?83188;nor'YKFTJAZSENt0`7.oE^m^')qkt385NXIr^PNlJ,Y7CFRP//IAD9?"V*JP_#
%noF9QfhWT.SPN28N&p*Ca\A\i?W*'FdMt.e7^?f3.n@ct2XLcYCS"e@%9r(rHE,sCicX6;H%VU9UZas7q-Oab),cQ=PYU$?F#/4h
%*Y0=%@<X4VQ#>n5nbS7(ah0=b]).tW3Su*L!Ia6m%(7AADK6F1AVcrLNA3WP457+_[=ZWPp>W$`co?c7/_f3/$\,[_G*)-YLFq%T
%_c8b(@TnY\(Ki.Oe+BfV-d(/#KG?:VmNk_c*dr;"lAs9$(Ie.2"R>39[B)4fEj'CJVj%BUf7Do;_$(StBUos<\hhb<ST+;V+S&9:
%eo)*7PkOTNBHmQ0+U/<#o-hbS63U?#H]/]X-,&WR-^pM:W`6W##=Ee#<Mh(H4;X!gEb1D[Hd_4ok[F(?NbLm8E8;6ei3i\0pYgse
%,3I`2</9[XN>JK,pC@i>4?OK\jn%I83Wud_0#82^jEuN=!P+jA\[*aJptd@7ms'Uu>aT3;O^$[CF=!dRgs?JXJ=\<*AKjNRL[^C*
%Cm5DDT#j8t(4V<E`6$=q'O7<8iP5\D7!I=]#'76.+j(RT-dSK_&(07B(NodZ-X(q+GW@SO^k$>SG0G;\_-A[98EI!qMXMnT=1pg6
%4uR!&hpM1:6AlU$3KES57aG4T+hVMIcFS/lAO.d"Ba$[a*U3fMkd[:9F\@KI+u->uP-7rdP<gnR7K(Jf;n@7EG<S!L)*FqZ&Ud$S
%QEQKOLXH`+<Giqu*?d?jq@JX$)0uM<p:[g4r#6n*dZiJqi<DRK@d&lDJD_bC4>R27O't[0_lX,I6'pi;"Jq@_W^Sq4k-#nQ$[4uA
%qKDI40$"8&Ls0"dopS+oGO1`UadZ(N-n[Cgkt:Gq5eYQ8J6OX]@#:qgI2N`BG_AK_]BjU>g46*^-f+aa+!EpZVPe.<k6KK0$=+@P
%)BYq+(Dq^X5oI5=84;+0%,`X@k%p)"hJEZG-ETEBXt!WAa#l7.=U&T5[KC+)BmB6gjt@NFK_/Xk5XU:#-h11nD`>2KlNJ@TJ8d/b
%9b/4h./<X1Du\XsOQYI*l5C4\fGTlgT,S+I]G@7;BWc]iNgL`Dq'D\%*\e4B2SZR"gBBO-PiGO[&9YKUKH1W.,=H$&bk+EB<^'Ib
%?M14\eUdco:(+E^@hE1<LO/4'Xgc(F'scbt7EZ6g&1n"ej<\At%HSIh`MA-E&$@Hc,mlj;"M<a,XW7dA!O7_cXUDYg1)2e>[+H!4
%HC2Y5-1B3m/W2UOL40_<`gHmi5=\,]YRc(p>'iC@o1i`^5#V]mVnGGu%OoN^6SYD\YP"&!R"njKJeM4eQ'(m[@Tdlr;k]u6RqpB_
%eu*`:cnF,<]4G#'I_PMM"ocBl!Fb=V,`06N2B%C>T$=gK<:.(O,VV%hhItod=?[/iDgHK!^6"o8#79CL0mr1^e5=:A.<QA)-AGuI
%&=b0.TufAWEJ]UVao;nUlXI>9h[N!k(ADuS]Zb;i@qJi\`s-tB.Ls?0E8$((_ph=n-Y1bJ]FGVnK6o@+gDrEq^7j-N#Lm=<fPm\b
%3$`bcq5^T:X"m>c<g,Y*^'SZ(M5JmY=P?glrrf(KOcY-r&s!\hJ4'&uX&q.I!m`_UfUt#3EVmZ!^a\/hkUjon[4mH;;X]]>\7tgG
%8)Q$erOEunG9>6]h8aLb`s*kX*n'E,g9t+>bY@'QhbTX"$M)bLA(t*(WU7$"YFJW^V"7W\H]ht#ab/:u-X4$_N9(+HS!p`agk&<!
%DIXd)<ACmOpYaO6Q?A:8^p*s)/t@/N#Smh3O_k[&AhfC01=U\jTj*Rc'+?-[kXCNR>!ah%8U!C-Oi*/(47ah016-^=8"R`AN=qA+
%$7H'f6'olb@ka%`AF<ccW8bG9@Ml4,;atmq_+3rTH0TMM%d/#AroZk\$7tqjjs"k%!fG7ebd(f763DT*B_Bf3g77?BrS^hCL]79"
%PME]M0Y_?`&j"M`Fu5Cq7b])"j`N)]"R(guS'cHCd$(G"R8Ke[LS\>UjlW#c_h[.f89T3TGo_7)*R+!dXM_7"@8on!c:9B;/ALj^
%+)[YJ<O:In?_S)p/f0m=d%,L$E[qg2UPN'4b5DadqM=qJ$;peT3srR(FSQEb&2buZpdC5OS+3K!&V&jF`<nSoB?4.]H[T_&i>-'E
%B3s-n=f&!hN8p$P:cCQMBHXALs'EH-+:hpI$3G-U]u]7]]Vg\Io>_h[Lik_4%g0Iq3D,D0E"3AV>8XlD:gc72iVLSa7OQ46cL,F7
%3f#K$2L,Z<91kVrD.!:)oEg>/n<56DCq<;0J'l9j2WI.rr1Y<N%$C?"_a*5!4,8M`O,tp1.ke.$Y(#A`bL#E`n.!MMB6'L4WhK`7
%;B1(G902trE,@lW5TONF'r1*qARY(-Ogl[3p\li_n-7AK`A'L`Y"'IO8+7dm0N=1]+_?;%4lHl%IV!OI*-,h7=>3_^r!nSBVa84%
%cU2>0EP>j*okmVEXe-RDT&,1^8E+le,7:-$&9^<EpF9'l8\]g9Fd=7f-f+SSZ[WlmCHL[<rAImT)UK[H(8bu'mg:T`UY:L>C2J!b
%`CIJlDFA)6P?d)MK<<";<glD-cMj%5J=gs+2HL^)4U1NSSQSP3W<i,*j7U*sB4o"9kRIc-g9hf1.,W3\h*8hF+5D_PF8`>!;H\o`
%cZ"]JK9M4^2`JedWZfTpIgD=Npk+6WgE<P`BCUh!ln?+B:S86rp[[9617Q]W.,T\F/iW>!E;TTu;*&qAHEfsDk2a^/657j/0QfYR
%kbL6*aWsZ3[l-qk>$io]C^k"F9I?iWN`3Vh0Nh(SHDr>/:/dS"fL!7%eg7`%`F8o^i&aGU>`q`"""3u>-)PE!QB>`01.H,*j1r(d
%f%GP,8NOs%O0]0+[UhcGem>X1rbe^f^]\'=;$Gq<PF7J9g)S@t^.tORg6A)54Vb;MV.O^gI*aZbkYQ#-8.`TTS:pT"#BHsoM^GdO
%kc6UHpdr##iRJ2<.-fi9Q6c7m8s+D_lG(+S?%$5%Pf%j%]a2!-SJ&$QWe5+7RS<39f1g0/%nLL]N8oed%ZW7h[cE+L^qPKF?aMgE
%EQpDJs0B+Gb!DLc^J*cb(Mug]rA"i:b1`f7HU(-T`bpH=AuP.8^96!i_[i=:D:[q>T.$>YkK0_<b^7#+HU!/=U:.A$1`Z)aKM-r@
%iWI#tU$7C]M!$:kN!$m/&4+2<_XY"t4f9cTI7L(j*-KT93V6>?UGMF0IsfneJ%QT,5uoQXr(]),3HU$Al*to%s'@pk0GVYGT50i2
%RG<JiS+LurAYLJ=#N=#,9k`gl50Che1\j;?^l54_W?N8%BGlDAV;SIAZ"J#_JZPb6Vi@A*#Z+@'&k"aVFGesrT+@b\5[c[_,C,'$
%%$`<5C%!64nu#KA?I9E8F3oOk-tm0+o<#'cd-%BTA;dWceZ:AgV^W@O;3!>-(+3Q7k7r:Se$,Hf&:q.qGRA=8P6q@koKIq;QT@6;
%n9&u1Bi#Z_J.7[h=H;h@6[0LpP>gYA=Q/%THo92NkoOp\,L.T.:t&[ji0YL\'g-U4',j#-Tt+Bma0QMDRUuYuQ'2O)q`hlF^cn.K
%4J(b7o@NMT@l%3a%e_&@PA4]^8mBn-EPPC]bT_9_)cf=:hk?Gtfm'0n,]'b1X5ZY3SR'@IDrjj/=`+ch)X0VM*W9PNVb_6Ka=#?/
%Dm(<rUQA"F&pNRa$Hi?ckrZ6B+m]bBlZ=*!;0'&1hpIq#(fek<_Ui[2d?(D<.LuqtTYNC3[a1YNQKrCHFSTm-J8JVM4!C[!*PXa6
%`XJ.2]0Vbs>#og2#)BWN6mcnd2N_,0o(tR3YqinX[)01d.M3O"4H+dGV!Db,;NG?uk/h9Tg?<oO6,"IKPtJ<(g[5+hLo3ht&P2Ya
%$*=l\?!c8/qsJp%#tb\b9#J?21FukV;pjF5\*/?/gHtY5Mae&=#Y!Jf.*()UQQP+;0o=*Co/bg\A5g+cBP74RBh;j;\c_<?i&?N2
%UauGp<6.!RC'OG+c#D0ANm6S_U`F%L5W!Q[@:#k^J(etchK:NrA*PJD*)Zn7E&9U(I?]\<35W*cgeeu.$KsnGe#G!gm'ki#Hj`E/
%B&.u%D2OVe#>25t`)[FF!1IaCe1a5U7.MM'=g(:/W)">[ih60aS$bGU@#u$X+F!(ST,(\;bS3[p/!SW0-'=<'7$@MQT<iC6'-7U8
%B72Cm,MIrWifgNoF;Op9lT^R02Lk>!`e%>kJO=#'d#sd!g[\@P]RI.RN(;5!GsMPFm<4;OR*&_07!W@^C/0$R&*CBZ*2ILW"!(hs
%+Jt"knf^-8d^?Renp7PKD^Z[B5eD,hT[s/;qAj`fOOkcuW4?0oEYIC"0sEo$7:`l"b%Nes6$mQieO,hFi,u_VP64$O,La#4]jt@r
%,qXh\47QI,V]\%QB==]o&m5d'_]BXfh$--43q2Lcp`\H5/aib9DO%ps,Timu^P*VG4M5*baW]V#N>a]+%ln;U4S8@i\$D[g;7)I1
%mm[SQXd5mn#UG(B3C"?K&*K71j!HKpMT^#'oaE'D7F).p1;$RONj1Z5.a/,c_VnH6N+G4^Zh9Rq[3G-#`:oTb6I!ejbm0J)GDhMI
%48;hi@`\XR%U8(rBUVI&^&>t\/SNVe=fjo1*O?=p3_%NlP1=L2IjoK-CD)?<#Pch'0uB=1XMCN::)V;!D'TM&cK!^Cn]S=@m&)*L
%#LpC?;H!\>-"[*)(&qu->*gQTN%fM5-t+_qa.IJI+#('Lr+sL1CFk0-+.i-FP_i/Y8/*k*L2P5a"(nM_'UtU_FqbOr[Pf*Ti["HJ
%ou"ui-#R5(gL:PDd`LXr'0l^=BA8gN=)5.2Tl)/nLt.;[AOEN^l$!EuQlR[nFC^]Ykj2SO:Ls43NYP<tDZ,K:WZX!PQYP@tFd.&B
%6]3W)YZdcXHKYG-HI72MObeVrWH@j:O'nPK@-]#2?t"<De4oR,P"3/@MTT*6F9-s`L&B`Fo*h%0##-VsO0K,$$gh;Q2.moAr7np[
%0/uY0WE.2!Rk.qVBG:J-A-2lM5\$hG8.P_Bf8L).FU<4S?=609FZ$$c'4Pds@N#;qL]N2I9jTu=Jt$HGR@h"o0u-BtJH:9A&G;>)
%?+5W1XeDVV/ZfQnrTma/f:pB^l.4U=_-qpP90VGg$TZ&i]$c804F/$Ccdr_sB&`Z-qH)4#82h>4$6G`'\EA+^V9T0LZe0#kh1Q'`
%1>dWT7YBKVdPBB2TR9_^]VP7",:NV=XB4H=O,A4np\'+&0L6Ce1[iQ@/Hp!GX'6Va>+"Tp^'j")4V/s^Eg[pjFp9A:-N^Tc`iKgm
%#X\\lm9oN@(V'UZ*QIkfRmX7XO6sXrg4sa/pP>0q:<9HsBl]rp`h6XV&.L6\VoaLa]83^X]hq'CVbD!Fqb<t[#*"gY+s+>f$ji.I
%%K90V<b*Q[QbUD(EPB8QOc9dgNkACDFV82:ZCr"V;KT.P@?pIY_%(Eg9qB"nCa0LP/E`9?+pbas[.J2L#;r[\3$lb=KPX;NO"6/H
%RJsHl$/_#?o_4tB=.#-tGq-<Il3*bWr-:'5:QE7Ff1CWXZpn2?"j9sc/n>1/#b2F&G'1=46]SFoaVG:5]b3*S=@h3!,)M&,=]k!0
%M+TED(^#X-Re_'m_?.R$50HYgkMr#aj:J2r0?0rYo[)EDra<S/SfV0.f/O_$Oea[^8k2f5#+r=1Io-mqS5JCg6W)e4.(X^!]>>?"
%9I2S]Vp9T`A:o3Sa%r$OD#75U;;uKHoB%a=18&I66L(]MDhGI$^hZ[1[[V@<TE9T2lec`cr4h^N@)'<Bb^uphoB[p.1GS?7'e-LD
%_QD61*nI]hpa7E-NNc&>$,3AmeRJPU=S^kV6U&AIbMjVb8CB&Cn;^!.j=YOk_ggYM?s('Nr&)AYmM5\^,9H";<n<,to5f7!*>Z>r
%7R%<MZh)[!'E'MUq3IXaY_>KRVA8/plAm\[Hco1sT9qkD=@?cl9Eb)F?eaCDSMD:b(;GUQ_uN;*]V$T^!l8%19rS!!%Wq(A0^h\$
%"`4$:BJa#$Fqe*Ff9pbJa:Z@hc7=R'gWN@n<Woc0.X4Q5e9Y'$1faYAGen[W:JW[%/Iu7K_#fi]F8uJhq%/u#6tL"`I[eEqqed$+
%_5[@S5UupOJ0HR)J"::t"gg)m6'CI5Z#b^CJDkhO&8r*0)RGI2nc0\Nfg1go6^s<9BHN6T[;kf(Cnl?H#1)<35-?3,MMM8A[FXQ;
%@l%tm*Z3E@>t68s'r-LLXcU[0FdO]/[1/[a#[$cYLg%d"p8njHH9:FUT_2M9Vr9m%30E2[De5KT=lkKCb9l!SE5J6l^\?3LS3F$d
%@`/u&NlG%;SUD/DqUpR3fak:!H[F=5Kpr-t9P6#QCJTKEW'RF.lNc;`ET9^C3g8NZ3&TZ'"BeQQO'@*\dQI!hYNpuVeT42jAqXkc
%I2rZm,`&7YOfuEc&9=tW=\4EuZ)co0!))Up6MW0u=$%A6Y2_"-F*4Ck2B":'?t1=olB2aR-^<)=SHUGa-+@uu_%.J&nK;s<9uI$;
%Of-*38nc$V4;F5uD9dF4h?ja86%cJTFnbj6&H5*I=>8T(b(Eh_s.""B1T;!H0kepek[dT7E+8%1Bfa*M#'[5XET/CE>[$+CponS`
%D:s*Hj6Xs4,3(%d.,ag8)V*7G>qpLqTG&2ij4*Y>"u/^<eCB8iZ+5#B^'/sJoa5:5M43"[_o9hVZSc*)jo2Nr2EN8h\SSf<0;V$/
%Xs:&L("<g)o$ueqSHNV[SH)L+90J2C3nD@T9"=/a#n*<Z=]t4S)%D(Q,uM%QE.oSl,_K>/:ggFe5h27`Gt@PB!t*#494GhW`D$Kl
%4R)8E<UW^qVY_+aku=9KDiX`[#78!e<dWs5dA/d3_r7s4E'[2,Zc6crb!+@@V!Yr16?YbVS@\9as1pOrQ6kNsc'Q<s!G"Yrp3@[7
%JZOWsAsH\QpHPhJ:0IC@^HL(EiCS!&:Ls%Pp(NGX1;/fcOUQP2AU)^4Mh%-34Z"D69l9#@.`!#,ruRbGBPISb/+pFY7U4CDE"Q^b
%!Zhq&\J&3?-Tld(fmaGe]!_0:jHnW<rNKt/Lc4Wo3(@G`3'fa5<t.CL7hS,?-Zi'D_&1+?nE!f@7tZ<YhACT7eF7+P0Knp^LrU*D
%f3S5@7obt$`n>TrMV=qP<<E,5DSE@ag;G[LGU[)lWpVqE'#T95Q`9b"XRZibJL@)XKmn"kJ</%GZR2Q'(7"^H-utd>?Yntj;LO_k
%P-Jd,#*I:Z#VjS0DF+g4_o1sa!c*:U1>NmlOm,oocO9S`8+5k*5<!pQ4:'<!OBmmY?Kg)a:N0TTE;$B!9dgfh#\-W+$Q+/Q@rE`(
%V'uK0T6&99M0M-EK_%5Bn!1Wei#qR(_Pr2L)SGu!jQ$I6GTB1M3ia7H3<gU!]O5]a.^B%>on\>Kn?28r<`9U6ZF7JoXZt:aD#X%Y
%]e[gRhf]R#Y?bcgPbg+ara=4:"Q=H':&\9bI?qG9gsn7B&Lk0U6g)0bq\*gP.i>`ijI^$/;A$8),d2>Ka`bp3B"84k4'VP&pZg'$
%8^gGlP4[ITR6NU4']tG"5HQJaAi6?!d-ptToQ8J*1qKQb4I!m`4AeoOqc#?F11/enn*U=n?I\Z=s3Z7)>)4c;p5J$.F!a>tYj%!@
%1/*m%H%>`fIEpp9#,U1qI<R@9?SuJ\Zn91@\29g6WU$k(/h"1*4RMT9akY);T9qFU>E#r*]TCWjC_m7EJd"'Ngj-(,@SrpEV<I\7
%'WorNM=b-:B@UW#T.Wnf0gPHiFqg33>f=A2b\%rB;X1HdH(UO[k:m1AKX1H&kI_1#>k(EAY1OZlM$.e7@b5J2^`&DU#%km%YR7T@
%gai>[F6-IKZ5n0\[ahFLQVWW2?Ho2Sd/hk;$Rfq-#7'\g!oZI0iJBp[.r&3:rnG-C=*O#\O0CnuREG7\.6>]UWsGi\0fX7+iE.6t
%,J]0JR#1]0[*L3gXR<L1Z<NgT$:fJXN$k!#HYQ_8O=AEX7IEN)./gZp#?BE6r6[uYm,fDF)Ar+#=/1E_,@Ho/SY86U<>]rSTsRj1
%r[HY]O>13L0R>tJ!rK>tc_PZ$c-Q(]Ze%SJG0iN0+ncZ]W#3M_:*7b-O@a,(-DAVAP)ZM_X/hMb]FmPiZ$1VA<p!3N,n6a!5o3.&
%K9p-/,V`.g=:F07lL?Ni]L3V(,@ZHEh5Sd(;dW?"i8l@(RXA$03&<<N?a4\=T+9&Nn_5a"bSs?B;iZ\sjm<Cm_L3o>-QW%D6.VM#
%nphb<U>o/>M5Nmk;i]0>c^/;$D/X:iV2;F-n9+!QmJ\X1ec0u.l%;btitEH_WGG^MemF[Y3k4d#E8[eB(@u8brTqJ<n<To.JLje^
%4ifW;+hp.=jcbSE=l0!*JMcB@6R;b&mRqWZ]:I^SM)K[J0<t,"boo!O[mYmW8]"c1eAQ!JOUrQVgbkPg]'%DYJ(1ZpQh`s8+*`<*
%0foS`k&3<eY2$"Ri;njo!6MRj\:SsT`llVnB179nc?H`r_hgtR>Vti:\[Um-/s*_lRUru#l0!J0="KKUFI3NFR<9uSh6:d^HreES
%b!Yq4\2:o_<0HeN[P\9/M_O:#[a3-DNI`#)qlV'-Wj<2/S7]-1NRU7%:a--)a8>dK)FlUPjh9)'%53dZ/IO!M.js]j_D8:;8A\<e
%Ybfg[p8ep4^CE\)j1WMM9j34Uk'#EtR3A>bbDqKsd3Rl-G2*bcG$JR0AhpK:2g_XEVaMq<*8#B@mZ-HP3!"Fk4T9>7p9s)N[J5c/
%2J:caJ)&&1DRcfOV!GbR.Lpi42r#)%2VdoegP1&.o@_ptKP[?FNpE!X@-<OXAf*_UDB&"pD>W_&\/3Cp4T.&X`_o"Pcml.M;Rhf=
%![)?-da/oQ)uaBD)VRJ@pC1sIA6;Cb16J#;_7cShcekKk\9aC8#HUQe22fKLBG)D@S*U,>DWamZ9;XE65qs<@)DIngp>?.Mh2IEA
%=YH'GM!NXYdOpTQiro"OhTNQ-iEnC^XK`ggcj?rd3bsK"lJkFFK;/<aGdbDs<gQ$IF1\WH4gZD/A+Qa2@/pu'r)-/c!MD07'5Ot!
%,q+%:l;-[ET<Kgdbs:!@W\jHSK5ndDlh&Ntia1bC?=Gs#lZ'lqPQ!&)#mt]/lL\A-g\`h<83aiCM-ZDNEAdFd&q4+FIX:j=^sV+>
%>Z:tfa1MQ09fB9uGZ=7PFtb`N*QAp>lV(f3,*>leqW.jB8dK6##?&Vn:KOq5C^Q@oW#_9]8Znqd:M<kf&<osGaLm(3qISfrUSnX,
%)W.O))[QFRn=+=:dP_Z4n__N&G`DdQ*iM95#9BPK8aJD+:Z6"%4>.sn6P@1Q1pR8ZMm@D$Pa][Q!apVA]!Hg]21767O\^V7-eU1q
%9F'Xf!B'-a+D7`_>pn)KI9^3rnanjJ\T`m+j]u448$IOf]g@I#'=VM4MD=nB+c)_EA-5=?Qaejr)V%.<#*4=^(I(2IQ-@jb=;#jM
%CQ^i64[LTReKAK[RES5jZrR:ZM$;tm/P.MQhlL*lJ8P`aR@I6(OVALV9">(YVIubD5PbeG9fSQi9oV8e,j`Jao5F1V##p8nRfk5]
%]3!In/em4hKN\3'_,&EO_$cE-<j5<\BoK[F+?$=@6B4Hg.L=/IFsa$D-ZC(Oh:)4AQtR\2@5&d89dZ?oI>/#8BYT!t@klAM4;!Mb
%9r(5BMuIP#-i_,QV3.k*$EI^cb]8@`1:!!s%fVjJjAdpd#iFW'0I#S0''U/-mFMdM5qdkC6">Wf2?7Yl2O,7KU#8s7OX-"Gs'.b*
%d12aLEjf`J_?p!RP5tri_,etDM1M4Nj?uKm)e-4W?$$/V,(90g?rgcbq1^%c_qL2l9hr;#mW/.ed=@Xd_c>OP62uoeRC9Bh&,;_1
%7Nn-P:4SrQ<bC[Kq9a?Y+@u\lI:l#3,8_;O)8Rm#&]XR^f]f3f\-+&HR3IIG:>6ltAr0,,rrQOc,TnN-R,Ed&fNUae&c6BpQo61Q
%]^>\%l.#/br9(uti&IdFLWE?KUVOqkWs],E5;J<GSaXq,E$Ec'V:ddZ.&%S4NdUDLCuIO9P[UoNq47\?P*u!NgJMPcoZ2%bZ_&fa
%o+67>[A?`_9`aK@84ohN6K3tkU9pliiK2e[iW^mj/7dbBmG>m553+@<HR8GgPp6;*C#iJNk\m[9,$@7+0-$9(BJ@4S>\MV<6hVZ-
%hH<<VFr=PcaQXLm$+WJ/!+O6B#*BM2W?:h:X;PFeh=rNM[Kd^S`k"_K#hM!m)mok_f%:KXHt^kO9m5kJBYpm0s$-S[a&R!E2cMDt
%$_rTk#GKWe%gUclDO1ekm(*45[j8G:Fs@7.FpWbQ'5=->U_j"7_UFj@ENRrc1Uu#f*e#rhO]=N]Q#keH_m7b_V+TGAWt-Sr#nC)T
%2["m!-&_fkT:q;ge3G-/l'MuAgr8rUfEK<fADp"mW^Sq0'1XeYL&\s.4r(DY+E0^ROi'G.,VUO&M&/9[Un.dXi+T;ZgMA5_\FL4r
%><("J8NRH.QX[ifTqR&I39t)[F)$&3(0`7c*0T8.H*,=D,FFR2\egaj&3rb\fY:5/$:8[(&VJ#onhhlgla&#Un^>3`0!s:V9HEZR
%V!k8,^.DM=T](uublHb2gRtH)>59')ZX?/DhS2o&gP\F%cD'[4c'9/_\jl%-jBF^[WPPF]aXTYY>\m"Xql3\,"H2]]O.Y>CS78>D
%W-1U^5W\BZ<L(pt_0"8@gM;iA2l9jN;2e%SrK[6b;fiZ]+>BK66*rX-&6#Z%@L.&/l%^QYRlM5X1F+V'I]G'A]`<NX'!/(O.(,K(
%.[jHi_QM:]2!qX"R.>Fhj'Qg4IOpN>'0C,"_n&##`?Fh:7*VfH#7.2u/3e,b4GajW2[a=8)i,W)2'k-`KJo)bNX`r%iW>&XKtO_4
%.?WN?0SL>\_Uoe]Xk!qL*1p8h(UYDe,N?g?0S;4Cnj>C6-5nm&&6.BL+9jKWN0>lO]>T0Ek)6aPU1Y+YV9-f0,R:\:OA?--EX6aK
%SsbdiB,^`gc,D#Bm@m^oUBk(*%Kn^V@q[>@,XtDb$-MV=4c@\r&ne?b4R"HbFM<<2Y]Y$DXa$E?"%>o27n$:1"`J#^i*.>qkH:p9
%o"b;pd<k<<`D7=2f#B(5d_m+]]$ROR]#Y6ZUtKPS6YERPjpQ3`_Qu[sFF;NE)rfKWfq+!M[ctUVZ##C1!7hsV.Yu$B3eP7DgWrVJ
%d=V\.#Fj?\.U'e*;ZJ]tGdRG/KnSE1$"T!1oY@o'GmOJAA&Ac=f#(:"^Glq7]%4+&;SZj.F-nl:%><qmk4$^nl42feR0A1-:dc9u
%D[dq?#6tFNG"*S=gmcQNB]AT")pde1Ohh?Z\H0[6))!DRf$OV2%5j9nWiSI1N&*I]0aIR]k(H;V%06u&r*/M-&JQCBRQo"q=V5`f
%iQ$?KYlFhI(5q&9:&rj8m<0G'oFgcd(#L^MR;Q+rbjXIVf&[b*!XS!S>NNq-5'.#ImMmKDJ9D5LC-ttZ4/98)"-qWNr!qt#\Wrag
%iNpm87,7%ZKlEC/n$.#nEBbtd&%[`*hLip+Wb2W6]C6B2g^1cq"8)kiop',rA9LUh"q=gcLVS^F@S;es2EM8fp]SV=h%==h'Q#tn
%9n")K\.SRPlq$c2hCN+k[C=5`[/64=<]0it"'e>9[O#n<KkR@aR9o;er5Xd;LmN%en']Z`Xr.K]Z'Hd%V4_<VD^&McdMns<jDtG>
%@WA;9`]."M%15YEko9PjDej8W`+5IZE"]IbMY4kAl0ST;_2s[kB@#Y[ppJ[0*1EcI6UTY(Ob)sJo`g%HA:.$InHDn5pFcI*[Z8G9
%Wn,7%%Z17a>hl(I6:=-(_'(&Tm$_4A5qY&WCCoG^L4Xf"!&Kd&@"ODNT*6K*f9A/WFluIAc`p'4[VS?kQ0(+LUUme$qXBJU!f?Or
%Z6(t97UfNG@%Y],\54:Dpci?V80f=e=+Q#)$2H.6^-QapXnWFfZN>dA"`Ud*%E*T*PdhC#H6g@Y",)@eE%eB*H=tV'Y9!LVPTsQ"
%\i'(1qe%TJc$>Us!aabG4mX.V8f2B,-\=%(6;to/(.Bp0OOmZSEjuMCpLr;@SH]O:YT(K,n/K2#<;G8%[',O)YM0(*%tYGT8u0,"
%\cmWs/_]1?_+T=R)3P0pXW5dnSnY1Y+^0jtN:IJ@k`]GF!nk1plH&QT;.7SZ]OOK%oTQqRA4P'uBfCXk;nEhZhMepj#=#A,-_@tV
%N=T;LJN36FYNk=KMc:b=,g1ju&2`1*A=^L`?-/->h4B4H7Sd9BYXH67Fi<;c=FQEI6J3Cj&CeQjT'E^X(1r2o['7lm3GSD!4[O=3
%of,Z*!KIU$GB\8BWc2OaGOa_9G(LN([/*Bqg&upa*aMBZ6=,nOgRKPYTkJT[B@-9PDBCuUe5iBQ_452pm\h#DZY#'O>)UgJ,!9!?
%K1I,B],@!,1(=qZ%O.CX0u^M>qF8dmM7]k>(uTM$(eS4r:JbWjI=/#ritHfIImD[2Yml>TOogUB@(:mH],emOWhc/@mg>?6rXP39
%"J]=*[*-AQJDeb5L[?+6_-bdX.iLLW<j7NYRsk[c*<LkXAKpBuh0GnbYbU@)KrhDoc9l-:JP@)!1%aV7"Ona]ELkc1(f/M&$"A[f
%!YG?]^>7#t#>Y\'jiKd>FVaRt$UVs&\dj.bb\%r-8,ki3^r$tg^]X<<\U\kQ,e62nmjmH$F%&*@>>op>T?N*mPC<BqAml8l79BmW
%l(GT86Kf8Rj&7[&g53l7'>`'?e+n_ufe=",']Pg-_+K&TkRcg+*/#ohrBoEOb?!8M**&St2scT!F_pNoP>6Rql0AjB1!X4d0JU^*
%nH[jpQrb,%Pmo`%:cW3#Ze(e'9T*[>(&:]0$[mRoV`\P<'l[)7aB6]aS#<4UE+?]:M-VH%\c;B"H@j<7f"-nUI??->]pZ>^-O=Oh
%]"nA67e3rdAt?s"[r*;T9eUs34Z3daC7P\Q-PGuA_Tr=^dkhi=Lo9bCYA>ZLE4LW5[Jnbgj`V:kTEQ"CQl-8t'd.@MjJ'esZo,P^
%/n%F6=J<-<@pYFdF_C:=__gl8anL.sJ)hdJ2\UQ:&\.q27B3LX=E^rlBBj(F>71a<]on>aA18Ff3HO*gQ-BB\6&gYmN9I.YD39kU
%+t\1.\1Z2TO!BhbO<PH[IBn-0S[fS#&>JLGL"Can;`oN%GALe5;53Pa[pD\o7@,m;(EmY%_JtmIU$"UMeq-UA1D\S#?2bV#,1F)i
%EfuJf6"UuubDI7@^#>AL#%qnR+^?5/@kCnI9$,emW:Fnu#P^6n6@clZ`hPL@De=5Q'oa8leQ&6KZ[2'?O^4j`egf.L0_QlFM"B3>
%Ig_n#-ZgRqO9bN1b"5@D'q*'Gft[r%rol$pG`USj0MC_cGK2Id5u%R9ctg5pX_Yj.+KYi5MVe1!Dek6gJ\2KiAp/#:=3ucFi!@-j
%kS`XOX'/B!a)m^H!kT+gNU'\Y@QM/P3Ja=6a[I-h=offVB]X4XJB#c2KT:F+>Ai!alhG:qe!rR7'eU=.YY/HC-nbPg6_GCV;El9G
%R\T:\phll)C3?H63bP@"D[Na_CNlt1Cg\2Q\B.fU&:gm(G=+W)_J@t^0pcL!CWPs6_e_[iWmKX`qAdj\DGQ]X#3#f5QG/Wk+\-r"
%B!#8:2K`6uQJ_Q5Bg&AG.rUe"5dsQ#\4[f*8IWRL`RAQCCHpcL_n7->fs+R>jI"*CLNVg.8$\gXo.;L9>9TCMa/I[\_7a+r=)c_M
%e1/cUSkUD1K2#W(KlD9B#=HBX<QlP9fq<k+/o2l"'j3R_h*R6F/?cf,CdW)(0,T&5Q#MnmJDK^#Rp9tX^BBGt5!*#gR7+TZ#AQP>
%l?$M_&9C>)828_X>MZoD9PjG5^-CrV^IZ0ANHaL])DXp/)<DgC%7bK?RVUj=)BQGgDKB%CUgn.7o0USrW*>QB^_^8)Ce\t<jH?61
%O(7\FOokqq$PT("6ZPsR53'?"+b_1f9]t3mp9W6uS%]?lGONd,eX?\t!nKl6!C[m-cH"o<l;]iW@1iMs*kFU_[Q;!#E>10[?@Q.e
%'Oh%]#YH#lfV2ZKo@e7GTp`AI/"Hk@dh(-(TNX_s7F(I4PX$,;mma'O&Q2g)e%"INj?3r<K9]E\cHh?;FS?jU:oD-n#V8t?4]akD
%e9iO_kB6S&nlW57n-Ut5]$q@f2=TNM)e<J>rc/#q*"Ag?b@e_A99b8;a!1r#3UI/L.f812nTQ;lf\;/5#"qte[*M9o^l4#*;4NNu
%HnL7'jhA1Ls&:=r_AJ>GGD:61f$&]OodFZE$[pgB&aE,EKBuDNM_d2R$]=n-6]fn-*g.IQ*\GuN1-ZP;QN32810ut\#m+)dnKnK:
%N-G6o7$Fkc!@9t"^;[fdk\f8DhHC$P"JN;Fed!IMJLfBYG[u?u'Wd.1OTA@[4!]??BbRHhll-oeO%V;oUMm.1E6X[=!$+rt^f,Oa
%FGP03cCm5FA'BsVS0NBM!jC1^;+64X(3sK47`JRhrab`f""_[fj)!TEGhXC;XKa=S)p6BPlT7'm3,]Z.WjC7YqPkN1AV@dILh&JF
%UnCcBL2=88W&LoA39nqKHY5RFGS^SMM2q_S&_beCXT;24$l3s8h5f-Jl+'>N-_oqC)cD6bE]?.4,c0C`o8p"%=G#a4b@!Q@jO(*p
%hRH@K(Z@FpS(UJF&G7.M2b$U@Y\HFMTlupM4G#6#d"A_Df3?D/n.9.lekG6E7Oq1Dc3[H:0P4/EZa'KaUOqk6FI=7Cdq%0&"I92%
%s*tH!0FS-I:?j`V%PT75TPGO,oKFtA#hi_Nc@_15pa=mGIk$,$OZ&6YDPHaC'5fM-EO\!SBe3Bn$6_j1SRSVQZTcBl)Ds`q#[r9h
%`[LSX)t-FDPaO-s(M"uSF<?=&[C*%=*gsB!.KNk.NQtX!(lgqZ.,!BF36JpEYLLcN,=^+!*6E]mRp]1i0euPCVYRd*%^mMs0"OXb
%2;>PkKbp<&L[FL1=Vh('/kU;?p[CjBdd^o[%N-/K^T,l1['\%<_eb#4"4@O,0.s?aN0gP6r"XijX*>o=9ak]EKM/!c28o/[B&+i*
%rO5lMIum5E1Nd*rA/HHf+B95]Hiep`2:Ao[6[;'\kk'ZTCjUsD#F;VPU[?ID1pN''WU/)%@n2C"Y%n/SQ[7qY^:q"3%O7^Zqob:O
%\M%A$aft/+gE1`"BCX-WY/\goiG.uGJg0#l'O0Ht!0SjYCN$&`OLbblJ>VP>#R7X]K!YW5o6L]ib60-F4Sra8jT1@FCDQ6WA$I+#
%_>-(88Y/&JL:3,VDVFFp_TQOKL\mKuHqrQoR4pr`hDE7M\+oUM^"b95c7?,#eaQ2,Fh0H2-m[dg)uHF9TBI@E??su##K`Q;rJJ7[
%GP@^Qae;5:dQ53-3#K10%\XXi.:7[J&=7F'Dj$j6ZdL&!P6iM)1fcmAe?ZS#qt\?d>_#Op+qD,_8*o]Ol9o&J0K.pm"QX;mo`=\o
%?SH]lofpM4kmYd*nLN%:g96R_SS]]'RdtGY_SVXlD<0XER.bJ`6HBZc3CI>(R,MB>:D!+O5d5L;BBpf>p_oSN6<(?_,>s9,7T3ZD
%iEeiBJi"u*dq>tF#q&>$6#4pqq,#gAE?K[=nob15ifZ*W(Zfr*Si1F9J[>mJ&bU0oU)O7GLRh#5,2OSf'3J=F1@e[>GXqRYF/$dI
%d1^>!5iM47n<o4_-#qDjAj^o1[omlmfM;t!kI=INA,mD-&d*c&'i`jc3&HT1k0P72Q?YXYe(9U3KV!2jQ_Z/nXs`?1<+j5)1In-;
%!;"0^(U>/>NBHs@r:TXA,r!1(P<Cuj5d*(Xgl;`4,HrR#XA7Yr'RG3bA+2\7CKP4CO6AJVSdj4op5TULnpUIWPq\FjgQ%oKrOFJO
%FR<`7R<uW^3o1g5KW/s?^H]K(>PW"M`c55t<s3I0+<o`-N67RqDGmq:)G-caXQ^<"LI]kF]l'@]he-16F-brYs0]#UhLj)T8`i*'
%Jp+,*?"_2FP;5MLk>*tbbC.VuB[GSbPYmTZR']Aj-aOYYmF)Q.g.YWP[bnu;mB+'gqT=`CaGQ*Zn07SiD\j+(,0`S?r@.bNY`SK;
%Y$eR0cnA0&rRa9s2S0?u6h]kaKE"ZEm3h(E0&SRhF^4)##&a%C5UAto@@B<XbGWJ&#sl$e[lOE"Wi]FYSGp^O^3!*dR&'Vh:?_hs
%i*PGd:2f>SWQtXS3INRRfp)JpPegrRdWJT/kW,[EiiKdflOD\4ooiil26Xh(%NURd6<e+aQ/UY(X2'O1=ZcM,OuX$]cCnTB=GK?\
%+ZBnm3fCrp0HC,9e&kuNZ&_61UKE05'i1kkRft#__mb,iYt)@.RFoSG?Bk'b51fL;$BNd[/TX7b]U^E"s3"rOQ[m\SZb<hg5BiZJ
%5$u*eC<o!bKe/BFBIK?79GfF/@Dn9Fal,&s*`5$G%\GD5(cF:i<hu-HWU'f["bg-Q38An=?AM@@'^t:"<`cVhFN5ejJ'ch`\Z_DS
%L`'gU?5e]V9Hs`"@QiIE7`diXM&L<n1`HKh(rKO3$n;L./b_3J(Dp)/K%T:RD%%-gZk1ngWTKMj[#"dq,7]+T6%>VRA=M+G0S(V3
%%'*Z:7@r$&q$FAB$8OF4`-o6u[?b$rq4UrZ*[X,'=>0D+g)rQPWe]@kKl:H>&9HAD`U1YM$<jlP2kmV]4OtS@]p8JUfaDf[;XR(r
%rfpt"O(lfFXnka5FB$q,14/c7ROl#Xre_q]jS-/WWLl,bm1h>r][SS#.tR-Ai)uMG,G$=>F*m^K;t&go@mA8!rLLs";OIe=aPRZ]
%0=LLkRjs4YZ1Fi8-&(1<$Lc?iAWUk)c7L<.bgC'"R@6FGMqW/t/+s.1AZH+i^h#]'(/0WEqVu,&1TK+UT""B!mL(Abo>[A2=W;_>
%9@d$ErF/_*Y1Wj]f.;66Lfh.V0O<69armX<+fKW&mB3d,j3L-/WPEkcYF$qT9k<.bO4+7GU]#4;n&<"M[QJEm-5JA2V!e]Wf@p(>
%A_6BYqj)_[(Df(`2/l?KBgWcn1S_3h<\X45&2MCb!G"\.(jYE.6a3>fj8D3o%hT.R^cNRuh]i'Xg]=[2BnO-giD/(;c4A%]:bTeY
%OOa5ghju5ss/_Ot_&_56LbX(;?CP>*mkAFA>qgI/rZ5qc\70O`)2TA2k'1F+$%-E!iWHP"4>Ta;8.m^8dA[dhb!lPqF9KhmATkA,
%O$DU1U)F4A*WVJ(3!rL'a:FKo&(A%N;^26(r)Ke12*bCNW\msM$rRE*gS>6^6n:7pd"`t:>^-V7UAq$qT-0ur?lABf`o,uM&3OUK
%"TdI11i3ZQK).`UL^kcTB#N`;MB"9nOB!_d"uUB-2)&09+)!A0'U5\iVml\H[d(Pui'Zs%SkW*g&1O&p`m"%XH7LVY)E]^1fa,r[
%-Fs^a;YqAYkj6>M1JhYddqH!bDp>bH4rl5r,)$f9IFk-LpiSj(>4:]4p/V"7g/o?60/u\EGY!#KGg%-@adUE#J",3b*"dl\)c+E.
%5&;@<"B8)@paXpNOd-8?Z9orLp4>U+LjWos>^Q@453!lJm2pL/L']l^;]d_g\_@V--<X%^R$l993)Ob$2<dq6$63:FL;FJ&Q2Nd`
%!5fi;5M,AnS.q`AK+s<iIt4;0CS!n#bu?o;]mL*t>jH`V)eAWUl`%`uOO^2NDpa\i5N2USTnkagp^jq$^5M)*^>D:rLSI-9T:cCk
%q0;H97X'd8?o9;S;jEoT3LBeF1eQmI\tqc&c?4L!T&B:c"-eeqK*bt]!#/<fp>I>2<6ANbPgs#Vnc7?HX+%`Ln2?mhCgS-+1]==V
%2&1(i?$Gd?m=/<D4L,;:i:#OOJ"5U1%?G4,6A,Z"@Tt+W9c"=,Os'eU4e=@cFFkc92\'9m/Uc0L)f8]3Ta]`t64@=:J87>8rt.?!
%2H\;UODM*<aCiPg!)`sQ&)VqAYk1+"G5aV>QWG_&;<Z,NMlAXO">V`F?k1F9m%@*mY^=gSJ"6'>/[*Qe]F[J$7C8K,&s\CVRJ;G=
%\r`R+Z?:r8TjRJcQ<gbP#l!GN'l>M?NEckbl=MM=m37Yng<-W385%.eLGAXD,LSTFg1jUJpe(?%d,GqCrO.BQ8Q0F77-/98dbE[$
%IeSs<k7a26L3.ah[aBWCr1!&EZh:o'FCK+3..Ghs;(iKk@4VT.JV#KSm\2drND4]-2NTQDC\f9Y1@q2[X]Ti<Dp:(kf+-GRg>"pY
%86)98AY"qJI$_t&5S)i/Tuaa?s'EGBh^A&\`lt-g7.-fH9t(/FZ)MrBa2?MR$loVt$&ZnBa<mZNq@5op1Bpsd-3uc\Q5chI?/`/P
%s2I/d%8i;9EX4?S*DfCNpT96?bD5R#T.qkE<DiV3Z=)[RR+Q$p&>NhjaS'<!7FFHSC!mpkK0b(V7`O>Jal>s25B.]G_q^JAKcC1D
%qt0=I/m),T+")rK.DlBCJ;Ao7c+3#tX42"WAL)D?70ZV;k^V'0#Zo/("k==R!0>YcCGe)R0s664i.lQ,c)u>o>$,]DasqdMfsMY"
%*h*c5%m6YL69qo(X-,dZU3hASE?i9J5oFk1:W&1f&^H+hA;L5]n7HY@f\B%(cEWGAA]oZn77^16KNp?4RO;q8_l&O+3N%+_B`=XW
%k0q+G(/W2'[I<V&"-iF]_ln/&iX1^k+u!DQ@Ma,B5qj0]o:P[J'DI'm0-W;M/31f[8Sa4\EMXLJ%)D)G:0g&2?D0!Z@L(#`<VPrC
%;M;sn,Yq(uG<maR`s@M<ImK&P#"5DTCgZ]hJ(JU7[(-PmI*&b1inIn$.7s.c'g[eB:t,Q`ICkCJF[sRNC#4$SCa,ktSC0C7-LF,o
%:rI_S-;oWO5@g>CApAcl7!k`\^k(SSS[-pGam_Pj6(cL^+?O6=G;S@th8_PFl53XQ:mJYC2KJURj>f=Zh9c:e-Tf.+*&Haf@K0+m
%^V?HXjB)ITgPpl".<+<aX4JN,p%6%FFaOJ^>dQ(hg^]nJDQ#L5D=NE'h0SUe]:Y+87@EJq>1K-@guB"]*Cn*^nE@.JQE<:bCq0Lb
%=\k6(_o3E99^1aJPk4@e3b/CuJC6Aib&e(u@t%-pqOrH^%u":m!2qQ0iM9/HPo/JM?2Z5]Hk"m!NFSbrp+&4!5*Q^k6XV;4T>;&f
%arBlH4!C6_.i@9N2F,6)d_-+W"gB[\F'tGUm,W@NfU77/g*B1AV6HCEft'U/@6A?<9pJJ9DtETiim<$Zhk*O!8"Qr7EuZanh-+Q!
%;e#+pQ5G[$<Dg)s+cTMg[VN-F2VKc$"rgs-,hA=SE,f0s%?[-CQ=T_Y<&]X!&*1I4m2qA+_V.NbBD6=KiOJ/Q=n<H`'Wb!F(XtO4
%Pf93sRNlC(]li_-Og(2d=m:g*H3"fiM\cuK?,>rf]C21:g!faSUhuod`]S;@2;@)`mRARR)pk-&#g0/-7YGNQ%AadBRIkL%;"=8p
%OSL&0]GZA+)OmNk&Np4]*%h&-?':s#8bE(c<_\jfp:'VdUpL(oHo8'.NO9_sOB^mTi8Rkf\fMBSAY+*T%(/5E(+EKa(i/Q5%SU#`
%dhF;9meM0'jJH7A3Rj*,*^V12o/H&*pNZbXDiX^>E1@H+756<Y!;@s3CcNuV;U_I-E[iplJ7O&W8(>s-!Q@>oJ&i5\3NN.r@Mts:
%e#)(:4&OeLB7,pg,3@'2la_,0NPiG>5:,&#LS6gJpi#'W`q(g$-%M*(ic:YdW5%WS:Bja*Hg'mP32]LYV@Fc]"OQKFrc%ccU1D5g
%+Lf&o<P$]@B]sbUDmIi@H!8shj8Sm0?iRH#3$<Ct[k?5#p$^T[WdWt@IGRdNp,2hjaNKdA2.8g=121sm7g'd?q8AgPngo,mc<12h
%?EC^3Eh>@aIos]]!@@:COCR">l\QAodC&1+^7Pjo:g^A=U8+#tPC'hnE]o1Z0[!Z>!f"Wu6ci)_D2Kuaecq3J/"RA^'`A'OMHe5)
%p(;"J6Ne:<q5ur]la([/-kZ>nNlpI.XX@`@D`HH=fBa-mca<<mpGK8qnWDY;3&mRI/j'p!0T]G,;s8da(h>Iql;dmf/A/C";I;G\
%&HRG9knB\X"^2urI,`2JRLD`f,-r&uods5;5XE1Qda0XCbC.p*N_Io4"OLX,lN4&XHSDn(_ll):4Am^gh*'RP1flgH&k-&0YnUm%
%h!1K\p=W#cQ3\ks<ja2+osA.YiFeWNH=\SJ?a\D,IEeS-!EGolY_2c!jLpRj,B?uTePn\/jMm+T!M(MZLR>RF?LB?,odY"t:3f1Z
%-sDNVb"Q"T#J'!:d(t^k;olIn7?Q3F#39+WDtet?SlT1<7[ZLV<iO`eJ<ptF*YHEB4N$>9'kTu+KPn_lG`_:2Ebm;#j@9n`#!/iX
%eFl6S_;@gS\[N#c2IbhK:7i+6c]hiDcO*59qgD&kbC+6"J,+Ec@>E[>VAq\\<L+]`@>4k75<*ZPbcRp9QLen/K16^,Fae18pbqG_
%_;k<TZgs<#IpTbeaI>M4<47a/.nhCc5_JtQ*0#s'.2G/ZVVis[]#`QK1l2ciK91Zn[[o#!Z7*r"BP.P/<qU,RiAELRs6oAKG4!A6
%jRrc,5B'QE/t@2hWZPDp!!:S8Rp67+.TI,.X;8*@.Hp48Ao8Z0,3"d0jLn5&R]?['gbTIiHn_`I.*'IuAC6nFF?tPMC-\6i_&IX'
%#CepX=%En0*:3#k#_,23ml-5VK390?!0+CJB^bjNF*1^b5?sG>&Trn8lYod?V[p9&TmIO^BT3d<*L$`Wi&Ph:n;aS+Z%+`@HQ.uJ
%]hSN^Y7a^(aQ\R/"B(`5L]l4naqD;$:ssqbnA<[7m,2U!rOkPiB<nqLUX02:?t[lR;<78RW0%6pWh,5NK&D24.Cpa+;D%>FKOKW\
%XBCAR&)m7r/f&eR#NYQPjU9eaJGK0Q/e-^c^$?Ka`s@.3Gb-Q5Goq'rp#hOTG3590<e$*P/k1/$-;j;5&-_WtX%r"?5s*1h%;R@S
%4ACYP@H.Ys+4c7U7@N_I#h6llNMK9mNn-,d\$5g+4Zch;G"\d)A(J5c-OmLQSbAAdBNWu"1iP.=#j>;57M>\8en4!L7re;&IWq^#
%#Z'Df]WUaIZXf!d-uL56AV.W%8,ZK--&SpW84L1bDi1H;D/]XpRW3dEnp$.32<;m$K,-Zf)sW<>"$4dR<fdb7\0=f*LsqFo=WOoY
%)71;$S.%7R[3YuWLQ"(&*NfXlC(50PLjN4<]>#?>]cA3Ng.hR>O+qO"798/OKZ<MJ*n?eaG#sVj=._;8#Lh#h5W2u6a?4uXZM9-5
%2Z2%3MY0uL[J7/YC=Xl+3SPf8Yp0f4,9V(&;P,D;g1bGg2?=reihf.D!25Rd-Z7c=Ae&m_g\'/:_iCK&Dp5AW<?)^ZY@+0H<RHp<
%?9m?R4c..&^ctkD9sr?6LpY5Jo.3ch!4r7!(PU`[_;bImZOS3u(9;N_IWLaRCLTQ0pL`UQ$l%#s0TQJ,DbF$5GN%E/-eqsui,B3b
%d+jLi5!q(1h=O7tF(CpFb&q<^E^0pkFg95T6_J.Adp<\YC"Yr=".\"34R&S2/%:j\,gr+n9+-'pDOI7Qk^,\+.;5WOK46Ei0H^LR
%8es?ODjL-Ro&47Dj`IeD:;2ft!8u:WODDu3!'tjk81QVVUn);;VR2@9(?&*bgS<#FhR%Qt1PHLmcqI)U^Af0cC<rUn%_Mr\a@>jI
%mLKPTq+JF\Zs$QOAd/&3:_[.(17abWs4eKcPo&CZ(+jSKlo7?cP6@6HZ(QW9\Ut,"='%^5:]7^F8+N/J<[\eh;j:+nU)g3h+`i=b
%ZsT47'Mo:JL'24J;KE?#.F"6n7:n[\*0OP"bs!/RTF8+2#IYCAl9hZka=Y=LdrH'j]#j3@\$0P-G)&&)q.@dn>\p7+Upn$9Zqs9T
%DiZdaH8@;!q^5?QUV)T,cN@u@c8^mOKaXV`AUuoM7;4:+9+`TUVGBnHC!!^Z4JA+0rtXk]q4Pjq';&tV8S&>oFYu/dQZ;;=5r$Bm
%q7?\gf,(6NDma3.5U\QifO'l8"2PM?Y$ch4\t(gU(7cA-g"_WH47p?1"jFlkIYc(jdb!Io8C_b<+"1SMN=fhmQZaILp\TR=piNSN
%k"OM7nNP[i-ct!'*_2IUd-IYs1&KA69nX(#q1**60%F(!hHgXDhIom2gpI19TPJYc8.WAKP[`+=_E:*!^K#@t9ZmJZ-j1Wt>]+!g
%Ae\UZ'Qo#92caA#[R[VL/H0%$ILSJQ-1^TBdm]Z>$f]n.Sc*kaC6V/b&f0A`#+hPZ0e0tr,c$\9b\<L-"-b[\3[![$KA^t4,(1P3
%q&sJAjiqToHKYE8dO6T7f+<[-:Fb5dQ8FNU+'S$a7jJSqRkS:)ST+MrU!)Sl^7k186/SC?_82+K6IU&Bmaleao>*M:AcbY\q_Pa]
%;C7"Uj*[:1Y#m:[p-JX1huM,F'ZX`\M%T/A>U;7S##:B%Z#G;@g.SLGgQn9tPj-YAS^4*#=.h*6]d4*e.(P;J4njBclk-[cFnR9h
%PU$ccqq*@JL%g+S`8djf<u#Rjkg4$u_*<mU'+o%t^tIg&><h!&"^&)QaZ6lD655nBF;MHr8qrnY,KPb#(&[3t!B6#3b\%f">JKGs
%NB9<"I\qGR#!B.>Q,=D!l6n;FqfJ\^bBD$u+N$ZkMAFA3E:</b;6*LJNju$7[(QVr#n9(-3ULP@BLIYK:HAn/2TuMN32l*/[%iin
%,s?Yg`Vp-%'M%73`C4ARD3@[Me/<#s=<J[(fPl8/5",7cr<d(T$`&(ppGj.SD_AZWkNL@b"80B8:`grNN9jd(L@ROjYIYIXb'I'Z
%Nf^Sj'"gbWh$#:(EH4+g-Df+GZqu3!%Z?!lZko4n#=e]<W8oWEeZMKj/7_]2L<PDQY,@e,,-Z_OXaFNTO9q>Ol"$F9dD<XR:*0c+
%LldT=q<8b%%Q:>aWpZe3E1u'uqS\q\ClZb>k_P%`&dgEOQb)KeiOZjjV!k646Pn0!r_^#;:b")_q04tb#43"1?h#X)0\8'&j*ncT
%Kmh1#r9p"*a]<`ZeIo0Edabi7n4fPP\/"&.a/oGQL<.kc#)pcqq:="Bm_d'3V"-V<&o#urn]QF3BnJ7U9?a-Of3PU<_cS;r)d'V.
%p'MKH[R?iCOVYJEel>ZB+\tf#CRl!ll<sU"?+JK(dO!rh9>@6Q4)XQCW("\CajXJG,3[J0Dfd'Ba2<(,NFM.\W2Mb.fS\&!(_e+e
%nDkR<SsDG2':Ff2k3>?O!-Y9.d(Xn!`npUS4Crsl]Dct0@OZ?d.8ZDq4:UEiN<\r3jdnO+iniGI.;\;fntag]gV=#3q:cFL0J_i$
%F#*MBQJr/2\uX$+ZR7nRlsc2k\j,deIVc%`NK*o6e)MAZnPRBN%X3S:>,!$j>N$EqGq7%-$GruDSdPdl+9IrUgq?g*0Wf\c-@V%*
%KrjI5UU21GEtNfTMPXkIHJEC^/+uONWs>3opn4rsGL7%4S)HkdNsEhXkheQD`;afu0g(BW37#OkgI1%!*$EAOp#ZWSZd-3XKSnTP
%cHEp"[tc)2!gF>&'h]+D%U&ugNcbC^4K16_>#r<I"4_;Fm=uXt^"A[]V-Od9%i`9X<#Sq%,K,BjTC-A[rOAJlD#EDII1\2?.a=>$
%9]-E#UR2m%*i,;Tbnq+F.S&$DMXMGeFF+cJ:&-JeFVQD.ni"_NpH`@D3(0kL`<o&$hoAMMo`2699<"QP^q%s]/0Qhn6mh8YN5b8B
%>+n6UD/99;\174[<E]VWEr$F/4uJ[IQYlW<i$(iYlT#1D"E/1!_&udR?:DJ(0R7251AQqg1Te??<9emgs8DR-1mt[W.W;g$kG=Va
%.tr4<Yp#@\qGumpnq;[Q7Ad^OZF\:KM0a*k@fF=SMS,3K<UU):/9JEJhF`4Km:UT`,*crK``1D1-76nBDLj4I'8GZML:+'/U%!T*
%Jd,QVh<n^:=q(qcPg]<;?EfcuraBB`C"hTC[?[[g^itpkI\I)AEaQ/D1NJ4J^C3;8,qrY%bG(Yq`BRRm)fUg=CP"gj$MLGVFYEGG
%]6P@$S@_R"Q#OC/$/AkCLJ4L;+Ms0$Z+crWBZK+2E@LYPL0hS]e<l8["`9b,V3Br<$'Q1bX]6%3Xa7*VjZ_>G+F>\&+qrYUMH,Zf
%]Yi%>.HA_TdQ-&$[/W=BVIS*`lD;4D;q&o2_2Ie80kXo'`5m$6,,)/rd9'.X0L-.r>>a.AUj`"P:-R>:a]3(41aWO&\%5nMWNCUT
%gNWm'NVfK:*[%PlA(Ju6s'"]GFu0n0d'k;*o]spc:s'>5=H)]_eq=ebW#?#R]"rB_7:3QkEaQ2MZ$PUZLDc#!!Z`]a0dZiFfX0j)
%"=&</UIb5%lFtZkjaLZ3n)(rUE0bsP^EG9lb\Kqo,'uhRd4alb^R+h*95iu^06FA63u;uCW'#4mN[,2/M#;]f>IU]mmnY7:^=/i>
%./2hm)MZGNYZVf=,[nK]T,H5`Kq"VZ.=)nTJ.71dn*Tk?M2.1dE(5bK<2mj`)D-^:?IoQC[FO0:b`_/Y%QnF*Tm5"-KL+/Zq&We`
%IEfJq/7,+_ALF<Rp%A`HH(t1\6,_(JW`3AmTmW7#9qWtUn(X\ofBd:c)!RfK]eZL*+fsnYZ6?ak)4[Gc1-EOtJORNAlmq<uk2SUQ
%I"qe?/u[sE@J4MSSEg3r^.sn5.qV1ts00]Pq`/-2r/dGRW70,H)b*ErrIX]Sr^lQS^[>4d\R&)coC[HU,'TYgLkkP,-@5GW'+A@>
%U"S":DL.IF"f*B_B2IB9i+LZ2Q)ObUS90\ECO3s#B'kcG'!`*tr,bSgM?@?\HhXcC[mFH.O26kiWku_IZ7N-dRRk@/I3">.L[00W
%X>X#qQ8cWG*P7U6RXGTN#BS/*N!3_W=j^u]-B2._7=V15`YD3Y3Jfp3QZ=2:jlJS.VW<-,+)\M"[$LPS3^%D`JldFsfD8M8KDcd3
%gf%9?`_TWAi4:oWN@o/iBJ*oVH%.:eA&1euF"d:<H[8m`nFk5r`#'"7Sqm"]cF,@m?3D,Mf/iB0Ukk/LO=%O%k@3E$._!Us>PWRd
%eFrgS<Wf?:3dR#lbeqF=\q'qi[G1J(%kbi8A7oCg7qThqkbgY:^eXSDdub,\No2AkVlX286JjLe^F=6H^!rBbCD<9%=NLkBI<o[_
%U0UVkR,D!pQ*#b<diClu9cr6I9=YR7p0&,]1X`[WGe8rWX_8Onf`_Ps=e(iD<U@EmD,.S'37eL\6]n/+Ln!bVnp93>UBM[\-i*a@
%_SBoi(XS*=L3jgq:n`&NH'6.A_0W:C_?E1Z:K+E]qgP2A`a)72*K?7Z54&$4?Fc[o!(>9&O.U/8dlo1M1?`u_FRq/^^1KHjQojSj
%@fZDH'h*@MX.c-Z1YP[%7+q;jL`MA9@m2=72&dI7TQR*.%TBh7"\")@bhfS\j6lX*"*pR/X7<1!Q2>en0AfcNLV;1Jf!nnd2'Hg6
%^XYQaGh9+kX5#AZO$G.Xq%j`SFD]WukWU]L'nm`#^/hFH^Jm@$_-4D[ItVntY/:cu[X1@pBXKrimiRkm`VR&ZU5GFJ6/b?sY;IV&
%!iL:FJ(sOnc>3A.pIk0,jLW$*T>1gUYN).g^8MUs"bg*XQV7!$p0RVHha)?2.9\=F;MR]n5tdOD2QXf4f`]"IOIKQT:::kp5@kM_
%lBJ*4pV8?tqeKNb[B<TDKM]>eHAsbmGMq=WTsDt/T%g/)E%CT=-S-YQX0!sMfk.X88+B]?@sQp!76Y80>RC("Qe_^k/,/Y9k4MJ7
%E-B?oR>O'3IWj1dB+u2I+'gA<K_3cF9%Xcl=FWb*l<*'66fZ.;o%1nD?J53_7:>k!?\j'`/q%>:E;XhH'%g\bT:QCa!;`gA8"[QO
%]iQq4JGll5%sX;.]Es5@.*OtmR<>Tk5FZ4s_g7Hc0o3YT;F8DNqj7`XLADSG<n"8;k7]&Wd5G+>LZK4tgl3=*j=orP^*+V(ZI$;7
%?e(4I4j4cU3b&>W#'kM+5lbQZDA3-m5,)RighJ!@9sfA;"GEVYkKXL%j*X-)\J.bN(an,HpW,hC9G,NA#[+LKD/\P8M@TU`Bji+Z
%?7\MV;W&aPK&(u+8P:tIVDYcN\\?]_BJ)[C3GZ/S:Y#sOqs74\TB/lDe/^DH4"C0^M<;C+e;eu9+!?_[/(!os;t$QsiXPI_WQV6e
%V*'6RXF=AXJ",3V'/)`",qoT1#>/\.Z<4[a$K;I:m8ha]O38.cQ85L?MoC#BYh0bnQDLSkHFS-(/YLp[ot"Cqb9qe:Z1i9GY[1(Y
%k1KE0TT;a!=^ZW'[!k_Z=mkak@$J!UCEmDi#EK$U3pgsYK8?TU]3B#(@`&6jX6OD?/+s\ck,>;Kbkgk<1oakZ^SS40EaQ(ZN^=+q
%NZ-P[>QuUkgS[R-bDfN4^N%);>IqMOA.tG%ibpOOfuRS6;E%LG$OS<U+c-'V.g.ZLL`S6sTG`;d$^@JK?6T6s`oXZTQd&Q&8juPt
%`CO(Ge4-6iIf9a&O+t^4<BmW?e<%9h"[T7jUU+CO*^\Up<A/;WjZ\4b;ArGXLpq2*'tJ!dH&/QA</AD"Mks>@cT8AV%69p05-E6r
%.LYOZG<l$JT:gTj(=]8LBZW!>[oMq_,UF_^&LS@C""9fJKQ(ER."\7H1lkHMV))(iX@J>K$G2190O4!9c3/UpjJ4q>Y<s:qAuXsZ
%&#&-pd%e:a"^:1s:i@JD@I!3WDVY*cFI!Q(3K,S"CX9-p"^-W6*?uuRH;`kP"0Fq%@L*ohBd1%\6+;CSY(nLW+X;+n%s>7Pk61Il
%W^rm6$VRMAf);Fj?_=(r_+E1A,Ok,`pOZ7l,_:Z#G"<fj0b:dI'N5g'9b::;FcY9M+c1B=[pm8o@LWW7*7Dd82a+=(,UFXIaU7[q
%)?=5'UQqe;HH@l\a%%aV0"^aB'VSI\D3_McLG=f5j!/i<m_+$q3!Q"%p\`<>8h@cmfU<Y5Lf?WSN:'TuN3*Q?&Vf3i6s'jL7_#ZX
%>mN"32O,"moiGs9R,VV&GM^!_G]L5RE[<4:'%!#H4qb8+*;=CR!r.Vh(/1`f0pR4mB"iW,?C@L?JaTLoD$SC$VsfSX9-:l2FL4"B
%l%!bF(2qtZ],d,Q\]m9rcX&e)94aW=-(Dc8M:`Nq2iQ&e"CU5f5eT1'\1iVk`WrU)>=Zn?N($>.Xjd(tGZeZ6E^Z!!P?"A>q,J>j
%lT]UfZYX,6U$@TO@sZG(Od_ZZ.k1<LM.cuo8hK(c^fW22erX(q'nSppj/EP#gBY"(#6^)gW!UdH/J]+M7S,!4BUZDZ7QslV\,rtK
%_gmJT%F1mk-^ZDC$6=h:!&SY,KB=MN&1YXW+oUA:K.SK2!2XM4TJE#=OcL_B9CItG9P!q^0r>G/Y`[Mb4$LkjTW4D(g)2r+AjnS3
%4*6GR!A-+5Jss6`-2[=@=2E(6-K^<5c3",S&$e;B^c0aHh1Q#LG[3cuZOVXsK@/<l%hKo&BFEh!/?h5[ZR322N_1>OLk*L;C`LKN
%n=S$H/T--*C(GE)*YPEqdap\<48Z\/KT*l+aTZNs[FmquV$JF[)r>:_s0M:49<'ZRQ9[jf@g$l-Ha;K-f7@g'crD@4)-T@2o$!J2
%7Q3<X5%rac!`PdX_W(mS%uS'JOVPj*!0,ZYgUU/JcRC:5dP$FV/g_L%%CSHNoK:2/'f'H_$66IDHT)GU5o%kTa7Wpkko:Oc8Cl!6
%g@<_*>Dfjn_@FJJSDB4!oK(BOOdMoc#[0U/<OO8#7\A7r96]87%`1Gn`)K=LV'Q\J9Gp9:j$\5fRZAr/0B6=:_5<C(>)P.h8;Zc#
%?(UlYmY/,fMO3-<pFJC92Id6<e"6^_15.+\L,h^m9=Pf(-5b+IRa,tFp%G%o09qt5=JrIR""KiDct"dJOLdh$KG]j<&W`UBigMPR
%2:,Zd,8Z!hMX3icAD;h.^EV`tA7rcj)^Yqe#Yd?Kn_ff^1IZt8A')aO1/ii&3qn?i25D'HO.1Sl;9p+9CdgU3FPCa:M9ETArsj]/
%7(!l623`MfM:iHP0hgAE'[V$7;i?PC\d?#^W)_#aI7>Ru,7=Y1:YS&q6bSsujGYkD+-;(;afep(5rN(Hr:EH6TaR=[*edJnNVl>=
%#Zb\*gOooC4rO(G?:33]V;W^QW5;4?#38m;;Ai"`/Q\F-`ci;#LY+\OnAj"5?nnL5'Uf90XVG#0AjnS14*1o'$6:q.U7/[,.E;SK
%<l1m`-WEsCEVb=[9He>2Co2VH'BhD-SKm3%Gi>b9*2AK:GsseG#NZuMjdAD`9QqN>];8\d5$1WbjJuto/oT:<E[kmVQ<G*SS!W&e
%Rd/U`HZ,MlSJ%-SZ!o]g.OZ>ZF+]?Y"Hap!1[B3i`^Bn(+#M?A'MZfA]<*7QL[\$\SpYFGA*4/YM^PN^A6`+WH+$#K[dNH--fdCh
%S]e9iQDod0U:^C)-oNR=(3g->+)nNn_NYafOssknLCG8onH-rINrnAbXO<Hs;=.`u3@IfqN(-'kSlPSgAdc30LW1Tr3st6#&S3DC
%+QT;`YahY9Z@qVa_W"F21lAMp'Z(;Prmou9LSO>L,W]Am+Y/X+JMIqjK5@S&3Z<Hc1W7@*/fmd\%lT]\kd-$A8Jm^Hm&9s$f#8BE
%jh:*<RWtKBHZt&S%T#)FEoa.%Ob+7nW(cZ=#/j+\-+PmOH][B6pPupbDIP<&AWGJJkgB<I"e80XKU.OU7l.P#S7J'!;(R;K65Dc;
%O=R"siH&XP3L(4fh:\*dXn?-H(YC*Y*22)ja,Alo"0k.W9UZOo%:kp`#ru'\gp0S[#\4]H$i'@IM$%LpHVZjV1AsDIE1`JbN'l7^
%-nT3SU<lB1$OA"!$t:>d>G2+<e`PeC2GgA)&1h!U$G/V<,V/KW>9q<W4;jhi"`915T[\`pBiSuX2uDunQ6BU09,46BRG4cq^M]p0
%glN$+1h5s*`J\SSm/k`CSP&X/iJQK^M3q_+#r@\MegjiZQ6@![^*0kM.]WHRJU:No_nJ/Ta.VeW5'W)-,J5/>9^L\$@s]0gBt_gk
%6S[gs8I:Y]kJtlQMscQ%,'cHd#<iuiNe^43oBZg8qdA&NEhF"Ji$.HV0;&W+*/33#BZ=Jc%0\AF,R+4VJ]bU$i=9:$6&M.-ht>uA
%RhrLUWYE]A;!8CH8-0QKC%d+(a"OBP:koFNoC:Noh?WsP&c2/E)q3U[+`b%;(EX+JEjaLEEge,$2VA0g7cT.hX2q;87K#,^G4pM<
%dB3hTn$=@XfIE9G!hp-[j3<>*TYD?;95'HYB!rme&cpE(4!SitWf.PD9$mZ&O_MVX]GZ.f<VTgl'=CSTEIt@a6"`E/ir:'VHk=jk
%9ZImH+u(eUCsL%Z(rQcCp.R["+b1XK#D-Lm_+.C%?rieI[Fn5!)?mJ4aF%HZ0=?XeHJAGqm3ZeMl.Sdh15ag=GB(&]UoHuXL[b)'
%>"n>/#jWq$6!%10_5N,SoLTAJhV0^-^pd,%6RIuY9V-*go++].N<V[!R'eXNV=^;o*W<f!fFhWNX)&`=@IggaiH-3dNN74M,V=f_
%ej=Op=4hWfgR<o;H_bK,*-Wnq>crTN;:0$71$27ZluC;c%UB2q/Xbm_!u>\7hV4CB^oMPPX@G0$7oSI,W2Q"J_pJT]j@HTA&*-gT
%SPZ=gZKeC"CF5:b;O%`0XU%MafA..1ZoTg@7EO*;d?kW>l-(V(@\Vh*KdH"Mo-3o64FgpF4)s`V6i,85B'd?kBY$-L[s[JVMB$2\
%!m8o#I6..V\X'P4cHPBgg,K9HKOj@?gd1/B\t*H\hmNj"5VCr'P.[GHm>%rqpYJ.a[>nVS+X&*R>8\#Gk(f6:0+ZhfC'i>B;DbhX
%"*eC1>YQ?#`?AcTPPeOAYSu:n&Q^hX`AhGi9[Ne\m<.Ja44Ce'W!6gn^4+6MZ^\ahH[;iNO6;ua6q?q"H*:Esq9&,f=!%!)AjTZJ
%nhf5G:+WNN9!(Di&0#=q(^bGk0k3[X;;NurLl:'7:j]AW,?^L3SPVG]V\-.^)22Ngr$2XWL<3l)U`2NUS4\#b>0G(jIB`ZSc0T_'
%=HPCeXMlcQlK*+.BEbN*2T:5"/O*)#qZZXY!Z=8rr'30)pG"nUM-it'YHWGc6DYri^[l3)?*M,I:)PPd2s8bfnXRm*Q=?A5>:Di>
%e-=a;c8NJclBmj+'00.*i_n]@]\fp3\HU17:;i@>_T+.e&0$SZpEW3g92J"lmioNc_%Rdkel`lUjpX/QQeo<Vn@-lgA"KLM!0Nr&
%AHIhuAjNn]M5Rd<3qB+Hp0`5ha`Q='klps.A4LFt$Q<qbFW_D\R0.LWEeK%DbBXGU<4q\4X2&f,6ql8h<2YQ)17pCNeW+W"ZRJ1D
%5_aH(+Y/0\;KQN_%53/&Jc"hfnpH.UW?c49S%BNb(t;dP?V\gQdQ@OGScnDu%*cQ8(63_oG8MHsotTUammr>GXrF;D9C^p5i9Att
%C?$I"S^\=`;1R.QI?9[/)!Gd9c&8s1TG)M@P;Tu)F61j)`tj\J$0@L@,!iH?]JYO@dkNF&q3pXrOmq@\)$U=Z12@/N/,@$:R@'7K
%;:EP8:k/:Cc1CKL-rU"GV/nMT^QCY91*g`XX0m%f@,VM.:[k`8j5/\>b>c74Q2[1U'AS&9E*-N/kiPVN$915H*.oe(R2?\4!G$OZ
%&U:2l6iW&'I=ZOP5fcd2*Ap'O5K"8oBjEeG7VZ\5Aarr-k7B.0>W5a`ro)EX?=?KH$`&)'Ba]gRAh[7:&7h;J%K(8G&6,\BXbkda
%e*:XPDSu3fgH9rff&?U6>6g@]I#q#F'SW;]Ua!Y)j[/JZmMC7=UQN"@2^g'FL'38Y<t3Q5QQ$.;RA2a9>Ia=a"B5(@-kP%t8EC6s
%;fkSRb/3(u14%ZM[%P6LSS'83ajNkVJ]ng#'Y07OMp0,UVuo%K*q]/_)mCN!TuC,r&&D!\\;(4klB-`8%5U%Z7$GGk7DtP?4rQ/V
%"*=Oi:[9Fq3t7#^IR?DsAh/L1JQ>-&NQ%5D\3<bY**"N%i?YSM:nRDTn,''64;GFql(<.OWCf5b#!V88'DGi;R=<U!2j%bS/5=sc
%ZkLlsL9IWZ=*&Nl@V-F`$2HV$TSA:i8T&@We3#B=8hakZM^H8qZh\OOa`Rc%*NLE>XJ).A)H7Go$XZY3@n;DYeWH5lR(sb7<C<*m
%CYa@7q,@-+./A0p2V\Ti3esf+7V[U_Vj`4V;=<",[4I%V_>@_nOD_/g]38U\[CC[?,7WTA5FfH?@hF[Sh!%6.Xg)81Nn-4D.LHKB
%lM;Yt%[LVN93VtX8d"+6U4,M+XUt'>Cm*U-k7<^N!;80A<Ch*MPl'Zmp@S<04`ub(kK!R%\>P6)4j$W4HVHn!Dn$11=]"W\hmQ$@
%T%#)4-*??^GDa1tED;VR^^aNnTniJiK6"4.qI[kj++B-Q5R9M:_g+)HlY#<]2%(JS'NlstQ;niN=5]7cg^+Q\G4Kbnki.6/IXa44
%7`j_k6B?kLS&b`fORJi`phR;o*0E\:'#FUG(]AGHrkcg?lT9h.hLZ%m:"<7t5q/6N8lUofKIW;l`qd6B!AT8Nd,I<0F+?n7;>Nkq
%9]Rj[p'(nF5fe2%#n;?.6PjWkrV/Z[^V>eT)qHp&7&cD>\.$l-/u.spdfL4^&_,ahR;<HAW^1F1m2'AgPs@u#,VA<^Z;dr8X]Opr
%rK_8J6n@(u0\L.g5/"a'hGQfGs!l2a!-dAb&[?1gZgHB`1fL`#6f#?Nc'6_M^/LVbkn3o/RLDa?`CP#gDFF(!G8*QI=hH4RCZZ@G
%GbWsQqZ+*rJHdY26@#knoEUcAh\g]ibo1]J<TFp#gEq_O/(LsH*$6AiJK9kZg]FHYhC/\e0N,ClSKP66r,Vdu%m,$U5b+O9AKR-5
%i-ci,^@2>-)QV90[i/qM6V^l0n1YC*9"GB8NXIbn%Q0&8_ZCY%RqYA0EnSfAQEfV1A;$BpEriR#/NA8Ts"0u>D'ZohKh!s$bUr'>
%PB`&+b;tg6h<%;7.6('R+(dCTJ6g`L8O3bNke_uO4sADH&r^SnPa`!I9:c4Sm7(mp>#ri]L?Am!4lFU/0`m)Ran,kh2BsrK7<"1;
%\mI%G3MM(DA-/K<"ednuXFgM_daoSsLH3TLFD.&7<C*`M%uhl0g)@IbMnYZ[rYLrfMQ/(IRUgC*lOuTJ4JUtB(R]m5UVNtoI_c^!
%M&,r=$sXpJAe0'@Vu6jae$?s-"%BA<dPD?!5l$:AQd,4r:1O-=A'GpU5nc7@E.Yd-E@'Qm88jp)Ihdm&>Rl.o@cSa%*n!sNFWTM=
%Gjk#m<A2[je=[h_B$83j*4%Z3F0\l\UPW]rVtYk=gB&hM)@#=h+`/@ZgBs'DHh+OMd-]JE3%RCJ4I]',`)X(L:WNd94Gq6;%/q,E
%"%uK!U+5("pkK"u0B2gqlkB/Frj%!-Y2YI2NP3?E%*4'`qaSWu2CQQ8U/K3NRNe8?;aN8"MMrmPgBd<gLe;)#HZD'tU6MsV>W#G,
%<)>R6_:11kI5[mj`Y!kmhjLe@<)QVQ]nIn$Y\/FR$*gp06^&)"Nd>??eRp;"cinH5.6-7F#h*j&l4YO"Jop^Z^J>iuJ]YbTnW"3V
%YO>rUknM&*>R\8R">Oub<l)40>o?Y<OX<r_e>R2#*Uc8NP*1K:jS8n>op1@WB5#f2;j1I%"'lDZ.bth"%!Fn4c,Ytmq]%S_ZAmlP
%QKEp!Jqo;CpNZ9okiri%1aleE9<W=`ng#n(N4PHdD?gmI&-Ytrm/HX]:K)sN*"PNfStSE[^]pZ;%1^HKYB?V,jCem=RoIq<qi)".
%'Aa3d-cOY7X*3]H"!Vm`U'*H<#GE1+38>lZWL9=AhV!\)oXA;(H!Z=0QO`g)2kpqW8HY)R`f)/W#su(%5HVU1[qN!QT`FO[RMZPL
%(57/80UZA1L\$9tH-mNHn]XlDWJ$V$)E8MR'sSOLG^KcdeSm#+"L6fB;lVi]/0j$Z+YED2[JY(E&6ej<>0:NpS,:"V8+7HHEff52
%P#W_4][bh^FF3L+hKrdZ>=!5gdj7Al#)b)PfqVFKA@G5fBb[B\\;o%rJc)iGV:!Hl:s2khDQhZ49E<n)i3\PGUU4`latqXO2:!J)
%XlM<1WsPuLl?O$uD:$\c9Itg_H)9;Bqu'MTn9-;!SPe<kjkdUml&uf(R$/j%fjanmY]X2FpQB)IQ-H:45Vk1=FZ`r;(F_cnh\P%0
%8YIUSo(MpIrnG@J4WHp@>,O1#cj,;+W!ViYos'ei$)&4cb+Ml%YjkI;B^6*NQem1@D,)=PY56pn`Tjr_HeTp"h#PDLe\g(@c+k`F
%7@hiN6-r\7%FD'ME*JT2[7gR>?H?+4kdS)KTnT)O'u'A/l`uA%PL(l>n:$fi"jZZME0]1Xfp7.LfD+jJp\.mlF2$c?n\it1lX@rV
%^XkO&8eWW)3(ROVRc=5`M&**+MVW-M#7CH`PYWAF=E9n)+3ks/CBI?mP@AMsB%G0!jTYKgMXurs5(/4r@iJu4mXS:*RnSm\WS&bc
%LarTAql"]0XQ[Ge5FKo-Sd+=8JD\M&5j`X@p#p*R/+ZFM6YEHC#<.R`h7?m)P`a='bDb4PB%KCg]"&;_\6@@!\fH]pj;n@,(/U_C
%W9C,H\^k6p'RV_Um:e8f<o%Xe!01fPKqWLTg_*2>787+1Gd]u_el5)T)rX)$^]2O\'4:(JX-6hfL=LKG+N=,sGWDL]o#s(kCm#;$
%-:KcX^g`.O[qrK=9Y.P;plUBn>SL=!_MnKC&q$oVM.R*SaT[^S"o6_0/BDcWUR<-"IA>P!B@AFU<@tmVmp5nkf++mg(.#14Hj77f
%JKBg.#)*_P>1^8RGaHQpllT4d#r`CJ@pC[QC[)hS!KF'ZE&+@$2rK>62X81`MZ(!8W*tr+5+&@2htYjek-NX_hE63&Fd`g.Sc&5'
%f>)dd/X/<pf`Mt^CJ1?A+HE:%LAVi7]L:$V,D:2g3D/c;dt^a0,)l2Mdt]4%A0l1CWB0pbI[CM)Rcfc:Rdq;n%rj])Z50o7WqXbe
%/!McceAWKUes#1/67[qW&E]m,)pjB%2L=9GSk04$f!V*4<9)IJ=5A8tXFTT5]9&+fm\e:+O#GZl<b(3N$OU.?8[c3)JC`9)nZW$N
%/=_BXT4PL^bu43=ShljU/a>M$&Lb"_E-LNFq&FO$0q-,?Lhj4Po78%-1[E*sQG7cbrrMO*Qm&J&-o'jIPBs#r*WlO>3o-o)d(8)Z
%\\t3*1H9I@Pai-4nDS',abGpo<AkVc]`_<7#'OVCK4,?f52=Z;E$]*40M2TtC5"E":URch(kh^YLH:W?dfn#:SMP[8bI\#8r<KiJ
%&7eVeb`Lps9&c;QnHcj(<1Pt-Cs'_/L$>B!X'Tu(IIG9TKP,8WQE"LXiEN=IXJ$Xqk5^rZ'ZuE,br9WX[];[O`C3RQhDJ/709]0t
%)*WI3ksNGWA-uK"h1P-Es'+YJIe`o72rHpuVu#<Mjfe^_rK%!IVk="RT/PV's5h;9r:F?GrpbL:lVBbFnIL-FgQ0,Io^9c7rY7Tq
%l$mXOp$OIts7Ef#o5?kno^6YtoABO#&H$5A_4U`!0E:i4rp^O!*uUoW/-~>
%AI9_PrivateDataEnd
